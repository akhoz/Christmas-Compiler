
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\004\003\000\002\004\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\063\006\000\002\006\004\000\002\007\006\000\002" +
    "\012\003\000\002\012\004\000\002\013\004\000\002\014" +
    "\005\000\002\014\004\000\002\061\003\000\002\062\003" +
    "\000\002\015\004\000\002\016\004\000\002\016\005\000" +
    "\002\017\003\000\002\017\005\000\002\020\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\007\000\002\022\011\000\002\022\010\000" +
    "\002\022\012\000\002\023\011\000\002\024\002\000\002" +
    "\024\003\000\002\025\007\000\002\031\004\000\002\027" +
    "\007\000\002\052\007\000\002\053\003\000\002\053\003" +
    "\000\002\053\002\000\002\054\003\000\002\054\002\000" +
    "\002\055\003\000\002\055\002\000\002\026\007\000\002" +
    "\046\006\000\002\037\003\000\002\037\004\000\002\042" +
    "\006\000\002\047\003\000\002\047\002\000\002\043\005" +
    "\000\002\040\006\000\002\040\012\000\002\064\005\000" +
    "\002\041\005\000\002\041\003\000\002\035\003\000\002" +
    "\035\004\000\002\035\004\000\002\036\004\000\002\030" +
    "\004\000\002\030\005\000\002\056\007\000\002\057\003" +
    "\000\002\057\005\000\002\060\007\000\002\002\003\000" +
    "\002\044\004\000\002\044\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\014\004\012\007\006\011\013\016\020\017" +
    "\017\001\002\000\004\002\321\001\002\000\004\020\041" +
    "\001\002\000\010\006\000\022\000\061\000\001\002\000" +
    "\014\004\uffce\007\uffce\011\uffce\016\uffce\017\uffce\001\002" +
    "\000\006\006\035\061\036\001\002\000\004\002\uff8f\001" +
    "\002\000\010\006\ufffd\022\ufffd\061\ufffd\001\002\000\010" +
    "\006\uffff\022\uffff\061\uffff\001\002\000\004\024\024\001" +
    "\002\000\004\002\uff91\001\002\000\014\004\012\007\006" +
    "\011\013\016\020\017\017\001\002\000\010\006\ufffe\022" +
    "\ufffe\061\ufffe\001\002\000\010\006\ufffc\022\ufffc\061\ufffc" +
    "\001\002\000\014\004\uffcd\007\uffcd\011\uffcd\016\uffcd\017" +
    "\uffcd\001\002\000\004\002\uff90\001\002\000\004\020\uffc7" +
    "\001\002\000\016\004\012\007\006\011\013\016\020\017" +
    "\017\025\031\001\002\000\004\006\035\001\002\000\006" +
    "\025\uffc4\062\uffc4\001\002\000\006\025\uffc2\062\uffc2\001" +
    "\002\000\006\025\033\062\032\001\002\000\004\020\uffc6" +
    "\001\002\000\014\004\012\007\006\011\013\016\020\017" +
    "\017\001\002\000\004\020\uffc5\001\002\000\006\025\uffc3" +
    "\062\uffc3\001\002\000\014\012\ufff3\024\ufff3\025\ufff3\045" +
    "\ufff3\062\ufff3\001\002\000\004\020\041\001\002\000\042" +
    "\004\012\005\057\006\100\007\006\011\013\016\020\017" +
    "\017\021\067\046\052\047\066\050\071\051\044\052\062" +
    "\055\054\057\076\060\070\001\002\000\004\002\uff8e\001" +
    "\002\000\042\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\055\uffc9\057\uffc9\060\uffc9\001\002\000\046" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\016\uffd7\017" +
    "\uffd7\021\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\001\002\000" +
    "\046\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\016\uffd5" +
    "\017\uffd5\021\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\001\002" +
    "\000\004\024\302\001\002\000\046\004\uffbb\005\uffbb\006" +
    "\uffbb\007\uffbb\011\uffbb\016\uffbb\017\uffbb\021\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\057\uffbb\060\uffbb\001\002\000\046\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\011\uffc0\016\uffc0\017\uffc0\021\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\001\002\000\046\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\011\uffbf\016\uffbf\017\uffbf\021\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\057\uffbf\060\uffbf\001\002\000\046\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\011\uffd4\016\uffd4\017\uffd4\021" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002\000\046\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\011\uffbc\016\uffbc\017\uffbc" +
    "\021\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\055\uffbc\057\uffbc\060\uffbc\001\002\000\004" +
    "\024\271\001\002\000\042\004\012\005\057\006\100\007" +
    "\006\011\013\016\020\017\017\021\067\046\052\047\066" +
    "\050\071\051\044\052\062\055\054\057\076\060\070\001" +
    "\002\000\040\004\012\006\107\007\006\010\115\011\013" +
    "\015\110\016\020\017\017\024\102\026\114\044\106\045" +
    "\265\063\113\064\120\065\105\001\002\000\046\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016\uffd3\017\uffd3\021" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\057\uffd3\060\uffd3\001\002\000\046\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\016\uffd8\017\uffd8" +
    "\021\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000\004" +
    "\045\264\001\002\000\046\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\016\uffd2\017\uffd2\021\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057" +
    "\uffd2\060\uffd2\001\002\000\046\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\011\uffbe\016\uffbe\017\uffbe\021\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\057\uffbe\060\uffbe\001\002\000\004\024\241\001\002\000" +
    "\046\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\016\uffbd" +
    "\017\uffbd\021\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\057\uffbd\060\uffbd\001\002" +
    "\000\046\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\016" +
    "\uffd9\017\uffd9\021\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001" +
    "\002\000\112\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca" +
    "\011\uffca\013\uffca\014\uffca\016\uffca\017\uffca\021\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\057\uffca\060\uffca\062\uffca\001\002\000" +
    "\004\046\232\001\002\000\112\002\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\017" +
    "\uffc8\021\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\001\002\000\004\024\226\001\002\000\004\024\222" +
    "\001\002\000\046\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb\060" +
    "\uffdb\001\002\000\046\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\011\uffc1\016\uffc1\017\uffc1\021\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1" +
    "\060\uffc1\001\002\000\010\012\216\024\024\045\217\001" +
    "\002\000\006\006\035\022\200\001\002\000\004\024\171" +
    "\001\002\000\046\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060" +
    "\uffd6\001\002\000\004\012\101\001\002\000\036\004\012" +
    "\006\107\007\006\010\115\011\013\015\110\016\020\017" +
    "\017\024\102\026\114\044\106\063\113\064\120\065\105" +
    "\001\002\000\034\004\012\006\107\007\006\010\115\011" +
    "\013\015\110\016\020\017\017\024\102\026\114\063\113" +
    "\064\120\065\105\001\002\000\044\013\uffde\014\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045" +
    "\uffde\062\uffde\001\002\000\004\045\166\001\002\000\046" +
    "\013\ufff8\014\ufff8\021\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\045\ufff8\062\ufff8\001\002\000" +
    "\036\004\012\006\107\007\006\010\115\011\013\015\110" +
    "\016\020\017\017\024\102\026\114\044\106\063\113\064" +
    "\120\065\105\001\002\000\050\013\uffdf\014\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\164\034" +
    "\163\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\045\uffdf\062\uffdf\001\002\000\046\013\ufffa\014" +
    "\ufffa\021\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\062\ufffa\001\002\000\014\025\ufff2" +
    "\042\157\043\160\045\ufff2\062\ufff2\001\002\000\044\013" +
    "\uff9b\014\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\045\uff9b\062\uff9b\001\002\000\046\013\ufff9" +
    "\014\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\045\ufff9\062\ufff9\001\002\000\010\010" +
    "\153\063\154\064\156\001\002\000\046\013\ufffb\014\ufffb" +
    "\021\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\045\ufffb\062\ufffb\001\002\000\044\013\124\014" +
    "\131\025\uffe7\026\123\027\135\030\133\031\127\032\125" +
    "\035\130\036\136\037\132\040\134\041\126\042\uffe7\043" +
    "\uffe7\045\uffe7\062\uffe7\001\002\000\014\025\uffee\042\uffee" +
    "\043\uffee\045\uffee\062\uffee\001\002\000\046\013\ufff7\014" +
    "\ufff7\021\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\045\ufff7\062\ufff7\001\002\000\044\013\uffdc" +
    "\014\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\045\uffdc\062\uffdc\001\002\000\044\013\uffdd\014" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\045\uffdd\062\uffdd\001\002\000\034\004\012\006\107" +
    "\007\006\010\115\011\013\015\110\016\020\017\017\024" +
    "\102\026\114\063\113\064\120\065\105\001\002\000\034" +
    "\004\012\006\107\007\006\010\115\011\013\015\110\016" +
    "\020\017\017\024\102\026\114\063\113\064\120\065\105" +
    "\001\002\000\034\004\012\006\107\007\006\010\115\011" +
    "\013\015\110\016\020\017\017\024\102\026\114\063\113" +
    "\064\120\065\105\001\002\000\034\004\012\006\107\007" +
    "\006\010\115\011\013\015\110\016\020\017\017\024\102" +
    "\026\114\063\113\064\120\065\105\001\002\000\034\004" +
    "\012\006\107\007\006\010\115\011\013\015\110\016\020" +
    "\017\017\024\102\026\114\063\113\064\120\065\105\001" +
    "\002\000\034\004\012\006\107\007\006\010\115\011\013" +
    "\015\110\016\020\017\017\024\102\026\114\063\113\064" +
    "\120\065\105\001\002\000\034\004\012\006\107\007\006" +
    "\010\115\011\013\015\110\016\020\017\017\024\102\026" +
    "\114\063\113\064\120\065\105\001\002\000\034\004\012" +
    "\006\107\007\006\010\115\011\013\015\110\016\020\017" +
    "\017\024\102\026\114\063\113\064\120\065\105\001\002" +
    "\000\034\004\012\006\107\007\006\010\115\011\013\015" +
    "\110\016\020\017\017\024\102\026\114\063\113\064\120" +
    "\065\105\001\002\000\034\004\012\006\107\007\006\010" +
    "\115\011\013\015\110\016\020\017\017\024\102\026\114" +
    "\063\113\064\120\065\105\001\002\000\034\004\012\006" +
    "\107\007\006\010\115\011\013\015\110\016\020\017\017" +
    "\024\102\026\114\063\113\064\120\065\105\001\002\000" +
    "\034\004\012\006\107\007\006\010\115\011\013\015\110" +
    "\016\020\017\017\024\102\026\114\063\113\064\120\065" +
    "\105\001\002\000\030\014\131\025\uffeb\026\123\027\135" +
    "\030\133\031\127\032\125\042\uffeb\043\uffeb\045\uffeb\062" +
    "\uffeb\001\002\000\044\013\uffe4\014\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\125\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\062\uffe4" +
    "\001\002\000\030\014\131\025\uffe9\026\123\027\135\030" +
    "\133\031\127\032\125\042\uffe9\043\uffe9\045\uffe9\062\uffe9" +
    "\001\002\000\044\013\uffe3\014\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\125\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\062\uffe3\001" +
    "\002\000\030\014\131\025\uffea\026\123\027\135\030\133" +
    "\031\127\032\125\042\uffea\043\uffea\045\uffea\062\uffea\001" +
    "\002\000\044\013\uffe6\014\uffe6\025\uffe6\026\uffe6\027\135" +
    "\030\133\031\127\032\125\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\062\uffe6\001\002" +
    "\000\030\014\131\025\uffec\026\123\027\135\030\133\031" +
    "\127\032\125\042\uffec\043\uffec\045\uffec\062\uffec\001\002" +
    "\000\044\013\uffe2\014\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\125\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\045\uffe2\062\uffe2\001\002\000" +
    "\030\014\131\025\uffe8\026\123\027\135\030\133\031\127" +
    "\032\125\042\uffe8\043\uffe8\045\uffe8\062\uffe8\001\002\000" +
    "\044\013\uffe1\014\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\045\uffe1\062\uffe1\001\002\000\030" +
    "\014\131\025\uffed\026\123\027\135\030\133\031\127\032" +
    "\125\042\uffed\043\uffed\045\uffed\062\uffed\001\002\000\044" +
    "\013\uffe5\014\uffe5\025\uffe5\026\uffe5\027\135\030\133\031" +
    "\127\032\125\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\045\uffe5\062\uffe5\001\002\000\046\013" +
    "\ufff6\014\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\045\ufff6\056\ufff6\062\ufff6\001\002\000\046" +
    "\013\ufff4\014\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\043\ufff4\045\ufff4\056\ufff4\062\ufff4\001\002\000" +
    "\044\013\uff98\014\uff98\025\uff98\026\uff98\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\045\uff98\062\uff98\001\002\000\046" +
    "\013\ufff5\014\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\045\ufff5\056\ufff5\062\ufff5\001\002\000" +
    "\036\004\012\006\107\007\006\010\115\011\013\015\110" +
    "\016\020\017\017\024\102\026\114\044\106\063\113\064" +
    "\120\065\105\001\002\000\036\004\012\006\107\007\006" +
    "\010\115\011\013\015\110\016\020\017\017\024\102\026" +
    "\114\044\106\063\113\064\120\065\105\001\002\000\014" +
    "\025\ufff0\042\ufff0\043\ufff0\045\ufff0\062\ufff0\001\002\000" +
    "\014\025\ufff1\042\ufff1\043\ufff1\045\ufff1\062\ufff1\001\002" +
    "\000\044\013\uff99\014\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\045\uff99\062\uff99\001\002\000" +
    "\044\013\uff9a\014\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\045\uff9a\062\uff9a\001\002\000\014" +
    "\025\uffef\042\157\043\160\045\uffef\062\uffef\001\002\000" +
    "\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\016\uffd1" +
    "\017\uffd1\021\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\001\002" +
    "\000\020\014\131\025\170\026\123\027\135\030\133\031" +
    "\127\032\125\001\002\000\044\013\uffe0\014\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\045\uffe0" +
    "\062\uffe0\001\002\000\036\004\012\006\107\007\006\010" +
    "\115\011\013\015\110\016\020\017\017\024\102\026\114" +
    "\044\106\063\113\064\120\065\105\001\002\000\006\025" +
    "\uff94\062\uff94\001\002\000\006\025\175\062\174\001\002" +
    "\000\036\004\012\006\107\007\006\010\115\011\013\015" +
    "\110\016\020\017\017\024\102\026\114\044\106\063\113" +
    "\064\120\065\105\001\002\000\004\045\176\001\002\000" +
    "\046\004\uff95\005\uff95\006\uff95\007\uff95\011\uff95\016\uff95" +
    "\017\uff95\021\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\057\uff95\060\uff95\001\002" +
    "\000\006\025\uff93\062\uff93\001\002\000\004\010\214\001" +
    "\002\000\004\006\202\001\002\000\006\012\203\045\204" +
    "\001\002\000\004\020\205\001\002\000\046\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\011\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\057\uffa0\060\uffa0\001\002\000\014\010\115" +
    "\015\110\063\113\064\120\065\105\001\002\000\006\021" +
    "\211\062\210\001\002\000\006\021\uff9c\062\uff9c\001\002" +
    "\000\014\010\115\015\110\063\113\064\120\065\105\001" +
    "\002\000\004\045\212\001\002\000\046\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\011\uff9f\016\uff9f\017\uff9f\021\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\057\uff9f\060\uff9f\001\002\000\006\021\uff9d\062" +
    "\uff9d\001\002\000\004\023\215\001\002\000\004\006\uff9e" +
    "\001\002\000\036\004\012\006\107\007\006\010\115\011" +
    "\013\015\110\016\020\017\017\024\102\026\114\044\106" +
    "\063\113\064\120\065\105\001\002\000\046\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002\000\004\045\221" +
    "\001\002\000\050\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057" +
    "\uffcf\060\uffcf\001\002\000\036\004\012\006\107\007\006" +
    "\010\115\011\013\015\110\016\020\017\017\024\102\026" +
    "\114\044\106\063\113\064\120\065\105\001\002\000\004" +
    "\025\224\001\002\000\004\020\041\001\002\000\046\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3\016\uffb3\017\uffb3" +
    "\021\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3\001\002\000\004" +
    "\006\227\001\002\000\004\025\230\001\002\000\004\045" +
    "\231\001\002\000\046\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\011\uff92\016\uff92\017\uff92\021\uff92\046\uff92\047\uff92\050" +
    "\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\057\uff92" +
    "\060\uff92\001\002\000\004\024\233\001\002\000\036\004" +
    "\012\006\107\007\006\010\115\011\013\015\110\016\020" +
    "\017\017\024\102\026\114\044\106\063\113\064\120\065" +
    "\105\001\002\000\004\025\235\001\002\000\004\020\041" +
    "\001\002\000\046\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011" +
    "\uffb5\016\uffb5\017\uffb5\021\uffb5\046\uffb5\047\066\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\060" +
    "\uffb5\001\002\000\046\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\016\uffb6\017\uffb6\021\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\057\uffb6" +
    "\060\uffb6\001\002\000\046\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\011\uffb4\016\uffb4\017\uffb4\021\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057" +
    "\uffb4\060\uffb4\001\002\000\036\004\012\006\107\007\006" +
    "\010\115\011\013\015\110\016\020\017\017\024\102\026" +
    "\114\044\106\063\113\064\120\065\105\001\002\000\004" +
    "\025\243\001\002\000\004\020\245\001\002\000\046\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\016\uffa8\017\uffa8" +
    "\021\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\001\002\000\004" +
    "\053\250\001\002\000\010\021\uffa6\053\uffa6\054\uffa6\001" +
    "\002\000\010\021\uffa2\053\250\054\255\001\002\000\010" +
    "\010\153\063\154\064\156\001\002\000\004\056\252\001" +
    "\002\000\040\004\012\005\057\006\100\007\006\011\013" +
    "\016\020\017\017\046\052\047\066\050\071\051\044\052" +
    "\062\055\054\057\076\060\070\001\002\000\046\004\012" +
    "\005\057\006\100\007\006\011\013\016\020\017\017\021" +
    "\uffa4\046\052\047\066\050\071\051\044\052\062\053\uffa4" +
    "\054\uffa4\055\054\057\076\060\070\001\002\000\046\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\016\uffda\017\uffda" +
    "\021\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\057\uffda\060\uffda\001\002\000\004" +
    "\056\262\001\002\000\004\021\uffa3\001\002\000\010\021" +
    "\uffa5\053\uffa5\054\uffa5\001\002\000\004\021\261\001\002" +
    "\000\046\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\016" +
    "\uffa7\017\uffa7\021\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7\060\uffa7\001" +
    "\002\000\040\004\012\005\057\006\100\007\006\011\013" +
    "\016\020\017\017\046\052\047\066\050\071\051\044\052" +
    "\062\055\054\057\076\060\070\001\002\000\042\004\012" +
    "\005\057\006\100\007\006\011\013\016\020\017\017\021" +
    "\uffa1\046\052\047\066\050\071\051\044\052\062\055\054" +
    "\057\076\060\070\001\002\000\046\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\011\uffb2\016\uffb2\017\uffb2\021\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\057\uffb2\060\uffb2\001\002\000\046\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\011\uff97\016\uff97\017\uff97\021\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\057\uff97\060\uff97\001\002\000\004\045\267\001" +
    "\002\000\046\004\uff96\005\uff96\006\uff96\007\uff96\011\uff96" +
    "\016\uff96\017\uff96\021\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\057\uff96\060\uff96" +
    "\001\002\000\112\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\062\uffcb\001\002" +
    "\000\036\004\012\006\107\007\006\010\115\011\013\015" +
    "\110\016\020\017\017\024\102\026\114\044\106\063\113" +
    "\064\120\065\105\001\002\000\004\025\273\001\002\000" +
    "\004\020\041\001\002\000\046\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\011\uffba\016\uffba\017\uffba\021\uffba\046\uffba\047" +
    "\275\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\057\uffba\060\uffba\001\002\000\006\020\041\046\232\001" +
    "\002\000\046\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8" +
    "\016\uffb8\017\uffb8\021\uffb8\046\uffb8\047\277\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8" +
    "\001\002\000\004\020\041\001\002\000\046\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\016\uffb7\017\uffb7\021\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\057\uffb7\060\uffb7\001\002\000\046\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\011\uffb9\016\uffb9\017\uffb9\021" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\054\uffb9\055\uffb9\057\uffb9\060\uffb9\001\002\000\040\004" +
    "\012\006\107\007\006\010\115\011\013\015\110\016\020" +
    "\017\017\024\102\026\114\044\106\045\uffad\063\113\064" +
    "\120\065\105\001\002\000\004\025\316\001\002\000\004" +
    "\045\uffae\001\002\000\004\045\uffaf\001\002\000\006\012" +
    "\216\024\024\001\002\000\004\045\310\001\002\000\040" +
    "\004\012\006\107\007\006\010\115\011\013\015\110\016" +
    "\020\017\017\024\102\026\114\044\106\045\uffab\063\113" +
    "\064\120\065\105\001\002\000\004\045\uffac\001\002\000" +
    "\004\045\313\001\002\000\040\004\012\006\107\007\006" +
    "\010\115\011\013\015\110\016\020\017\017\024\102\025" +
    "\uffa9\026\114\044\106\063\113\064\120\065\105\001\002" +
    "\000\004\025\uffaa\001\002\000\004\025\uffb0\001\002\000" +
    "\004\020\041\001\002\000\046\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\011\uffb1\016\uffb1\017\uffb1\021\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\057\uffb1\060\uffb1\001\002\000\110\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\062\uffcc" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\022\002\003\003\007\010\013\012\015\013" +
    "\006\015\004\044\014\045\010\001\001\000\002\001\001" +
    "\000\006\014\317\061\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\022\001\001\000" +
    "\002\001\001\000\014\003\007\010\013\013\020\015\004" +
    "\045\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\024\010\026\017\027\020\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\024\010\026\020\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\037\061\036\001\001\000\054\003\074\004" +
    "\052\005\071\006\063\007\055\010\073\013\057\015\004" +
    "\021\041\022\072\023\045\025\046\026\060\027\062\030" +
    "\050\031\044\040\076\056\042\060\047\062\064\063\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\074\005\253" +
    "\006\063\007\055\010\073\013\057\015\004\021\041\022" +
    "\072\023\045\025\046\026\060\027\062\030\050\031\044" +
    "\040\076\056\042\060\047\062\267\063\054\001\001\000" +
    "\030\003\024\010\013\011\102\013\120\015\004\032\265" +
    "\033\115\035\121\036\111\050\110\051\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\022\001\001" +
    "\000\004\064\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\024\010\013\011\102" +
    "\013\120\015\004\032\103\033\115\035\121\036\111\050" +
    "\110\051\116\001\001\000\022\003\024\010\013\011\102" +
    "\013\120\015\004\033\166\035\121\036\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\024\010\013\011\102\013\120\015\004\033\115\035" +
    "\121\036\111\050\164\051\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\024\010\013" +
    "\011\102\013\120\015\004\033\151\035\121\036\111\001" +
    "\001\000\022\003\024\010\013\011\102\013\120\015\004" +
    "\033\150\035\121\036\111\001\001\000\022\003\024\010" +
    "\013\011\102\013\120\015\004\033\147\035\121\036\111" +
    "\001\001\000\022\003\024\010\013\011\102\013\120\015" +
    "\004\033\146\035\121\036\111\001\001\000\022\003\024" +
    "\010\013\011\102\013\120\015\004\033\145\035\121\036" +
    "\111\001\001\000\022\003\024\010\013\011\102\013\120" +
    "\015\004\033\144\035\121\036\111\001\001\000\022\003" +
    "\024\010\013\011\102\013\120\015\004\033\143\035\121" +
    "\036\111\001\001\000\022\003\024\010\013\011\102\013" +
    "\120\015\004\033\142\035\121\036\111\001\001\000\022" +
    "\003\024\010\013\011\102\013\120\015\004\033\141\035" +
    "\121\036\111\001\001\000\022\003\024\010\013\011\102" +
    "\013\120\015\004\033\140\035\121\036\111\001\001\000" +
    "\022\003\024\010\013\011\102\013\120\015\004\033\137" +
    "\035\121\036\111\001\001\000\022\003\024\010\013\011" +
    "\102\013\120\015\004\033\136\035\121\036\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\024\010\013\011\102\013\120\015\004\033\115" +
    "\035\121\036\111\050\161\051\116\001\001\000\026\003" +
    "\024\010\013\011\102\013\120\015\004\033\115\035\121" +
    "\036\111\050\160\051\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\024\010\013\011\102\013\120\015\004" +
    "\032\171\033\115\035\121\036\111\050\110\051\116\057" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\024\010\013\011\102\013\120\015\004\032\176\033" +
    "\115\035\121\036\111\050\110\051\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\206\041\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\024\010\013" +
    "\011\102\013\120\015\004\032\217\033\115\035\121\036" +
    "\111\050\110\051\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\024\010\013\011" +
    "\102\013\120\015\004\032\222\033\115\035\121\036\111" +
    "\050\110\051\116\001\001\000\002\001\001\000\006\014" +
    "\224\061\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\024\010\013\011\102\013\120" +
    "\015\004\032\233\033\115\035\121\036\111\050\110\051" +
    "\116\001\001\000\002\001\001\000\006\014\235\061\036" +
    "\001\001\000\006\023\237\024\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\024\010\013\011\102" +
    "\013\120\015\004\032\241\033\115\035\121\036\111\050" +
    "\110\051\116\001\001\000\002\001\001\000\004\046\243" +
    "\001\001\000\002\001\001\000\006\037\246\042\245\001" +
    "\001\000\002\001\001\000\010\042\256\043\255\047\257" +
    "\001\001\000\004\034\250\001\001\000\002\001\001\000" +
    "\052\003\074\004\252\005\071\006\063\007\055\010\073" +
    "\013\057\015\004\021\041\022\072\023\045\025\046\026" +
    "\060\027\062\030\050\031\044\040\076\056\042\060\047" +
    "\063\054\001\001\000\050\003\074\005\253\006\063\007" +
    "\055\010\073\013\057\015\004\021\041\022\072\023\045" +
    "\025\046\026\060\027\062\030\050\031\044\040\076\056" +
    "\042\060\047\063\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\074\004\262\005\071" +
    "\006\063\007\055\010\073\013\057\015\004\021\041\022" +
    "\072\023\045\025\046\026\060\027\062\030\050\031\044" +
    "\040\076\056\042\060\047\063\054\001\001\000\050\003" +
    "\074\005\253\006\063\007\055\010\073\013\057\015\004" +
    "\021\041\022\072\023\045\025\046\026\060\027\062\030" +
    "\050\031\044\040\076\056\042\060\047\063\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\024\010\013" +
    "\011\102\013\120\015\004\032\271\033\115\035\121\036" +
    "\111\050\110\051\116\001\001\000\002\001\001\000\006" +
    "\014\273\061\036\001\001\000\004\023\275\001\001\000" +
    "\006\014\300\061\036\001\001\000\002\001\001\000\006" +
    "\014\277\061\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\024\007\304\010\305\011\102\013\120" +
    "\015\004\032\303\033\115\035\121\036\111\050\110\051" +
    "\116\052\302\053\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\022\001\001\000" +
    "\002\001\001\000\032\003\024\010\013\011\102\013\120" +
    "\015\004\032\310\033\115\035\121\036\111\050\110\051" +
    "\116\054\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\024\010\013\011\102\013\120\015\004\032" +
    "\313\033\115\035\121\036\111\050\110\051\116\055\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\316\061\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    Lexer parser;
    SymbolTable symbolTable = new SymbolTable();


    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser=parser;
        this.symbolFactory = new DefaultSymbolFactory();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Integer.valueOf(i.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = s.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = c.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Boolean.valueOf(b.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Float.valueOf(f.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String tipo = (String) t;
    String nombre = (String) id;
    RESULT = new SymbolInfo(nombre, tipo);
    System.out.println("Creando símbolo: " + RESULT);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_aritmetica ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignar ::= IDENTIFIER EQ expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();
    boolean inserted = currentTable.insert(info.getName(), info);
    if (!inserted) {
        System.err.println("Error semántico: La variable '" + info.getName() + "' ya existe en este ámbito.");
    } else {
        System.out.println("Declaración de variable " + info.getName());
    }
    RESULT = null; // 'creacion' no necesita un valor semántico

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();
    boolean inserted = currentTable.insert(info.getName(), info);
    if (!inserted) {
        System.err.println("Error semántico: La variable '" + info.getName() + "' ya existe en este ámbito.");
    } else {
        System.out.println("Declaración de variable " + info.getName() + " con valor inicial");
    }
    RESULT = null; // 'creacionAsignacion' no necesita un valor semántico

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque ::= apertura_bloque sentencias cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque ::= apertura_bloque cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // apertura_bloque ::= OPEN_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cierre_bloque ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.getCurrentScope();
        currentTable.printScopes();
        symbolTable.popFunction();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    SymbolInfo funcSymbol = (SymbolInfo)i;
    String funcName = funcSymbol.getName();
    String returnType = funcSymbol.getType();
    System.out.println("Creando función '" + funcName + "' con tipo de retorno '" + returnType + "'");
    List<SymbolInfo> paramList = (List<SymbolInfo>) e;
    System.out.println("Número de parámetros: " + paramList.size());
    FunctionInfo fInfo = new FunctionInfo(funcName, returnType, paramList);
    //
    symbolTable.functionScopes.push(fInfo);

    boolean inserted = symbolTable.pushFunction(fInfo);
    if (!inserted) {
        System.err.println("Error semántico: La función '" + funcName + "' ya existe en este ámbito.");
    } else {
        System.out.println("Función '" + funcName + "' con tipo de retorno '" + returnType + "' y "
                           + paramList.size() + " parámetros insertada en la tabla.");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		
    System.out.println("Sin parámetros");
    RESULT = new ArrayList<SymbolInfo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = p;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametroAux ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = (List<SymbolInfo>) pl;
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametro ::= nombrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_stmt ::= CASE literales_num COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arreglo ::= tipos array_size IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arreglo ::= tipos array_size IDENTIFIER EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // array_size ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // negacion ::= MINUS literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
