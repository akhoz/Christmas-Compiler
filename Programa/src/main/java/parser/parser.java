
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import tables.TokenInfo;
import semanticalAnalysis.Variable;
import semanticalAnalysis.Function;
import semanticalAnalysis.ControlStructureOperations;
import destCodeGenerator.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\063\006\000\002\063" +
    "\004\000\002\006\004\000\002\007\006\000\002\012\003" +
    "\000\002\012\004\000\002\013\004\000\002\014\005\000" +
    "\002\014\004\000\002\014\005\000\002\061\003\000\002" +
    "\062\003\000\002\015\004\000\002\016\004\000\002\016" +
    "\005\000\002\017\003\000\002\017\005\000\002\020\003" +
    "\000\002\020\003\000\002\072\002\000\002\065\007\000" +
    "\002\066\002\000\002\066\003\000\002\066\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\007\000\002\022\011\000\002\022\010\000" +
    "\002\023\011\000\002\024\002\000\002\024\003\000\002" +
    "\024\004\000\002\025\007\000\002\031\004\000\002\027" +
    "\007\000\002\052\007\000\002\053\003\000\002\053\003" +
    "\000\002\053\002\000\002\054\003\000\002\054\002\000" +
    "\002\055\003\000\002\055\002\000\002\026\007\000\002" +
    "\046\006\000\002\037\003\000\002\037\004\000\002\042" +
    "\006\000\002\047\003\000\002\047\002\000\002\043\005" +
    "\000\002\040\004\000\002\040\004\000\002\067\005\000" +
    "\002\064\005\000\002\070\004\000\002\071\007\000\002" +
    "\041\005\000\002\041\003\000\002\035\003\000\002\035" +
    "\004\000\002\035\004\000\002\036\004\000\002\030\004" +
    "\000\002\030\005\000\002\056\007\000\002\057\003\000" +
    "\002\057\005\000\002\060\007\000\002\002\003\000\002" +
    "\002\003\000\002\044\004\000\002\044\003\000\002\045" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\016\003\016\004\012\007\006\011\013\016" +
    "\021\017\020\001\002\000\004\002\345\001\002\000\004" +
    "\020\146\001\002\000\006\006\000\061\000\001\002\000" +
    "\014\004\uffc8\007\uffc8\011\uffc8\016\uffc8\017\uffc8\001\002" +
    "\000\006\006\143\061\142\001\002\000\004\002\uff7e\001" +
    "\002\000\006\006\ufffd\061\ufffd\001\002\000\006\006\uffff" +
    "\061\uffff\001\002\000\004\024\025\001\002\000\004\002" +
    "\uff81\001\002\000\004\002\uff80\001\002\000\014\004\012" +
    "\007\006\011\013\016\021\017\020\001\002\000\006\006" +
    "\ufffe\061\ufffe\001\002\000\006\006\ufffc\061\ufffc\001\002" +
    "\000\014\004\uffc7\007\uffc7\011\uffc7\016\uffc7\017\uffc7\001" +
    "\002\000\004\002\uff7f\001\002\000\004\020\uffc0\001\002" +
    "\000\016\004\012\007\006\011\013\016\021\017\020\025" +
    "\033\001\002\000\006\025\uffba\062\uffba\001\002\000\004" +
    "\006\037\001\002\000\006\025\uffbd\062\uffbd\001\002\000" +
    "\006\025\uffbb\062\uffbb\001\002\000\006\025\035\062\034" +
    "\001\002\000\004\020\uffbf\001\002\000\014\004\012\007" +
    "\006\011\013\016\021\017\020\001\002\000\004\020\uffbe" +
    "\001\002\000\006\025\uffbc\062\uffbc\001\002\000\014\012" +
    "\ufff3\022\040\025\ufff3\045\ufff3\062\ufff3\001\002\000\026" +
    "\003\057\006\047\010\060\015\051\024\042\026\056\044" +
    "\046\063\055\064\063\065\045\001\002\000\012\012\uff91" +
    "\025\uff91\045\uff91\062\uff91\001\002\000\024\003\057\006" +
    "\047\010\060\015\051\024\042\026\056\063\055\064\063" +
    "\065\045\001\002\000\050\013\uffdf\014\uffdf\021\uffdf\023" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\045\uffdf\062\uffdf\001\002\000\004\023\137\001\002" +
    "\000\052\013\ufff8\014\ufff8\021\ufff8\023\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\056" +
    "\ufff8\062\ufff8\001\002\000\026\003\057\006\047\010\060" +
    "\015\051\024\042\026\056\044\046\063\055\064\063\065" +
    "\045\001\002\000\060\013\uffd9\014\uffd9\021\uffd9\022\040" +
    "\023\uffd9\024\uffb9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\127\034\125\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045\uffd9\062\uffd9\001" +
    "\002\000\050\013\uffdc\014\uffdc\021\uffdc\023\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc" +
    "\062\uffdc\001\002\000\052\013\ufffa\014\ufffa\021\ufffa\023" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\045\ufffa\056\ufffa\062\ufffa\001\002\000\050\013\uffdd" +
    "\014\uffdd\021\uffdd\023\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\045\uffdd\062\uffdd\001\002\000" +
    "\020\021\ufff2\023\ufff2\025\ufff2\042\120\043\121\045\ufff2" +
    "\062\ufff2\001\002\000\050\013\uff8b\014\uff8b\021\uff8b\023" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\045\uff8b\062\uff8b\001\002\000\052\013\ufff9\014\ufff9" +
    "\021\ufff9\023\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\045\ufff9\056\ufff9\062\ufff9\001\002\000" +
    "\014\010\060\015\051\063\055\064\063\065\045\001\002" +
    "\000\006\025\116\045\115\001\002\000\052\013\ufffb\014" +
    "\ufffb\021\ufffb\023\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\045\ufffb\056\ufffb\062\ufffb\001\002" +
    "\000\050\013\066\014\073\021\uffe7\023\uffe7\025\uffe7\026" +
    "\065\027\077\030\075\031\071\032\067\035\072\036\100" +
    "\037\074\040\076\041\070\042\uffe7\043\uffe7\045\uffe7\062" +
    "\uffe7\001\002\000\020\021\uffee\023\uffee\025\uffee\042\uffee" +
    "\043\uffee\045\uffee\062\uffee\001\002\000\052\013\ufff7\014" +
    "\ufff7\021\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\045\ufff7\056\ufff7\062\ufff7\001\002" +
    "\000\050\013\uffde\014\uffde\021\uffde\023\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\062" +
    "\uffde\001\002\000\024\003\057\006\047\010\060\015\051" +
    "\024\042\026\056\063\055\064\063\065\045\001\002\000" +
    "\024\003\057\006\047\010\060\015\051\024\042\026\056" +
    "\063\055\064\063\065\045\001\002\000\024\003\057\006" +
    "\047\010\060\015\051\024\042\026\056\063\055\064\063" +
    "\065\045\001\002\000\024\003\057\006\047\010\060\015" +
    "\051\024\042\026\056\063\055\064\063\065\045\001\002" +
    "\000\024\003\057\006\047\010\060\015\051\024\042\026" +
    "\056\063\055\064\063\065\045\001\002\000\024\003\057" +
    "\006\047\010\060\015\051\024\042\026\056\063\055\064" +
    "\063\065\045\001\002\000\024\003\057\006\047\010\060" +
    "\015\051\024\042\026\056\063\055\064\063\065\045\001" +
    "\002\000\024\003\057\006\047\010\060\015\051\024\042" +
    "\026\056\063\055\064\063\065\045\001\002\000\024\003" +
    "\057\006\047\010\060\015\051\024\042\026\056\063\055" +
    "\064\063\065\045\001\002\000\024\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\063\055\064\063\065\045" +
    "\001\002\000\024\003\057\006\047\010\060\015\051\024" +
    "\042\026\056\063\055\064\063\065\045\001\002\000\024" +
    "\003\057\006\047\010\060\015\051\024\042\026\056\063" +
    "\055\064\063\065\045\001\002\000\034\014\073\021\uffeb" +
    "\023\uffeb\025\uffeb\026\065\027\077\030\075\031\071\032" +
    "\067\042\uffeb\043\uffeb\045\uffeb\062\uffeb\001\002\000\050" +
    "\013\uffe4\014\uffe4\021\uffe4\023\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\067\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\062\uffe4\001" +
    "\002\000\034\014\073\021\uffe9\023\uffe9\025\uffe9\026\065" +
    "\027\077\030\075\031\071\032\067\042\uffe9\043\uffe9\045" +
    "\uffe9\062\uffe9\001\002\000\050\013\uffe3\014\uffe3\021\uffe3" +
    "\023\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\067\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\045\uffe3\062\uffe3\001\002\000\034\014\073\021" +
    "\uffea\023\uffea\025\uffea\026\065\027\077\030\075\031\071" +
    "\032\067\042\uffea\043\uffea\045\uffea\062\uffea\001\002\000" +
    "\050\013\uffe6\014\uffe6\021\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\027\077\030\075\031\071\032\067\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\062\uffe6" +
    "\001\002\000\034\014\073\021\uffec\023\uffec\025\uffec\026" +
    "\065\027\077\030\075\031\071\032\067\042\uffec\043\uffec" +
    "\045\uffec\062\uffec\001\002\000\050\013\uffe2\014\uffe2\021" +
    "\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\067\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\045\uffe2\062\uffe2\001\002\000\034\014\073" +
    "\021\uffe8\023\uffe8\025\uffe8\026\065\027\077\030\075\031" +
    "\071\032\067\042\uffe8\043\uffe8\045\uffe8\062\uffe8\001\002" +
    "\000\050\013\uffe1\014\uffe1\021\uffe1\023\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\062" +
    "\uffe1\001\002\000\034\014\073\021\uffed\023\uffed\025\uffed" +
    "\026\065\027\077\030\075\031\071\032\067\042\uffed\043" +
    "\uffed\045\uffed\062\uffed\001\002\000\050\013\uffe5\014\uffe5" +
    "\021\uffe5\023\uffe5\025\uffe5\026\uffe5\027\077\030\075\031" +
    "\071\032\067\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\045\uffe5\062\uffe5\001\002\000\050\013" +
    "\uffdb\014\uffdb\021\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\062\uffdb\001\002" +
    "\000\050\013\uffda\014\uffda\021\uffda\023\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\062" +
    "\uffda\001\002\000\050\013\uff88\014\uff88\021\uff88\023\uff88" +
    "\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\045\uff88\062\uff88\001\002\000\026\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\044\046\063\055\064\063" +
    "\065\045\001\002\000\026\003\057\006\047\010\060\015" +
    "\051\024\042\026\056\044\046\063\055\064\063\065\045" +
    "\001\002\000\020\021\ufff0\023\ufff0\025\ufff0\042\ufff0\043" +
    "\ufff0\045\ufff0\062\ufff0\001\002\000\020\021\ufff1\023\ufff1" +
    "\025\ufff1\042\ufff1\043\ufff1\045\ufff1\062\ufff1\001\002\000" +
    "\004\024\130\001\002\000\050\013\uff89\014\uff89\021\uff89" +
    "\023\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\045\uff89\062\uff89\001\002\000\050\013\uff8f\014" +
    "\uff8f\021\uff8f\023\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\045\uff8f\062\uff8f\001\002\000\050" +
    "\013\uff8a\014\uff8a\021\uff8a\023\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045\uff8a\062\uff8a\001" +
    "\002\000\032\003\057\006\047\010\060\015\051\024\042" +
    "\025\uffb7\026\056\044\046\062\uffb7\063\055\064\063\065" +
    "\045\001\002\000\006\025\uffb6\062\uffb6\001\002\000\006" +
    "\025\134\062\133\001\002\000\026\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\044\046\063\055\064\063" +
    "\065\045\001\002\000\050\013\uffb8\014\uffb8\021\uffb8\023" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\045\uffb8\062\uffb8\001\002\000\006\025\uffb5\062\uffb5" +
    "\001\002\000\020\021\uffef\023\uffef\025\uffef\042\120\043" +
    "\121\045\uffef\062\uffef\001\002\000\052\012\uff90\013\uff90" +
    "\014\uff90\021\uff90\023\uff90\025\uff90\026\uff90\027\uff90\030" +
    "\uff90\031\uff90\032\uff90\035\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\045\uff90\062\uff90\001\002\000" +
    "\020\014\073\025\141\026\065\027\077\030\075\031\071" +
    "\032\067\001\002\000\050\013\uffe0\014\uffe0\021\uffe0\023" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\045\uffe0\062\uffe0\001\002\000\004\020\146\001\002" +
    "\000\006\012\ufff3\024\ufff3\001\002\000\044\003\164\004" +
    "\012\005\167\006\206\007\006\011\013\016\021\017\020" +
    "\021\176\046\160\047\175\050\200\051\152\052\171\055" +
    "\163\057\204\060\177\001\002\000\004\002\uff7d\001\002" +
    "\000\044\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\011" +
    "\uffc2\016\uffc2\017\uffc2\021\uffc2\046\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\055\uffc2\057\uffc2\060\uffc2\001\002\000" +
    "\004\045\343\001\002\000\050\003\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\011\uffd4\016\uffd4\017\uffd4\021\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\057\uffd4\060\uffd4\001\002\000\050\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\016\uffd2\017\uffd2" +
    "\021\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\004" +
    "\024\324\001\002\000\050\003\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\011\uffae\016\uffae\017\uffae\021\uffae\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\057\uffae\060\uffae\001\002\000\050\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\011\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\057\uffb3\060\uffb3\001\002\000\050\003" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\016\uffb2" +
    "\017\uffb2\021\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\001\002" +
    "\000\050\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\046\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060" +
    "\uffd1\001\002\000\050\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\011\uffaf\016\uffaf\017\uffaf\021\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\057\uffaf\060\uffaf\001\002\000\004\024\315\001\002\000" +
    "\006\012\313\045\314\001\002\000\044\003\272\004\012" +
    "\005\167\006\206\007\006\011\013\016\021\017\020\021" +
    "\176\046\160\047\175\050\200\051\152\052\171\055\163" +
    "\057\204\060\177\001\002\000\030\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\044\046\045\306\063\055" +
    "\064\063\065\045\001\002\000\006\021\176\045\273\001" +
    "\002\000\050\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\016\uffd0\017\uffd0\021\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0" +
    "\060\uffd0\001\002\000\050\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\016\uffd5\017\uffd5\021\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\057\uffd5\060\uffd5\001\002\000\004\045\304\001\002" +
    "\000\050\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\011" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\057\uffb1\060" +
    "\uffb1\001\002\000\004\024\257\001\002\000\050\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\016\uffb0\017" +
    "\uffb0\021\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\001\002\000" +
    "\050\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6" +
    "\001\002\000\052\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\016\uffc4\017\uffc4\021\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\057\uffc4\060\uffc4\001\002\000\004\046\246\001\002" +
    "\000\052\002\uffc1\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\011\uffc1\016\uffc1\017\uffc1\021\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057" +
    "\uffc1\060\uffc1\001\002\000\004\024\242\001\002\000\004" +
    "\024\236\001\002\000\050\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\011\uffd8\016\uffd8\017\uffd8\021\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\057\uffd8\060\uffd8\001\002\000\050\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\016\uffb4\017\uffb4\021" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\057\uffb4\060\uffb4\001\002\000\006\012" +
    "\232\045\233\001\002\000\004\024\223\001\002\000\050" +
    "\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016" +
    "\uffd3\017\uffd3\021\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\001" +
    "\002\000\010\012\210\024\uffb9\045\211\001\002\000\050" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\030\003\057\006\047\010\060\015\051\020\213" +
    "\024\042\026\056\044\046\063\055\064\063\065\045\001" +
    "\002\000\050\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf" +
    "\011\uffcf\016\uffcf\017\uffcf\021\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\001\002\000\004\045\222\001\002\000\026\003" +
    "\057\006\047\010\060\015\051\024\042\026\056\044\046" +
    "\063\055\064\063\065\045\001\002\000\006\021\uff8c\062" +
    "\uff8c\001\002\000\006\021\217\062\216\001\002\000\026" +
    "\003\057\006\047\010\060\015\051\024\042\026\056\044" +
    "\046\063\055\064\063\065\045\001\002\000\004\045\220" +
    "\001\002\000\050\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007" +
    "\uff8e\011\uff8e\016\uff8e\017\uff8e\021\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\057" +
    "\uff8e\060\uff8e\001\002\000\006\021\uff8d\062\uff8d\001\002" +
    "\000\050\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060" +
    "\uffcc\001\002\000\026\003\057\006\047\010\060\015\051" +
    "\024\042\026\056\044\046\063\055\064\063\065\045\001" +
    "\002\000\006\025\uff84\062\uff84\001\002\000\006\025\227" +
    "\062\226\001\002\000\026\003\057\006\047\010\060\015" +
    "\051\024\042\026\056\044\046\063\055\064\063\065\045" +
    "\001\002\000\004\045\230\001\002\000\050\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\011\uff85\016\uff85\017\uff85" +
    "\021\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\057\uff85\060\uff85\001\002\000\006" +
    "\025\uff83\062\uff83\001\002\000\026\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\044\046\063\055\064\063" +
    "\065\045\001\002\000\050\003\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\uffca\016\uffca\017\uffca\021\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\057\uffca\060\uffca\001\002\000\004\045\235\001\002" +
    "\000\052\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\057" +
    "\uffc9\060\uffc9\001\002\000\026\003\057\006\047\010\060" +
    "\015\051\024\042\026\056\044\046\063\055\064\063\065" +
    "\045\001\002\000\004\025\240\001\002\000\004\020\146" +
    "\001\002\000\050\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\011\uffa6\016\uffa6\017\uffa6\021\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057" +
    "\uffa6\060\uffa6\001\002\000\004\006\243\001\002\000\004" +
    "\025\244\001\002\000\004\045\245\001\002\000\050\003" +
    "\uff82\004\uff82\005\uff82\006\uff82\007\uff82\011\uff82\016\uff82" +
    "\017\uff82\021\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\055\uff82\057\uff82\060\uff82\001\002" +
    "\000\004\024\247\001\002\000\026\003\057\006\047\010" +
    "\060\015\051\024\042\026\056\044\046\063\055\064\063" +
    "\065\045\001\002\000\004\025\251\001\002\000\004\020" +
    "\146\001\002\000\050\003\uffa9\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\011\uffa9\016\uffa9\017\uffa9\021\uffa9\046\uffa9\047" +
    "\253\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\057\uffa9\060\uffa9\001\002\000\006\020\146\046\246\001" +
    "\002\000\050\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\011\uffaa\016\uffaa\017\uffaa\021\uffaa\046\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa" +
    "\060\uffaa\001\002\000\050\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\011\uffa8\016\uffa8\017\uffa8\021\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\057\uffa8\060\uffa8\001\002\000\050\003\uffa7\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\011\uffa7\016\uffa7\017\uffa7\021" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\057\uffa7\060\uffa7\001\002\000\026\003" +
    "\057\006\047\010\060\015\051\024\042\026\056\044\046" +
    "\063\055\064\063\065\045\001\002\000\004\025\261\001" +
    "\002\000\004\020\263\001\002\000\050\003\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\011\uff9b\016\uff9b\017\uff9b\021" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\057\uff9b\060\uff9b\001\002\000\004\053" +
    "\266\001\002\000\010\021\uff95\053\266\054\275\001\002" +
    "\000\010\021\uff99\053\uff99\054\uff99\001\002\000\014\010" +
    "\060\015\051\063\055\064\063\065\045\001\002\000\004" +
    "\056\270\001\002\000\042\003\272\004\012\005\167\006" +
    "\206\007\006\011\013\016\021\017\020\046\160\047\175" +
    "\050\200\051\152\052\171\055\163\057\204\060\177\001" +
    "\002\000\050\003\272\004\012\005\167\006\206\007\006" +
    "\011\013\016\021\017\020\021\uff97\046\160\047\175\050" +
    "\200\051\152\052\171\053\uff97\054\uff97\055\163\057\204" +
    "\060\177\001\002\000\004\045\273\001\002\000\050\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\016\uffcd" +
    "\017\uffcd\021\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\001\002" +
    "\000\050\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\001\002\000\004\056\302\001\002\000\004\021\uff96" +
    "\001\002\000\010\021\uff98\053\uff98\054\uff98\001\002\000" +
    "\004\021\301\001\002\000\050\003\uff9a\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\011\uff9a\016\uff9a\017\uff9a\021\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\057\uff9a\060\uff9a\001\002\000\042\003\272\004" +
    "\012\005\167\006\206\007\006\011\013\016\021\017\020" +
    "\046\160\047\175\050\200\051\152\052\171\055\163\057" +
    "\204\060\177\001\002\000\044\003\272\004\012\005\167" +
    "\006\206\007\006\011\013\016\021\017\020\021\uff94\046" +
    "\160\047\175\050\200\051\152\052\171\055\163\057\204" +
    "\060\177\001\002\000\050\003\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\011\uffa5\016\uffa5\017\uffa5\021\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\057\uffa5\060\uffa5\001\002\000\052\002\uffc3\003\uffc3" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\016\uffc3\017" +
    "\uffc3\021\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\001\002\000" +
    "\050\003\uff87\004\uff87\005\uff87\006\uff87\007\uff87\011\uff87" +
    "\016\uff87\017\uff87\021\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\055\uff87\057\uff87\060\uff87" +
    "\001\002\000\004\045\310\001\002\000\050\003\uff86\004" +
    "\uff86\005\uff86\006\uff86\007\uff86\011\uff86\016\uff86\017\uff86" +
    "\021\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053" +
    "\uff86\054\uff86\055\uff86\057\uff86\060\uff86\001\002\000\052" +
    "\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\016\uffc5\017\uffc5\021\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5\060" +
    "\uffc5\001\002\000\050\003\uff92\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\011\uff92\016\uff92\017\uff92\021\uff92\046\uff92\047" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\057\uff92\060\uff92\001\002\000\004\020\213\001\002\000" +
    "\050\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\011\uff93" +
    "\016\uff93\017\uff93\021\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\055\uff93\057\uff93\060\uff93" +
    "\001\002\000\026\003\057\006\047\010\060\015\051\024" +
    "\042\026\056\044\046\063\055\064\063\065\045\001\002" +
    "\000\004\025\317\001\002\000\004\020\146\001\002\000" +
    "\050\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\016\uffad\017\uffad\021\uffad\046\uffad\047\321\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad" +
    "\001\002\000\006\020\146\046\246\001\002\000\050\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\016\uffab" +
    "\017\uffab\021\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\001\002" +
    "\000\050\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011" +
    "\uffac\016\uffac\017\uffac\021\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\057\uffac\060" +
    "\uffac\001\002\000\042\003\057\004\012\006\047\007\006" +
    "\010\060\011\013\015\051\016\021\017\020\024\042\026" +
    "\056\044\046\045\uffa0\063\055\064\063\065\045\001\002" +
    "\000\004\025\341\001\002\000\004\045\uffa1\001\002\000" +
    "\004\006\143\001\002\000\004\045\uffa2\001\002\000\004" +
    "\012\232\001\002\000\004\045\333\001\002\000\030\003" +
    "\057\006\047\010\060\015\051\024\042\026\056\044\046" +
    "\045\uff9e\063\055\064\063\065\045\001\002\000\004\045" +
    "\uff9f\001\002\000\004\045\336\001\002\000\030\003\057" +
    "\006\047\010\060\015\051\024\042\025\uff9c\026\056\044" +
    "\046\063\055\064\063\065\045\001\002\000\004\025\uff9d" +
    "\001\002\000\004\025\uffa3\001\002\000\004\020\146\001" +
    "\002\000\050\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\011\uffa4\016\uffa4\017\uffa4\021\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\057\uffa4" +
    "\060\uffa4\001\002\000\050\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\057\uffce\060\uffce\001\002\000\014\004\uffc6\007\uffc6" +
    "\011\uffc6\016\uffc6\017\uffc6\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\022\002\003\003\007\010\013\012\016\013" +
    "\006\015\004\044\014\045\010\001\001\000\002\001\001" +
    "\000\006\014\343\061\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\007\010\013" +
    "\013\021\015\004\045\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\026\010\030\017\031\020\027\067" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\026\010\030\020\035\067\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\040\001" +
    "\001\000\024\011\042\032\043\033\060\035\063\036\053" +
    "\050\052\051\061\065\051\070\047\001\001\000\002\001" +
    "\001\000\016\011\042\033\137\035\063\036\053\065\051" +
    "\070\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\011\042\033\060\035\063\036\053" +
    "\050\135\051\061\065\051\070\047\001\001\000\006\064" +
    "\125\072\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\042\033\113" +
    "\035\063\036\053\065\051\070\047\001\001\000\016\011" +
    "\042\033\112\035\063\036\053\065\051\070\047\001\001" +
    "\000\016\011\042\033\111\035\063\036\053\065\051\070" +
    "\047\001\001\000\016\011\042\033\110\035\063\036\053" +
    "\065\051\070\047\001\001\000\016\011\042\033\107\035" +
    "\063\036\053\065\051\070\047\001\001\000\016\011\042" +
    "\033\106\035\063\036\053\065\051\070\047\001\001\000" +
    "\016\011\042\033\105\035\063\036\053\065\051\070\047" +
    "\001\001\000\016\011\042\033\104\035\063\036\053\065" +
    "\051\070\047\001\001\000\016\011\042\033\103\035\063" +
    "\036\053\065\051\070\047\001\001\000\016\011\042\033" +
    "\102\035\063\036\053\065\051\070\047\001\001\000\016" +
    "\011\042\033\101\035\063\036\053\065\051\070\047\001" +
    "\001\000\016\011\042\033\100\035\063\036\053\065\051" +
    "\070\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\042\033\060\035\063\036\053\050\122\051\061" +
    "\065\051\070\047\001\001\000\022\011\042\033\060\035" +
    "\063\036\053\050\121\051\061\065\051\070\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\042\032\130\033\060\035\063\036\053\050\052\051" +
    "\061\065\051\066\131\070\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\042\032\134\033\060\035" +
    "\063\036\053\050\052\051\061\065\051\070\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\144\061\143\001\001\000\002\001\001\000\054\003" +
    "\026\004\161\005\200\006\172\007\165\010\202\021\147" +
    "\022\201\023\153\025\154\026\167\027\171\030\156\031" +
    "\152\040\204\056\150\060\155\062\173\063\164\065\146" +
    "\067\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\311\001\001\000\052\003\026\005\273\006" +
    "\172\007\165\010\202\021\147\022\201\023\153\025\154" +
    "\026\167\027\171\030\156\031\152\040\204\056\150\060" +
    "\155\062\310\063\164\065\146\067\160\001\001\000\024" +
    "\011\042\032\306\033\060\035\063\036\053\050\052\051" +
    "\061\065\051\070\047\001\001\000\004\062\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\071\206\072\123\001\001\000\002" +
    "\001\001\000\024\011\042\032\211\033\060\035\063\036" +
    "\053\050\052\051\061\065\051\070\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\011\042\032\213\033" +
    "\060\035\063\036\053\041\214\050\052\051\061\065\051" +
    "\070\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\042\032\220\033\060\035\063\036\053\050\052" +
    "\051\061\065\051\070\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\042\032\223\033\060\035\063\036\053\050\052\051" +
    "\061\057\224\065\051\070\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\042\032\230\033\060\035" +
    "\063\036\053\050\052\051\061\065\051\070\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\042\032\233\033\060\035\063\036\053\050\052" +
    "\051\061\065\051\070\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\042\032\236" +
    "\033\060\035\063\036\053\050\052\051\061\065\051\070" +
    "\047\001\001\000\002\001\001\000\006\014\240\061\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\011\042\032\247\033\060\035\063\036\053\050" +
    "\052\051\061\065\051\070\047\001\001\000\002\001\001" +
    "\000\006\014\251\061\143\001\001\000\006\023\254\024" +
    "\253\001\001\000\006\014\255\061\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\011" +
    "\042\032\257\033\060\035\063\036\053\050\052\051\061" +
    "\065\051\070\047\001\001\000\002\001\001\000\004\046" +
    "\261\001\001\000\002\001\001\000\006\037\263\042\264" +
    "\001\001\000\010\042\276\043\275\047\277\001\001\000" +
    "\002\001\001\000\004\011\266\001\001\000\002\001\001" +
    "\000\052\003\026\004\270\005\200\006\172\007\165\010" +
    "\202\021\147\022\201\023\153\025\154\026\167\027\171" +
    "\030\156\031\152\040\204\056\150\060\155\063\164\065" +
    "\146\067\160\001\001\000\050\003\026\005\273\006\172" +
    "\007\165\010\202\021\147\022\201\023\153\025\154\026" +
    "\167\027\171\030\156\031\152\040\204\056\150\060\155" +
    "\063\164\065\146\067\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\026\004\302\005\200\006\172\007\165" +
    "\010\202\021\147\022\201\023\153\025\154\026\167\027" +
    "\171\030\156\031\152\040\204\056\150\060\155\063\164" +
    "\065\146\067\160\001\001\000\050\003\026\005\273\006" +
    "\172\007\165\010\202\021\147\022\201\023\153\025\154" +
    "\026\167\027\171\030\156\031\152\040\204\056\150\060" +
    "\155\063\164\065\146\067\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\042\032\315\033" +
    "\060\035\063\036\053\050\052\051\061\065\051\070\047" +
    "\001\001\000\002\001\001\000\006\014\317\061\143\001" +
    "\001\000\004\023\321\001\001\000\006\014\322\061\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\326\007\327\010\330\011\042\032\325\033\060\035\063" +
    "\036\053\050\052\051\061\052\324\053\331\065\051\070" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\042\032\333\033\060\035\063\036\053" +
    "\050\052\051\061\054\334\065\051\070\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\042\032\336" +
    "\033\060\035\063\036\053\050\052\051\061\055\337\065" +
    "\051\070\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\341\061\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    Lexer parser;
    SymbolTable symbolTable = new SymbolTable();
    CodeGenerator codeGenerator;
    String currentFunctionName = null; // Variable para rastrear la función actual
    int paramsQuantity = 0 ;
    String currentArrayType = null ;
    String currentCalledFunction = null;
    SymbolInfo nullSymbol = new SymbolInfo("null", "null", 0, 0);
    SymbolInfo<Integer> zero = new SymbolInfo<>("zero", "int", 10, 5) {{
        setValue(0);
    }};

    // Constructor del parser
    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser = parser;
        this.codeGenerator = new CodeGenerator();

        FunctionInfo globalFunction = new FunctionInfo("global", "void",0,0, new ArrayList<>());
        if (!symbolTable.pushFunction(globalFunction)) {
            System.err.println("Error: Función global ya está definida.");
        }
        globalFunction.beginScope();

        this.symbolFactory = new DefaultSymbolFactory();
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error sintactico, linea: " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error sintactico: " + message);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // Reportar el error fatal sin detener el programa
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error fatal sintactico " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error fatal de sintaxis: " + message);
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol info) {
        if (info.value != null) {
            System.err.println("Error no recuperable en la linea " + (info.left + 1) + ", columna " + (info.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) i;
    int value = Integer.parseInt(token.getValue());
    SymbolInfo symbol = new SymbolInfo("int", "int", token.getLine() + 1, token.getColumn() + 1);
    symbol.setValue(value);
    RESULT = symbol;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) s;
    String value = token.getValue(); // Usar el valor del token
    SymbolInfo<String> symbol = new SymbolInfo<>("string", "string", token.getLine() + 1, token.getColumn() + 1);
    symbol.setValue(value);
    RESULT = symbol;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) c;
    char value = token.getValue().charAt(0); // Obtener el primer carácter
    SymbolInfo<Character> symbol = new SymbolInfo<>("char", "char", token.getLine() + 1, token.getColumn() + 1);
    symbol.setValue(value);
    RESULT = symbol;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) b;
    boolean value = Boolean.parseBoolean(token.getValue()); // Convertir el valor a booleano
    SymbolInfo<Boolean> symbol = new SymbolInfo<>("boolean", "boolean", token.getLine() + 1, token.getColumn() + 1);
    symbol.setValue(value);
    RESULT = symbol;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) f;
    float value = Float.parseFloat(token.getValue()); // Convertir el valor a flotante
    SymbolInfo<Float> symbol = new SymbolInfo<>("float", "float", token.getLine() + 1, token.getColumn() + 1);
    symbol.setValue(value);
    RESULT = symbol;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Obtener el tipo
    String tipo = (String) t;

    // Cast correcto de 'id' a TokenInfo
    TokenInfo token = (TokenInfo) id;

    // Obtener el nombre, línea y columna
    String nombre = token.getValue();
    int linea = token.getLine() + 1;
    int columna = token.getColumn() + 1;

    // Imprimir la información de declaración
    //System.out.println("Declaración de variable '" + nombre + "' de tipo '" + tipo + "' en línea " + linea + ", columna " + columna);

    // Crear el SymbolInfo con la información de posición
    RESULT = new SymbolInfo(nombre, tipo, linea, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;
		int el1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int el1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object el1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int el2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int el2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       SymbolInfo op1 = (SymbolInfo) el1;
                       SymbolInfo op2 = (SymbolInfo) el2;
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                       FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                        ControlStructureOperations.checkOperandsType(op1, op2, currentTable); // en lugar de hacer esto, hay que comparar que ambos sean boolean


                        codeGenerator.createOperation("&&", op1, zero, "logical");
                        codeGenerator.createOperation("&&", op2, zero, "logical");


                        if (op1 != null) {
                           SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                           exp.setSingleObject(false);
                           RESULT = exp;
                        } else if (op1 == null && op2 != null) {
                            SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                            exp.setSingleObject(false);
                            RESULT = exp;
                        }
                        else {
                           RESULT = nullSymbol;
                        }
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       RESULT = ec;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("==", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("!=", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("<", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("<=", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation(">", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation(">=", op1, op2, "comparison");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("+", op1, op2, "arithmetic");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("-", op1, op2, "arithmetic");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("*", op1, op2, "arithmetic");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             codeGenerator.createOperation("/", op1, op2, "arithmetic");
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             if (op1 != null) {
                                SymbolInfo exp = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                                exp.setSingleObject(false);
                                RESULT = exp;
                             } else if (op1 == null && op2 != null) {
                                 SymbolInfo exp = new SymbolInfo(op2.getType(), op2.getType(), op2.getLine(), op2.getColumn());
                                 exp.setSingleObject(false);
                                 RESULT = exp;
                             }
                             else {
                                RESULT = nullSymbol;
                             }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = ea;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object uo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= llamada_funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_aritmetica ::= indice_array 
            {
              Object RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_aritmetica ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_aritmetica ::= error CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           TokenInfo token = (TokenInfo) id;
                           SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);

                           FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

                           Variable.checkExistance(variable, currentTable);

                           SymbolInfo variableDeTabla = currentTable.lookup(variable.getName());

                            if (variableDeTabla != null) {
                                variable.setType(variableDeTabla.getType());
                            }


                           if (variableDeTabla != null && !variableDeTabla.getDeclared()) {
                                System.err.println("Error semantico: variable no inicializada: " + variable.getName() + ", linea: " + variable.getLine() + " columna: " + variable.getColumn());
                           }

                           RESULT = variable;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= llamada_funcion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignar ::= IDENTIFIER EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TokenInfo token = (TokenInfo) id;
    SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
    SymbolInfo expressionResult = (SymbolInfo) e;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

    Variable.initializeVar(variable.getName(), currentTable);

    // Verificar compatibilidad de tipos
    Variable.checkType(variable, expressionResult, currentTable, symbolTable);

    if (expressionResult != null) {
        if (expressionResult.getSingleObject()) {
            codeGenerator.assignValueToIdentifier(variable.getName(), expressionResult);
        } else {
           codeGenerator.assignStmtValueToIdentifier(variable.getName());
        }
    }

    codeGenerator.cleanOperations();

    // Agreagar checkInitilized ACA !!!

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignar ::= IDENTIFIER asignarArray 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
       TokenInfo token = (TokenInfo) id;
       SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);

       FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
       Variable.initializeVar(variable.getName(), currentTable);

       Variable.checkExistance(variable, currentTable);

       SymbolInfo variableDeTabla = currentTable.lookup(variable.getName());

        if (variableDeTabla != null) {
            currentArrayType = variableDeTabla.getType();
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

    Variable.checkRepeated(info, currentTable);

    boolean inserted = currentTable.insert(info.getName(), info);
    codeGenerator.addToFunctionScope(info.getName(), info.getType()); // Revisar
    codeGenerator.cleanRegisters("");
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
    SymbolInfo expressionResult = (SymbolInfo) e;

    Variable.checkRepeated(info, currentTable);
    info.setDeclared(true); // Marcar la variable como declarada

    boolean inserted = currentTable.insert(info.getName(), info);

    Variable.checkType(info, expressionResult, currentTable, symbolTable);

    // System.out.println("--------++_+_+_-" + symbolTable.functionScopes);
    codeGenerator.addToFunctionScope(info.getName(), info.getType()); // Revisar

    if (expressionResult != null) {
        if (expressionResult.getSingleObject()) {
            codeGenerator.assignValueToIdentifier(info.getName(), expressionResult);
        } else {
           codeGenerator.assignStmtValueToIdentifier(info.getName());
        }
    }

    codeGenerator.cleanOperations();

    codeGenerator.cleanRegisters("");

    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

        if (!currentTable.retornoEncontrado) {
            System.err.println("Error semantico: no se encontró retorno de la función: " + currentTable.getName());
        }
        currentFunctionName = "global";
        codeGenerator.closeFunction();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= apertura_bloque sentencias cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= apertura_bloque cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque ::= apertura_bloque error cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // apertura_bloque ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentFunction = symbolTable.lookupFunction(currentFunctionName);
        if (currentFunction != null) {
            currentFunction.beginScope();
        } else {
            System.err.println("Error: No se puede abrir un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cierre_bloque ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
        if (currentTable != null) {
            currentTable.printScopes();
            currentTable.endScope();
        } else {
            System.err.println("Error: No se puede cerrar un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo funcSymbol = (SymbolInfo) i;
        String funcName = funcSymbol.getName();
        String returnType = funcSymbol.getType();
        System.out.println("\n Función: '" + funcName + "' con tipo de retorno '" + returnType + "'");
        List<SymbolInfo> paramList = (List<SymbolInfo>) e;
        for (SymbolInfo param : paramList) {
            System.out.println("Parámetro: nombre = " + param.getName() + ", tipo = " + param.getType());
            param.setDeclared(true);
        }
        FunctionInfo fInfo = new FunctionInfo(funcName, returnType, funcSymbol.getLine(), funcSymbol.getColumn(), paramList);

        // Insertar la función en la tabla de símbolos
        boolean inserted = symbolTable.pushFunction(fInfo);
        if (inserted) {
            System.out.println("encabezadoFuncion: Función '" + funcName + "' insertada correctamente en la tabla de símbolos.");
        } else {
            System.err.println("encabezadoFuncion: Error: Función '" + funcName + "' ya está definida.");
        }
        currentFunctionName = funcName;

        // Iniciar el primer scope de la función
        fInfo.beginScope();

        // Insertar los parámetros en el ámbito actual
        boolean paramsInserted = fInfo.insertParamList(paramList);
        if (paramsInserted) {
            System.out.println("encabezadoFuncion: Parámetros insertados correctamente en el ámbito de la función.");
        } else {
            System.err.println("encabezadoFuncion: Error al insertar parámetros en el ámbito de la función.");
        }

        codeGenerator.createFunction(funcName, paramList);

        RESULT = fInfo;  // Retorna el FunctionInfo creado

        // Imprimir todas las funciones después de la inserción
        symbolTable.printAllFunctions();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		
    System.out.println("Sin parámetros");
    RESULT = new ArrayList<SymbolInfo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = p;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametroAux ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = (List<SymbolInfo>) pl;
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametro ::= nombrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametro ::= nombrar_array 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

         TokenInfo token = (TokenInfo) id;
         String funcName = token.getValue();
         currentCalledFunction = funcName;
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamada_funcion ::= IDENTIFIER NT$0 OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        TokenInfo token = (TokenInfo) id;

        String funcName = token.getValue();
        currentCalledFunction = funcName;
        FunctionInfo function = symbolTable.lookupFunction(funcName);

        if (function != null) {

            SymbolInfo symbolFunc = new SymbolInfo(function.getName(), function.getType(), 0, 0);

            if (function.getParamCount() != paramsQuantity) {
                System.err.println("Error semantico, se le estan pasando una cantidad de parametros incorrecta a la funcion: " + function.getName() + ", cantidad de parametros esperada: "
                    + function.getParamCount() + " y se recibieron: " + paramsQuantity + ", en la linea: " + (token.getLine() + 1) + " y columna: " + (token.getColumn() + 1));
            }

            paramsQuantity = 0;

            RESULT = symbolFunc;

        } else {
            System.err.println("Error semantico, la funcion: " + funcName + " no existe, linea: " + (token.getLine() + 1) + " y columna: " + (token.getColumn() + 1));
            RESULT = null;
        }

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // argumentos ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                FunctionInfo currentScope  = symbolTable.lookupFunction(currentFunctionName);
                FunctionInfo function = symbolTable.lookupFunction(currentCalledFunction);
                if (function.getParamCount() > 0 && paramsQuantity < function.getParamCount()) {
                    SymbolInfo currentParam = function.getParams().get(paramsQuantity);
                    SymbolInfo currentArg = (SymbolInfo) e;
                    Function.checkParamsTypes(currentParam, currentArg, currentScope);
                } else {
                    System.out.println("ASKAKSKASKASKAKSAKSK" + function.getParamCount() + " " + paramsQuantity + " " + function.getName());
                }
                paramsQuantity++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // argumentos ::= argumentos COMMA expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                FunctionInfo currentScope  = symbolTable.lookupFunction(currentFunctionName);
                FunctionInfo function = symbolTable.lookupFunction(currentCalledFunction);
                if (function.getParamCount() > 0 && paramsQuantity < function.getParamCount()) {
                    SymbolInfo currentParam = function.getParams().get(paramsQuantity);
                    SymbolInfo currentArg = (SymbolInfo) e;
                    Function.checkParamsTypes(currentParam, currentArg, currentScope);
                } else {
                    System.out.println("ASKAKSKASKASKAKSAKSK" + function.getParamCount() + " " + paramsQuantity + " " + function.getName());
                }
                paramsQuantity++;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // else_if_list_opt ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_stmt ::= CASE literales COLON sentencias 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
         SymbolInfo literal = (SymbolInfo) l;
         if (literal != null) {
            if (!"int".equals(literal.getType())) {
                System.err.println("Error semantico, se está pasando algo que no es int al número de caso de un switch (" + literal.getType() + "), linea: " + literal.getLine() + " columna: " + literal.getColumn());
            } else {
                if (literal.getValue() instanceof Integer) {
                    int value = (int) literal.getValue();
                    if (value < 0) {
                        System.err.println("Error semantico, el número de caso debe ser positivo, se recibió: " + value + " linea: " + literal.getLine() + " columna: " + literal.getColumn());
                    }
                } else {
                    System.err.println("Error semantico, el valor del caso no es un entero válido. Línea: " + literal.getLine() + " columna: " + literal.getColumn());
                }
            }
         }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arreglo ::= nombrar_array SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arreglo ::= nombrar_array asignarArray 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                currentArrayType = null ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // nombrar_array ::= tipos IDENTIFIER array_size 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         TokenInfo token = (TokenInfo) id;
          String tipo = (String) t;
          currentArrayType = tipo ;
         SymbolInfo array = new SymbolInfo(token.getValue(), tipo, token.getLine() + 1, token.getColumn() + 1);
         SymbolInfo expression = (SymbolInfo) as;
         FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
         Variable.checkRepeated(array, currentTable);
         boolean inserted = currentTable.insert(array.getName(), array);
         Variable.checkArraySize(array, expression, currentTable, symbolTable);
         RESULT = as ;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar_array",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // array_size ::= OPEN_BRACKET expresion CLOSE_BRACKET 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // indice_array ::= IDENTIFIER array_size 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indice_array",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignarArray ::= EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignarArray",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listaValores ::= listaValores COMMA expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
       SymbolInfo expressionResult = (SymbolInfo) e;
         if (expressionResult != null) {
          if (expressionResult.getType() != null && currentArrayType != null) {
             if (!expressionResult.getType().equals(currentArrayType)) {
                 System.err.println("Error semantico, se le está pasando algo de tipo distinto un array, se esperaba: " + currentArrayType + " y se recibió: " + expressionResult.getType() + " en la linea: " + expressionResult.getLine() + " y columna: " + expressionResult.getColumn());
               }
          }
         }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listaValores ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         SymbolInfo expressionResult = (SymbolInfo) e;
         if (expressionResult != null) {
          if (expressionResult.getType() != null && currentArrayType != null) {
             if (!expressionResult.getType().equals(currentArrayType)) {
                 System.err.println("Error semantico, se le está pasando algo de tipo distinto un array, se esperaba: " + currentArrayType + " y se recibió: " + expressionResult.getType() + " en la linea: " + expressionResult.getLine() + " y columna: " + expressionResult.getColumn());
               }
          }
         }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        TokenInfo token = (TokenInfo) id;
                        SymbolInfo op = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
                        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                        ControlStructureOperations.checkUnaryOperandType(op, currentTable);
                        if (op != null) {
                            RESULT = new SymbolInfo(op.getType(), op.getType(), op.getLine(), op.getColumn());
                        } else {
                            RESULT = new SymbolInfo("null", "null", 0, 0);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        TokenInfo token = (TokenInfo) id;
                        SymbolInfo op = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
                        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                        ControlStructureOperations.checkUnaryOperandType(op, currentTable);
                        if (op != null) {
                            RESULT = new SymbolInfo(op.getType(), op.getType(), op.getLine(), op.getColumn());
                        } else {
                            RESULT = new SymbolInfo("null", "null", 0, 0);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // negacion ::= MINUS literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo literal = (SymbolInfo) l;
        ControlStructureOperations.checkNegationType(literal);
        RESULT = new SymbolInfo(literal.getType(), literal.getType(), literal.getLine(), literal.getColumn());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                SymbolInfo retorno = (SymbolInfo) e;
                FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                Function.checkReturnType(retorno, currentTable);
                currentTable.retornoEncontrado = true ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;
		 codeGenerator.addFinalCode(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // programa ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error relacionado a la ausencia o mal estructura de la funcion main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        currentFunctionName = "global";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
