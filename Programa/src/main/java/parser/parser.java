
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import tables.TokenInfo;
import semanticalAnalysis.Variable;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

  public final Class getSymbolContainer() {
    return sym.class;
  }

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
          unpackFromStrings(new String[] {
                  "\000\172\000\002\002\004\000\002\003\003\000\002\003" +
                          "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
                          "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
                          "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
                          "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
                          "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
                          "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
                          "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
                          "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
                          "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
                          "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
                          "\002\033\003\000\002\033\003\000\002\033\004\000\002" +
                          "\033\004\000\002\033\003\000\002\004\003\000\002\004" +
                          "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
                          "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
                          "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
                          "\063\006\000\002\006\004\000\002\007\006\000\002\012" +
                          "\003\000\002\012\004\000\002\013\004\000\002\014\005" +
                          "\000\002\014\004\000\002\014\005\000\002\061\003\000" +
                          "\002\062\003\000\002\015\004\000\002\016\004\000\002" +
                          "\016\005\000\002\017\003\000\002\017\005\000\002\020" +
                          "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
                          "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
                          "\002\021\003\000\002\022\007\000\002\022\011\000\002" +
                          "\022\010\000\002\023\011\000\002\024\002\000\002\024" +
                          "\003\000\002\024\004\000\002\025\007\000\002\031\004" +
                          "\000\002\027\007\000\002\052\007\000\002\053\003\000" +
                          "\002\053\003\000\002\053\002\000\002\054\003\000\002" +
                          "\054\002\000\002\055\003\000\002\055\002\000\002\026" +
                          "\007\000\002\046\006\000\002\037\003\000\002\037\004" +
                          "\000\002\042\006\000\002\047\003\000\002\047\002\000" +
                          "\002\043\005\000\002\040\006\000\002\040\012\000\002" +
                          "\064\005\000\002\064\005\000\002\041\005\000\002\041" +
                          "\003\000\002\035\003\000\002\035\004\000\002\035\004" +
                          "\000\002\036\004\000\002\030\004\000\002\030\005\000" +
                          "\002\056\007\000\002\057\003\000\002\057\005\000\002" +
                          "\060\007\000\002\002\003\000\002\002\003\000\002\044" +
                          "\004\000\002\044\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
          unpackFromStrings(new String[] {
                  "\000\331\000\016\003\015\004\012\007\006\011\013\016" +
                          "\021\017\020\001\002\000\004\002\333\001\002\000\004" +
                          "\020\042\001\002\000\006\006\000\061\000\001\002\000" +
                          "\014\004\uffcb\007\uffcb\011\uffcb\016\uffcb\017\uffcb\001\002" +
                          "\000\006\006\036\061\037\001\002\000\004\002\uff89\001" +
                          "\002\000\006\006\ufffd\061\ufffd\001\002\000\006\006\uffff" +
                          "\061\uffff\001\002\000\004\024\025\001\002\000\004\002" +
                          "\uff8b\001\002\000\004\002\uff8c\001\002\000\014\004\012" +
                          "\007\006\011\013\016\021\017\020\001\002\000\006\006" +
                          "\ufffe\061\ufffe\001\002\000\006\006\ufffc\061\ufffc\001\002" +
                          "\000\014\004\uffca\007\uffca\011\uffca\016\uffca\017\uffca\001" +
                          "\002\000\004\002\uff8a\001\002\000\004\020\uffc3\001\002" +
                          "\000\016\004\012\007\006\011\013\016\021\017\020\025" +
                          "\032\001\002\000\004\006\036\001\002\000\006\025\uffc0" +
                          "\062\uffc0\001\002\000\006\025\uffbe\062\uffbe\001\002\000" +
                          "\006\025\034\062\033\001\002\000\004\020\uffc2\001\002" +
                          "\000\014\004\012\007\006\011\013\016\021\017\020\001" +
                          "\002\000\004\020\uffc1\001\002\000\006\025\uffbf\062\uffbf" +
                          "\001\002\000\012\012\ufff3\024\ufff3\025\ufff3\062\ufff3\001" +
                          "\002\000\004\020\042\001\002\000\044\003\056\004\012" +
                          "\005\061\006\101\007\006\011\013\016\021\017\020\021" +
                          "\070\046\053\047\067\050\072\051\045\052\063\055\055" +
                          "\057\077\060\071\001\002\000\004\002\uff88\001\002\000" +
                          "\044\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5" +
                          "\016\uffc5\017\uffc5\021\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
                          "\uffc5\052\uffc5\055\uffc5\057\uffc5\060\uffc5\001\002\000\050" +
                          "\003\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\016" +
                          "\uffd5\017\uffd5\021\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
                          "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5\001" +
                          "\002\000\050\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
                          "\011\uffd3\016\uffd3\017\uffd3\021\uffd3\046\uffd3\047\uffd3\050" +
                          "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3" +
                          "\060\uffd3\001\002\000\004\024\314\001\002\000\050\003" +
                          "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\016\uffb7" +
                          "\017\uffb7\021\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052" +
                          "\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\060\uffb7\001\002" +
                          "\000\050\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
                          "\uffbc\016\uffbc\017\uffbc\021\uffbc\046\uffbc\047\uffbc\050\uffbc" +
                          "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\060" +
                          "\uffbc\001\002\000\050\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
                          "\007\uffbb\011\uffbb\016\uffbb\017\uffbb\021\uffbb\046\uffbb\047" +
                          "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
                          "\057\uffbb\060\uffbb\001\002\000\050\003\uffd2\004\uffd2\005" +
                          "\uffd2\006\uffd2\007\uffd2\011\uffd2\016\uffd2\017\uffd2\021\uffd2" +
                          "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
                          "\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\050\003\uffb8" +
                          "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\016\uffb8\017" +
                          "\uffb8\021\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
                          "\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\001\002\000" +
                          "\004\024\305\001\002\000\044\003\265\004\012\005\061" +
                          "\006\101\007\006\011\013\016\021\017\020\021\070\046" +
                          "\053\047\067\050\072\051\045\052\063\055\055\057\077" +
                          "\060\071\001\002\000\042\003\117\004\012\006\111\007" +
                          "\006\010\120\011\013\015\112\016\021\017\020\024\104" +
                          "\026\116\044\110\045\301\063\115\064\123\065\107\001" +
                          "\002\000\006\021\070\045\266\001\002\000\050\003\uffd1" +
                          "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\016\uffd1\017" +
                          "\uffd1\021\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
                          "\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\001\002\000" +
                          "\050\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
                          "\016\uffd6\017\uffd6\021\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
                          "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6" +
                          "\001\002\000\004\045\277\001\002\000\050\003\uffba\004" +
                          "\uffba\005\uffba\006\uffba\007\uffba\011\uffba\016\uffba\017\uffba" +
                          "\021\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
                          "\uffba\054\uffba\055\uffba\057\uffba\060\uffba\001\002\000\004" +
                          "\024\252\001\002\000\050\003\uffb9\004\uffb9\005\uffb9\006" +
                          "\uffb9\007\uffb9\011\uffb9\016\uffb9\017\uffb9\021\uffb9\046\uffb9" +
                          "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
                          "\uffb9\057\uffb9\060\uffb9\001\002\000\050\003\uffd7\004\uffd7" +
                          "\005\uffd7\006\uffd7\007\uffd7\011\uffd7\016\uffd7\017\uffd7\021" +
                          "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
                          "\054\uffd7\055\uffd7\057\uffd7\060\uffd7\001\002\000\114\002" +
                          "\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7" +
                          "\013\uffc7\014\uffc7\016\uffc7\017\uffc7\021\uffc7\025\uffc7\026" +
                          "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\035\uffc7\036\uffc7" +
                          "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046" +
                          "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7" +
                          "\055\uffc7\057\uffc7\060\uffc7\062\uffc7\001\002\000\004\046" +
                          "\241\001\002\000\114\002\uffc4\003\uffc4\004\uffc4\005\uffc4" +
                          "\006\uffc4\007\uffc4\011\uffc4\013\uffc4\014\uffc4\016\uffc4\017" +
                          "\uffc4\021\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
                          "\032\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
                          "\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4" +
                          "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\060\uffc4\062" +
                          "\uffc4\001\002\000\004\024\235\001\002\000\004\024\231" +
                          "\001\002\000\050\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
                          "\uffd9\011\uffd9\016\uffd9\017\uffd9\021\uffd9\046\uffd9\047\uffd9" +
                          "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\057" +
                          "\uffd9\060\uffd9\001\002\000\050\003\uffbd\004\uffbd\005\uffbd" +
                          "\006\uffbd\007\uffbd\011\uffbd\016\uffbd\017\uffbd\021\uffbd\046" +
                          "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
                          "\055\uffbd\057\uffbd\060\uffbd\001\002\000\006\012\225\045" +
                          "\226\001\002\000\004\006\205\001\002\000\004\024\176" +
                          "\001\002\000\050\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
                          "\uffd4\011\uffd4\016\uffd4\017\uffd4\021\uffd4\046\uffd4\047\uffd4" +
                          "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057" +
                          "\uffd4\060\uffd4\001\002\000\006\012\102\045\103\001\002" +
                          "\000\040\003\117\004\012\006\111\007\006\010\120\011" +
                          "\013\015\112\016\021\017\020\024\104\026\116\044\110" +
                          "\063\115\064\123\065\107\001\002\000\050\003\uffd0\004" +
                          "\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0\017\uffd0" +
                          "\021\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
                          "\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002\000\036" +
                          "\003\117\004\012\006\111\007\006\010\120\011\013\015" +
                          "\112\016\021\017\020\024\104\026\116\063\115\064\123" +
                          "\065\107\001\002\000\044\013\uffdf\014\uffdf\025\uffdf\026" +
                          "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035\uffdf\036\uffdf" +
                          "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf\062" +
                          "\uffdf\001\002\000\004\045\173\001\002\000\046\013\ufff8" +
                          "\014\ufff8\021\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
                          "\ufff8\032\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
                          "\042\ufff8\043\ufff8\045\ufff8\062\ufff8\001\002\000\040\003" +
                          "\117\004\012\006\111\007\006\010\120\011\013\015\112" +
                          "\016\021\017\020\024\104\026\116\044\110\063\115\064" +
                          "\123\065\107\001\002\000\050\013\uffda\014\uffda\025\uffda" +
                          "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\171\034" +
                          "\170\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
                          "\043\uffda\045\uffda\062\uffda\001\002\000\046\013\ufffa\014" +
                          "\ufffa\021\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
                          "\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
                          "\ufffa\043\ufffa\045\ufffa\062\ufffa\001\002\000\014\025\ufff2" +
                          "\042\164\043\165\045\ufff2\062\ufff2\001\002\000\044\013" +
                          "\uff96\014\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96" +
                          "\032\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
                          "\uff96\043\uff96\045\uff96\062\uff96\001\002\000\046\013\ufff9" +
                          "\014\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
                          "\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
                          "\042\ufff9\043\ufff9\045\ufff9\062\ufff9\001\002\000\010\010" +
                          "\160\063\161\064\163\001\002\000\006\025\157\045\156" +
                          "\001\002\000\046\013\ufffb\014\ufffb\021\ufffb\025\ufffb\026" +
                          "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\035\ufffb\036\ufffb" +
                          "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\062" +
                          "\ufffb\001\002\000\044\013\127\014\134\025\uffe7\026\126" +
                          "\027\140\030\136\031\132\032\130\035\133\036\141\037" +
                          "\135\040\137\041\131\042\uffe7\043\uffe7\045\uffe7\062\uffe7" +
                          "\001\002\000\014\025\uffee\042\uffee\043\uffee\045\uffee\062" +
                          "\uffee\001\002\000\046\013\ufff7\014\ufff7\021\ufff7\025\ufff7" +
                          "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\035\ufff7\036" +
                          "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7" +
                          "\062\ufff7\001\002\000\044\013\uffdd\014\uffdd\025\uffdd\026" +
                          "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd" +
                          "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\062" +
                          "\uffdd\001\002\000\044\013\uffde\014\uffde\025\uffde\026\uffde" +
                          "\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037" +
                          "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\062\uffde" +
                          "\001\002\000\036\003\117\004\012\006\111\007\006\010" +
                          "\120\011\013\015\112\016\021\017\020\024\104\026\116" +
                          "\063\115\064\123\065\107\001\002\000\036\003\117\004" +
                          "\012\006\111\007\006\010\120\011\013\015\112\016\021" +
                          "\017\020\024\104\026\116\063\115\064\123\065\107\001" +
                          "\002\000\036\003\117\004\012\006\111\007\006\010\120" +
                          "\011\013\015\112\016\021\017\020\024\104\026\116\063" +
                          "\115\064\123\065\107\001\002\000\036\003\117\004\012" +
                          "\006\111\007\006\010\120\011\013\015\112\016\021\017" +
                          "\020\024\104\026\116\063\115\064\123\065\107\001\002" +
                          "\000\036\003\117\004\012\006\111\007\006\010\120\011" +
                          "\013\015\112\016\021\017\020\024\104\026\116\063\115" +
                          "\064\123\065\107\001\002\000\036\003\117\004\012\006" +
                          "\111\007\006\010\120\011\013\015\112\016\021\017\020" +
                          "\024\104\026\116\063\115\064\123\065\107\001\002\000" +
                          "\036\003\117\004\012\006\111\007\006\010\120\011\013" +
                          "\015\112\016\021\017\020\024\104\026\116\063\115\064" +
                          "\123\065\107\001\002\000\036\003\117\004\012\006\111" +
                          "\007\006\010\120\011\013\015\112\016\021\017\020\024" +
                          "\104\026\116\063\115\064\123\065\107\001\002\000\036" +
                          "\003\117\004\012\006\111\007\006\010\120\011\013\015" +
                          "\112\016\021\017\020\024\104\026\116\063\115\064\123" +
                          "\065\107\001\002\000\036\003\117\004\012\006\111\007" +
                          "\006\010\120\011\013\015\112\016\021\017\020\024\104" +
                          "\026\116\063\115\064\123\065\107\001\002\000\036\003" +
                          "\117\004\012\006\111\007\006\010\120\011\013\015\112" +
                          "\016\021\017\020\024\104\026\116\063\115\064\123\065" +
                          "\107\001\002\000\036\003\117\004\012\006\111\007\006" +
                          "\010\120\011\013\015\112\016\021\017\020\024\104\026" +
                          "\116\063\115\064\123\065\107\001\002\000\030\014\134" +
                          "\025\uffeb\026\126\027\140\030\136\031\132\032\130\042" +
                          "\uffeb\043\uffeb\045\uffeb\062\uffeb\001\002\000\044\013\uffe4" +
                          "\014\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
                          "\130\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
                          "\043\uffe4\045\uffe4\062\uffe4\001\002\000\030\014\134\025" +
                          "\uffe9\026\126\027\140\030\136\031\132\032\130\042\uffe9" +
                          "\043\uffe9\045\uffe9\062\uffe9\001\002\000\044\013\uffe3\014" +
                          "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\130" +
                          "\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
                          "\uffe3\045\uffe3\062\uffe3\001\002\000\030\014\134\025\uffea" +
                          "\026\126\027\140\030\136\031\132\032\130\042\uffea\043" +
                          "\uffea\045\uffea\062\uffea\001\002\000\044\013\uffe6\014\uffe6" +
                          "\025\uffe6\026\uffe6\027\140\030\136\031\132\032\130\035" +
                          "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
                          "\045\uffe6\062\uffe6\001\002\000\030\014\134\025\uffec\026" +
                          "\126\027\140\030\136\031\132\032\130\042\uffec\043\uffec" +
                          "\045\uffec\062\uffec\001\002\000\044\013\uffe2\014\uffe2\025" +
                          "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\130\035\uffe2" +
                          "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045" +
                          "\uffe2\062\uffe2\001\002\000\030\014\134\025\uffe8\026\126" +
                          "\027\140\030\136\031\132\032\130\042\uffe8\043\uffe8\045" +
                          "\uffe8\062\uffe8\001\002\000\044\013\uffe1\014\uffe1\025\uffe1" +
                          "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\036" +
                          "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1" +
                          "\062\uffe1\001\002\000\030\014\134\025\uffed\026\126\027" +
                          "\140\030\136\031\132\032\130\042\uffed\043\uffed\045\uffed" +
                          "\062\uffed\001\002\000\044\013\uffe5\014\uffe5\025\uffe5\026" +
                          "\uffe5\027\140\030\136\031\132\032\130\035\uffe5\036\uffe5" +
                          "\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\045\uffe5\062" +
                          "\uffe5\001\002\000\044\013\uffdc\014\uffdc\025\uffdc\026\uffdc" +
                          "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\037" +
                          "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\062\uffdc" +
                          "\001\002\000\044\013\uffdb\014\uffdb\025\uffdb\026\uffdb\027" +
                          "\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb" +
                          "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\062\uffdb\001" +
                          "\002\000\046\013\ufff6\014\ufff6\025\ufff6\026\ufff6\027\ufff6" +
                          "\030\ufff6\031\ufff6\032\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
                          "\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6\056\ufff6\062\ufff6" +
                          "\001\002\000\046\013\ufff4\014\ufff4\025\ufff4\026\ufff4\027" +
                          "\ufff4\030\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4\037\ufff4" +
                          "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\045\ufff4\056\ufff4\062" +
                          "\ufff4\001\002\000\044\013\uff93\014\uff93\025\uff93\026\uff93" +
                          "\027\uff93\030\uff93\031\uff93\032\uff93\035\uff93\036\uff93\037" +
                          "\uff93\040\uff93\041\uff93\042\uff93\043\uff93\045\uff93\062\uff93" +
                          "\001\002\000\046\013\ufff5\014\ufff5\025\ufff5\026\ufff5\027" +
                          "\ufff5\030\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5\037\ufff5" +
                          "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\056\ufff5\062" +
                          "\ufff5\001\002\000\040\003\117\004\012\006\111\007\006" +
                          "\010\120\011\013\015\112\016\021\017\020\024\104\026" +
                          "\116\044\110\063\115\064\123\065\107\001\002\000\040" +
                          "\003\117\004\012\006\111\007\006\010\120\011\013\015" +
                          "\112\016\021\017\020\024\104\026\116\044\110\063\115" +
                          "\064\123\065\107\001\002\000\014\025\ufff0\042\ufff0\043" +
                          "\ufff0\045\ufff0\062\ufff0\001\002\000\014\025\ufff1\042\ufff1" +
                          "\043\ufff1\045\ufff1\062\ufff1\001\002\000\044\013\uff94\014" +
                          "\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94" +
                          "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
                          "\uff94\045\uff94\062\uff94\001\002\000\044\013\uff95\014\uff95" +
                          "\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\032\uff95\035" +
                          "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
                          "\045\uff95\062\uff95\001\002\000\014\025\uffef\042\164\043" +
                          "\165\045\uffef\062\uffef\001\002\000\050\003\uffce\004\uffce" +
                          "\005\uffce\006\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021" +
                          "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
                          "\054\uffce\055\uffce\057\uffce\060\uffce\001\002\000\020\014" +
                          "\134\025\175\026\126\027\140\030\136\031\132\032\130" +
                          "\001\002\000\044\013\uffe0\014\uffe0\025\uffe0\026\uffe0\027" +
                          "\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0" +
                          "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\045\uffe0\062\uffe0\001" +
                          "\002\000\040\003\117\004\012\006\111\007\006\010\120" +
                          "\011\013\015\112\016\021\017\020\024\104\026\116\044" +
                          "\110\063\115\064\123\065\107\001\002\000\006\025\uff8f" +
                          "\062\uff8f\001\002\000\006\025\202\062\201\001\002\000" +
                          "\040\003\117\004\012\006\111\007\006\010\120\011\013" +
                          "\015\112\016\021\017\020\024\104\026\116\044\110\063" +
                          "\115\064\123\065\107\001\002\000\004\045\203\001\002" +
                          "\000\050\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\011" +
                          "\uff90\016\uff90\017\uff90\021\uff90\046\uff90\047\uff90\050\uff90" +
                          "\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\057\uff90\060" +
                          "\uff90\001\002\000\006\025\uff8e\062\uff8e\001\002\000\010" +
                          "\012\ufff3\022\206\045\ufff3\001\002\000\006\006\222\010" +
                          "\221\001\002\000\006\012\210\045\211\001\002\000\004" +
                          "\020\212\001\002\000\050\003\uff9c\004\uff9c\005\uff9c\006" +
                          "\uff9c\007\uff9c\011\uff9c\016\uff9c\017\uff9c\021\uff9c\046\uff9c" +
                          "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
                          "\uff9c\057\uff9c\060\uff9c\001\002\000\014\010\120\015\112" +
                          "\063\115\064\123\065\107\001\002\000\006\021\216\062" +
                          "\215\001\002\000\006\021\uff97\062\uff97\001\002\000\014" +
                          "\010\120\015\112\063\115\064\123\065\107\001\002\000" +
                          "\004\045\217\001\002\000\050\003\uff9b\004\uff9b\005\uff9b" +
                          "\006\uff9b\007\uff9b\011\uff9b\016\uff9b\017\uff9b\021\uff9b\046" +
                          "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
                          "\055\uff9b\057\uff9b\060\uff9b\001\002\000\006\021\uff98\062" +
                          "\uff98\001\002\000\004\023\224\001\002\000\004\023\223" +
                          "\001\002\000\006\012\uff99\045\uff99\001\002\000\006\012" +
                          "\uff9a\045\uff9a\001\002\000\040\003\117\004\012\006\111" +
                          "\007\006\010\120\011\013\015\112\016\021\017\020\024" +
                          "\104\026\116\044\110\063\115\064\123\065\107\001\002" +
                          "\000\050\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011" +
                          "\uffcd\016\uffcd\017\uffcd\021\uffcd\046\uffcd\047\uffcd\050\uffcd" +
                          "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060" +
                          "\uffcd\001\002\000\004\045\230\001\002\000\052\003\uffcc" +
                          "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\016\uffcc\017" +
                          "\uffcc\021\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc" +
                          "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060\uffcc\001" +
                          "\002\000\040\003\117\004\012\006\111\007\006\010\120" +
                          "\011\013\015\112\016\021\017\020\024\104\026\116\044" +
                          "\110\063\115\064\123\065\107\001\002\000\004\025\233" +
                          "\001\002\000\004\020\042\001\002\000\050\003\uffaf\004" +
                          "\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\016\uffaf\017\uffaf" +
                          "\021\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
                          "\uffaf\054\uffaf\055\uffaf\057\uffaf\060\uffaf\001\002\000\004" +
                          "\006\236\001\002\000\004\025\237\001\002\000\004\045" +
                          "\240\001\002\000\050\003\uff8d\004\uff8d\005\uff8d\006\uff8d" +
                          "\007\uff8d\011\uff8d\016\uff8d\017\uff8d\021\uff8d\046\uff8d\047" +
                          "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
                          "\057\uff8d\060\uff8d\001\002\000\004\024\242\001\002\000" +
                          "\040\003\117\004\012\006\111\007\006\010\120\011\013" +
                          "\015\112\016\021\017\020\024\104\026\116\044\110\063" +
                          "\115\064\123\065\107\001\002\000\004\025\244\001\002" +
                          "\000\004\020\042\001\002\000\050\003\uffb2\004\uffb2\005" +
                          "\uffb2\006\uffb2\007\uffb2\011\uffb2\016\uffb2\017\uffb2\021\uffb2" +
                          "\046\uffb2\047\246\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
                          "\uffb2\055\uffb2\057\uffb2\060\uffb2\001\002\000\006\020\042" +
                          "\046\241\001\002\000\050\003\uffb3\004\uffb3\005\uffb3\006" +
                          "\uffb3\007\uffb3\011\uffb3\016\uffb3\017\uffb3\021\uffb3\046\uffb3" +
                          "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
                          "\uffb3\057\uffb3\060\uffb3\001\002\000\050\003\uffb1\004\uffb1" +
                          "\005\uffb1\006\uffb1\007\uffb1\011\uffb1\016\uffb1\017\uffb1\021" +
                          "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
                          "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\001\002\000\050\003" +
                          "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\016\uffb0" +
                          "\017\uffb0\021\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
                          "\uffb0\053\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\001\002" +
                          "\000\040\003\117\004\012\006\111\007\006\010\120\011" +
                          "\013\015\112\016\021\017\020\024\104\026\116\044\110" +
                          "\063\115\064\123\065\107\001\002\000\004\025\254\001" +
                          "\002\000\004\020\256\001\002\000\050\003\uffa4\004\uffa4" +
                          "\005\uffa4\006\uffa4\007\uffa4\011\uffa4\016\uffa4\017\uffa4\021" +
                          "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
                          "\054\uffa4\055\uffa4\057\uffa4\060\uffa4\001\002\000\004\053" +
                          "\261\001\002\000\010\021\uffa2\053\uffa2\054\uffa2\001\002" +
                          "\000\010\021\uff9e\053\261\054\270\001\002\000\010\010" +
                          "\160\063\161\064\163\001\002\000\004\056\263\001\002" +
                          "\000\042\003\265\004\012\005\061\006\101\007\006\011" +
                          "\013\016\021\017\020\046\053\047\067\050\072\051\045" +
                          "\052\063\055\055\057\077\060\071\001\002\000\050\003" +
                          "\265\004\012\005\061\006\101\007\006\011\013\016\021" +
                          "\017\020\021\uffa0\046\053\047\067\050\072\051\045\052" +
                          "\063\053\uffa0\054\uffa0\055\055\057\077\060\071\001\002" +
                          "\000\004\045\266\001\002\000\050\003\uffcf\004\uffcf\005" +
                          "\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf\017\uffcf\021\uffcf" +
                          "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
                          "\uffcf\055\uffcf\057\uffcf\060\uffcf\001\002\000\050\003\uffd8" +
                          "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\016\uffd8\017" +
                          "\uffd8\021\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8" +
                          "\053\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000" +
                          "\004\056\275\001\002\000\004\021\uff9f\001\002\000\010" +
                          "\021\uffa1\053\uffa1\054\uffa1\001\002\000\004\021\274\001" +
                          "\002\000\050\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
                          "\011\uffa3\016\uffa3\017\uffa3\021\uffa3\046\uffa3\047\uffa3\050" +
                          "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3" +
                          "\060\uffa3\001\002\000\042\003\265\004\012\005\061\006" +
                          "\101\007\006\011\013\016\021\017\020\046\053\047\067" +
                          "\050\072\051\045\052\063\055\055\057\077\060\071\001" +
                          "\002\000\044\003\265\004\012\005\061\006\101\007\006" +
                          "\011\013\016\021\017\020\021\uff9d\046\053\047\067\050" +
                          "\072\051\045\052\063\055\055\057\077\060\071\001\002" +
                          "\000\050\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\011" +
                          "\uffae\016\uffae\017\uffae\021\uffae\046\uffae\047\uffae\050\uffae" +
                          "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae\060" +
                          "\uffae\001\002\000\114\002\uffc6\003\uffc6\004\uffc6\005\uffc6" +
                          "\006\uffc6\007\uffc6\011\uffc6\013\uffc6\014\uffc6\016\uffc6\017" +
                          "\uffc6\021\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
                          "\032\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
                          "\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
                          "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\062" +
                          "\uffc6\001\002\000\050\003\uff92\004\uff92\005\uff92\006\uff92" +
                          "\007\uff92\011\uff92\016\uff92\017\uff92\021\uff92\046\uff92\047" +
                          "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
                          "\057\uff92\060\uff92\001\002\000\004\045\303\001\002\000" +
                          "\050\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\011\uff91" +
                          "\016\uff91\017\uff91\021\uff91\046\uff91\047\uff91\050\uff91\051" +
                          "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\057\uff91\060\uff91" +
                          "\001\002\000\114\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006" +
                          "\uffc8\007\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8" +
                          "\021\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
                          "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
                          "\043\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
                          "\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\060\uffc8\062\uffc8" +
                          "\001\002\000\040\003\117\004\012\006\111\007\006\010" +
                          "\120\011\013\015\112\016\021\017\020\024\104\026\116" +
                          "\044\110\063\115\064\123\065\107\001\002\000\004\025" +
                          "\307\001\002\000\004\020\042\001\002\000\050\003\uffb6" +
                          "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\016\uffb6\017" +
                          "\uffb6\021\uffb6\046\uffb6\047\311\050\uffb6\051\uffb6\052\uffb6" +
                          "\053\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\001\002\000" +
                          "\006\020\042\046\241\001\002\000\050\003\uffb4\004\uffb4" +
                          "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\016\uffb4\017\uffb4\021" +
                          "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
                          "\054\uffb4\055\uffb4\057\uffb4\060\uffb4\001\002\000\050\003" +
                          "\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\016\uffb5" +
                          "\017\uffb5\021\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052" +
                          "\uffb5\053\uffb5\054\uffb5\055\uffb5\057\uffb5\060\uffb5\001\002" +
                          "\000\042\003\117\004\012\006\111\007\006\010\120\011" +
                          "\013\015\112\016\021\017\020\024\104\026\116\044\110" +
                          "\045\uffa9\063\115\064\123\065\107\001\002\000\004\025" +
                          "\330\001\002\000\004\045\uffaa\001\002\000\004\045\uffab" +
                          "\001\002\000\006\012\225\024\025\001\002\000\004\045" +
                          "\322\001\002\000\042\003\117\004\012\006\111\007\006" +
                          "\010\120\011\013\015\112\016\021\017\020\024\104\026" +
                          "\116\044\110\045\uffa7\063\115\064\123\065\107\001\002" +
                          "\000\004\045\uffa8\001\002\000\004\045\325\001\002\000" +
                          "\042\003\117\004\012\006\111\007\006\010\120\011\013" +
                          "\015\112\016\021\017\020\024\104\025\uffa5\026\116\044" +
                          "\110\063\115\064\123\065\107\001\002\000\004\025\uffa6" +
                          "\001\002\000\004\025\uffac\001\002\000\004\020\042\001" +
                          "\002\000\050\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
                          "\011\uffad\016\uffad\017\uffad\021\uffad\046\uffad\047\uffad\050" +
                          "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad" +
                          "\060\uffad\001\002\000\056\004\uffc9\007\uffc9\011\uffc9\013" +
                          "\uffc9\014\uffc9\016\uffc9\017\uffc9\025\uffc9\026\uffc9\027\uffc9" +
                          "\030\uffc9\031\uffc9\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
                          "\uffc9\041\uffc9\042\uffc9\043\uffc9\045\uffc9\062\uffc9\001\002" +
                          "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
          unpackFromStrings(new String[] {
                  "\000\331\000\022\002\003\003\007\010\013\012\016\013" +
                          "\006\015\004\044\015\045\010\001\001\000\002\001\001" +
                          "\000\006\014\331\061\037\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\016\023\001\001\000" +
                          "\002\001\001\000\002\001\001\000\014\003\007\010\013" +
                          "\013\021\015\004\045\022\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\012\003\025\010\027\017\030\020\026\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\010\003\025\010" +
                          "\027\020\034\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\006\014\040\061\037\001\001\000" +
                          "\050\003\075\004\053\005\072\006\064\007\057\010\074" +
                          "\021\042\022\073\023\046\025\047\026\061\027\063\030" +
                          "\051\031\045\040\077\056\043\060\050\062\065\063\056" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\046\003\075\005\266" +
                          "\006\064\007\057\010\074\021\042\022\073\023\046\025" +
                          "\047\026\061\027\063\030\051\031\045\040\077\056\043" +
                          "\060\050\062\303\063\056\001\001\000\030\003\025\010" +
                          "\013\011\104\013\123\015\004\032\301\033\120\035\124" +
                          "\036\113\050\112\051\121\001\001\000\004\062\277\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\030\003\025\010\013\011\104\013\123\015\004\032\105" +
                          "\033\120\035\124\036\113\050\112\051\121\001\001\000" +
                          "\002\001\001\000\022\003\025\010\013\011\104\013\123" +
                          "\015\004\033\173\035\124\036\113\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\026\003\025" +
                          "\010\013\011\104\013\123\015\004\033\120\035\124\036" +
                          "\113\050\171\051\121\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\004\034\161\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\022\003\025" +
                          "\010\013\011\104\013\123\015\004\033\154\035\124\036" +
                          "\113\001\001\000\022\003\025\010\013\011\104\013\123" +
                          "\015\004\033\153\035\124\036\113\001\001\000\022\003" +
                          "\025\010\013\011\104\013\123\015\004\033\152\035\124" +
                          "\036\113\001\001\000\022\003\025\010\013\011\104\013" +
                          "\123\015\004\033\151\035\124\036\113\001\001\000\022" +
                          "\003\025\010\013\011\104\013\123\015\004\033\150\035" +
                          "\124\036\113\001\001\000\022\003\025\010\013\011\104" +
                          "\013\123\015\004\033\147\035\124\036\113\001\001\000" +
                          "\022\003\025\010\013\011\104\013\123\015\004\033\146" +
                          "\035\124\036\113\001\001\000\022\003\025\010\013\011" +
                          "\104\013\123\015\004\033\145\035\124\036\113\001\001" +
                          "\000\022\003\025\010\013\011\104\013\123\015\004\033" +
                          "\144\035\124\036\113\001\001\000\022\003\025\010\013" +
                          "\011\104\013\123\015\004\033\143\035\124\036\113\001" +
                          "\001\000\022\003\025\010\013\011\104\013\123\015\004" +
                          "\033\142\035\124\036\113\001\001\000\022\003\025\010" +
                          "\013\011\104\013\123\015\004\033\141\035\124\036\113" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\026\003\025" +
                          "\010\013\011\104\013\123\015\004\033\120\035\124\036" +
                          "\113\050\166\051\121\001\001\000\026\003\025\010\013" +
                          "\011\104\013\123\015\004\033\120\035\124\036\113\050" +
                          "\165\051\121\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
                          "\003\025\010\013\011\104\013\123\015\004\032\176\033" +
                          "\120\035\124\036\113\050\112\051\121\057\177\001\001" +
                          "\000\002\001\001\000\002\001\001\000\030\003\025\010" +
                          "\013\011\104\013\123\015\004\032\203\033\120\035\124" +
                          "\036\113\050\112\051\121\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\004\064\206\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\006\011\213\041\212\001\001\000\002" +
                          "\001\001\000\002\001\001\000\004\011\217\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\030\003\025\010\013\011\104\013\123\015\004" +
                          "\032\226\033\120\035\124\036\113\050\112\051\121\001" +
                          "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                          "\000\030\003\025\010\013\011\104\013\123\015\004\032" +
                          "\231\033\120\035\124\036\113\050\112\051\121\001\001" +
                          "\000\002\001\001\000\006\014\233\061\037\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
                          "\025\010\013\011\104\013\123\015\004\032\242\033\120" +
                          "\035\124\036\113\050\112\051\121\001\001\000\002\001" +
                          "\001\000\006\014\244\061\037\001\001\000\006\023\247" +
                          "\024\246\001\001\000\006\014\250\061\037\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
                          "\003\025\010\013\011\104\013\123\015\004\032\252\033" +
                          "\120\035\124\036\113\050\112\051\121\001\001\000\002" +
                          "\001\001\000\004\046\254\001\001\000\002\001\001\000" +
                          "\006\037\257\042\256\001\001\000\002\001\001\000\010" +
                          "\042\271\043\270\047\272\001\001\000\004\034\261\001" +
                          "\001\000\002\001\001\000\046\003\075\004\263\005\072" +
                          "\006\064\007\057\010\074\021\042\022\073\023\046\025" +
                          "\047\026\061\027\063\030\051\031\045\040\077\056\043" +
                          "\060\050\063\056\001\001\000\044\003\075\005\266\006" +
                          "\064\007\057\010\074\021\042\022\073\023\046\025\047" +
                          "\026\061\027\063\030\051\031\045\040\077\056\043\060" +
                          "\050\063\056\001\001\000\002\001\001\000\002\001\001" +
                          "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
                          "\003\075\004\275\005\072\006\064\007\057\010\074\021" +
                          "\042\022\073\023\046\025\047\026\061\027\063\030\051" +
                          "\031\045\040\077\056\043\060\050\063\056\001\001\000" +
                          "\044\003\075\005\266\006\064\007\057\010\074\021\042" +
                          "\022\073\023\046\025\047\026\061\027\063\030\051\031" +
                          "\045\040\077\056\043\060\050\063\056\001\001\000\002" +
                          "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\030\003\025" +
                          "\010\013\011\104\013\123\015\004\032\305\033\120\035" +
                          "\124\036\113\050\112\051\121\001\001\000\002\001\001" +
                          "\000\006\014\307\061\037\001\001\000\004\023\311\001" +
                          "\001\000\006\014\312\061\037\001\001\000\002\001\001" +
                          "\000\002\001\001\000\036\003\025\007\316\010\317\011" +
                          "\104\013\123\015\004\032\315\033\120\035\124\036\113" +
                          "\050\112\051\121\052\314\053\320\001\001\000\002\001" +
                          "\001\000\002\001\001\000\002\001\001\000\004\016\023" +
                          "\001\001\000\002\001\001\000\032\003\025\010\013\011" +
                          "\104\013\123\015\004\032\322\033\120\035\124\036\113" +
                          "\050\112\051\121\054\323\001\001\000\002\001\001\000" +
                          "\002\001\001\000\032\003\025\010\013\011\104\013\123" +
                          "\015\004\032\325\033\120\035\124\036\113\050\112\051" +
                          "\121\055\326\001\001\000\002\001\001\000\002\001\001" +
                          "\000\006\014\330\061\037\001\001\000\002\001\001\000" +
                          "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
  {
    action_obj = new CUP$parser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
          int                        act_num,
          java_cup.runtime.lr_parser parser,
          java.util.Stack            stack,
          int                        top)
          throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
  {

  }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
          throws java.lang.Exception
  {
    return parser.next_token();
  }


  Lexer parser;
  SymbolTable symbolTable = new SymbolTable();

  // Constructor del parser
  @SuppressWarnings("deprecation")
  public parser(Lexer parser){
    this.parser = parser;
    this.symbolFactory = new DefaultSymbolFactory();

    // Inicializar el ámbito global
    FunctionInfo globalFunction = new FunctionInfo("global", "void",0,0, new ArrayList<>());
    if (!symbolTable.pushFunction(globalFunction)) {
      System.err.println("Error: Función global ya está definida.");
    }
    globalFunction.beginScope();
  }

  @Override
  public void report_error(String message, Object info) {
    if (info instanceof Symbol) {
      Symbol symbol = (Symbol) info;
      System.err.println("Error sintactico, linea: " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
    } else {
      System.err.println("Error sintactico: " + message);
    }
  }

  @Override
  public void report_fatal_error(String message, Object info) {
    // Reportar el error fatal sin detener el programa
    if (info instanceof Symbol) {
      Symbol symbol = (Symbol) info;
      System.err.println("Error fatal sintactico " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
    } else {
      System.err.println("Error fatal de sintaxis: " + message);
    }
  }

  @Override
  public void unrecovered_syntax_error(Symbol info) {
    if (info.value != null) {
      System.err.println("Error no recuperable en la linea " + (info.left + 1) + ", columna " + (info.right + 1));
    }
  }


  /** Cup generated class to encapsulate user supplied action code.*/
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

      System.out.println("Hola");
    }

    public void adios(){

      System.out.println("Adiós");
    }

    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
      {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= programa EOF
        {
          Object RESULT =null;
          int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          RESULT = start_val;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        /* ACCEPT */
        CUP$parser$parser.done_parsing();
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // tipos ::= INTEGER
        {
          Object RESULT =null;
          RESULT = "int";
          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // tipos ::= STRING
        {
          Object RESULT =null;
          RESULT = "string";
          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // tipos ::= CHAR
        {
          Object RESULT =null;
          RESULT = "char";
          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // tipos ::= BOOLEAN
        {
          Object RESULT =null;
          RESULT = "boolean";
          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // tipos ::= FLOAT
        {
          Object RESULT =null;
          RESULT = "float";
          CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // literales ::= INTEGER_LITERAL
        {
          Object RESULT =null;
          int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) i;
          RESULT = new SymbolInfo("int", "int", token.getLine() + 1, token.getColumn() + 1);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // literales ::= STRING_LITERAL
        {
          Object RESULT =null;
          int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) s;
          RESULT = new SymbolInfo("string", "string", token.getLine() + 1, token.getColumn() + 1);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // literales ::= CHAR_LITERAL
        {
          Object RESULT =null;
          int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) c;
          RESULT = new SymbolInfo("char", "char", token.getLine() + 1, token.getColumn() + 1);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // literales ::= BOOLEAN_LITERAL
        {
          Object RESULT =null;
          int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) b;
          RESULT = new SymbolInfo("boolean", "boolean", token.getLine() + 1, token.getColumn() + 1);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // literales ::= FLOAT_LITERAL
        {
          Object RESULT =null;
          int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) f;
          RESULT = new SymbolInfo("float", "float", token.getLine() + 1, token.getColumn() + 1);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // literales_num ::= INTEGER_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // literales_num ::= FLOAT_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // literales_num ::= CHAR_LITERAL
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // nombrar ::= tipos IDENTIFIER
        {
          Object RESULT =null;
          int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          // Obtener el tipo
          String tipo = (String) t;

          // Cast correcto de 'id' a TokenInfo
          TokenInfo token = (TokenInfo) id;

          // Obtener el nombre, línea y columna
          String nombre = token.getValue();
          int linea = token.getLine() + 1;
          int columna = token.getColumn() + 1;

          // Imprimir la información de declaración
          //System.out.println("Declaración de variable '" + nombre + "' de tipo '" + tipo + "' en línea " + linea + ", columna " + columna);

          // Crear el SymbolInfo con la información de posición
          RESULT = new SymbolInfo(nombre, tipo, linea, columna);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // expresion ::= expresion_logica
        {
          Object RESULT =null;
          int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = el;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // expresion_logica ::= expresion_logica AND expresion_logica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // expresion_logica ::= expresion_logica OR expresion_logica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // expresion_logica ::= NOT expresion_logica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // expresion_logica ::= expresion_comparacion
        {
          Object RESULT =null;
          int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = ec;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // expresion_comparacion ::= expresion_aritmetica
        {
          Object RESULT =null;
          int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = ea;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // expresion_aritmetica ::= literales
        {
          Object RESULT =null;
          int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = l;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // expresion_aritmetica ::= unary_operators
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // expresion_aritmetica ::= funcion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // expresion_aritmetica ::= error SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // expresion_aritmetica ::= error CLOSE_PAREN
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // expresion_aritmetica ::= IDENTIFIER
        {
          Object RESULT =null;
          int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          TokenInfo token = (TokenInfo) id;
          SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);

          FunctionInfo currentTable = symbolTable.getCurrentScope();

          Variable.checkExistance(variable, currentTable);

          RESULT = variable;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // sentencias ::= sentencia
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // sentencias ::= sentencias sentencia
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // sentencia ::= creacion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // sentencia ::= creacionAsignacion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // sentencia ::= estructuraControl
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // sentencia ::= arreglo
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // sentencia ::= print_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // sentencia ::= read_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // sentencia ::= asignar
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // sentencia ::= IDENTIFIER SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // sentencia ::= error SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // asignar ::= IDENTIFIER EQ expresion SEMICOLON
        {
          Object RESULT =null;
          int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          TokenInfo token = (TokenInfo) id;
          SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
          SymbolInfo expressionResult = (SymbolInfo) e;
          FunctionInfo currentTable = symbolTable.getCurrentScope();

          // Verificar compatibilidad de tipos
          Variable.checkType(variable, expressionResult, currentTable);

          CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // creacion ::= nombrar SEMICOLON
        {
          Object RESULT =null;
          int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          SymbolInfo info = (SymbolInfo) n;
          FunctionInfo currentTable = symbolTable.getCurrentScope();

          Variable.checkRepeated(info, currentTable);

          boolean inserted = currentTable.insert(info.getName(), info);

          RESULT = null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON
        {
          Object RESULT =null;
          int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
          int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
          Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
          int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          SymbolInfo info = (SymbolInfo) n;
          FunctionInfo currentTable = symbolTable.getCurrentScope();
          SymbolInfo expressionResult = (SymbolInfo) e;

          Variable.checkRepeated(info, currentTable);

          boolean inserted = currentTable.insert(info.getName(), info);

          Variable.checkType(info, expressionResult, currentTable);

          RESULT = null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // funciones ::= funcion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // funciones ::= funciones funcion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // funcion ::= encabezadoFuncion bloque
        {
          Object RESULT =null;

          symbolTable.popFunction();

          CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // bloque ::= apertura_bloque sentencias cierre_bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // bloque ::= apertura_bloque cierre_bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // bloque ::= apertura_bloque error cierre_bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // apertura_bloque ::= OPEN_BLOCK
        {
          Object RESULT =null;

          FunctionInfo currentFunction = symbolTable.getCurrentScope();
          if (currentFunction != null) {
            currentFunction.beginScope();
          } else {
            System.err.println("Error: No se puede abrir un bloque fuera de una función.");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // cierre_bloque ::= CLOSE_BLOCK
        {
          Object RESULT =null;

          FunctionInfo currentTable = symbolTable.getCurrentScope();
          if (currentTable != null) {
            currentTable.printScopes();
            currentTable.endScope();
          } else {
            System.err.println("Error: No se puede cerrar un bloque fuera de una función.");
          }

          CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // encabezadoFuncion ::= nombrar parametros
        {
          Object RESULT =null;
          int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
          int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          SymbolInfo funcSymbol = (SymbolInfo) i;
          String funcName = funcSymbol.getName();
          String returnType = funcSymbol.getType();
          System.out.println("\n Función: '" + funcName + "' con tipo de retorno '" + returnType + "'");
          List<SymbolInfo> paramList = (List<SymbolInfo>) e;
          for (SymbolInfo param : paramList) {
            System.out.println("Parámetro: nombre = " + param.getName() + ", tipo = " + param.getType());
          }
          FunctionInfo fInfo = new FunctionInfo(funcName, returnType,0,0, paramList);

          // Insertar la función en la tabla de símbolos
          boolean inserted = symbolTable.pushFunction(fInfo);

          // Iniciar el primer scope de la función
          fInfo.beginScope();

          CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // parametros ::= OPEN_PAREN CLOSE_PAREN
        {
          Object RESULT =null;

          System.out.println("Sin parámetros");
          RESULT = new ArrayList<SymbolInfo>();

          CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN
        {
          Object RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
          Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          RESULT = p;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // parametroAux ::= parametro
        {
          Object RESULT =null;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
          lista.add((SymbolInfo)p);
          RESULT = lista;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // parametroAux ::= parametroAux COMMA parametro
        {
          Object RESULT =null;
          int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
          int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
          Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
          int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          List<SymbolInfo> lista = (List<SymbolInfo>) pl;
          lista.add((SymbolInfo)p);
          RESULT = lista;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // parametro ::= nombrar
        {
          Object RESULT =null;
          int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
          int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
          Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
          RESULT = n;
          CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // estructuraControl ::= if_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // estructuraControl ::= else_if_list
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // estructuraControl ::= while_cicle
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // estructuraControl ::= switch_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // estructuraControl ::= for_cicle
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // estructuraControl ::= return_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // estructuraControl ::= break_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // else_if_list_opt ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // else_if_list_opt ::= else_if_list
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // else_if_list_opt ::= ELSE bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // break_stmt ::= BREAK SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // inicializacion_opt ::= creacionAsignacion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // inicializacion_opt ::= expresion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // inicializacion_opt ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // condicion_opt ::= expresion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // condicion_opt ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // actualizacion_opt ::= expresion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // actualizacion_opt ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // case_list ::= case_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // case_list ::= case_list case_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // case_stmt ::= CASE literales_num COLON sentencias
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // default_stmt_opt ::= default_stmt
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // default_stmt_opt ::=
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // default_stmt ::= DEFAULT COLON sentencias
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // arreglo ::= tipos IDENTIFIER array_size SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // arreglo ::= tipos IDENTIFIER array_size EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // array_size ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // array_size ::= OPEN_BRACKET IDENTIFIER CLOSE_BRACKET
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // listaValores ::= listaValores COMMA literales
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // listaValores ::= literales
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // unary_operators ::= negacion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // unary_operators ::= IDENTIFIER INCREMENT
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // unary_operators ::= IDENTIFIER DECREMENT
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // negacion ::= MINUS literales_num
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // return_stmt ::= RETURN SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 112: // return_stmt ::= RETURN expresion SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 113: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 114: // lista_print ::= expresion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 115: // lista_print ::= lista_print COMMA expresion
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 116: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 117: // programa ::= conjuntoFunciones
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 118: // programa ::= error
        {
          Object RESULT =null;
          System.err.println("Error relacionado a la ausencia o mal estructura de la funcion main");
          CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 119: // conjuntoFunciones ::= funciones funcionMain
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 120: // conjuntoFunciones ::= funcionMain
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 121: // funcionMain ::= tipos MAIN bloque
        {
          Object RESULT =null;

          CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
        }
        return CUP$parser$result;

        /* . . . . . .*/
        default:
          throw new Exception(
                  "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int                        CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack            CUP$parser$stack,
            int                        CUP$parser$top)
            throws java.lang.Exception
    {
      return CUP$parser$do_action_part00000000(
              CUP$parser$act_num,
              CUP$parser$parser,
              CUP$parser$stack,
              CUP$parser$top);
    }
  }

}