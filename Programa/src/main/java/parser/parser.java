
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import tables.TokenInfo;
import semanticalAnalysis.Variable;
import semanticalAnalysis.Function;
import semanticalAnalysis.ControlStructureOperations;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\004\000\002" +
    "\033\004\000\002\033\003\000\002\004\003\000\002\004" +
    "\004\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\063\006\000\002\006\004\000\002\007" +
    "\006\000\002\012\003\000\002\012\004\000\002\013\004" +
    "\000\002\014\005\000\002\014\004\000\002\014\005\000" +
    "\002\061\003\000\002\062\003\000\002\015\004\000\002" +
    "\016\004\000\002\016\005\000\002\017\003\000\002\017" +
    "\005\000\002\020\003\000\002\065\006\000\002\066\002" +
    "\000\002\066\003\000\002\066\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\007\000\002\022\011\000\002\022\010\000\002\023\011" +
    "\000\002\024\002\000\002\024\003\000\002\024\004\000" +
    "\002\025\007\000\002\031\004\000\002\027\007\000\002" +
    "\052\007\000\002\053\003\000\002\053\003\000\002\053" +
    "\002\000\002\054\003\000\002\054\002\000\002\055\003" +
    "\000\002\055\002\000\002\026\007\000\002\046\006\000" +
    "\002\037\003\000\002\037\004\000\002\042\006\000\002" +
    "\047\003\000\002\047\002\000\002\043\005\000\002\040" +
    "\006\000\002\040\012\000\002\064\005\000\002\064\005" +
    "\000\002\041\005\000\002\041\003\000\002\035\003\000" +
    "\002\035\004\000\002\035\004\000\002\036\004\000\002" +
    "\030\004\000\002\030\005\000\002\056\007\000\002\057" +
    "\003\000\002\057\005\000\002\060\007\000\002\002\003" +
    "\000\002\002\003\000\002\044\004\000\002\044\003\000" +
    "\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\016\003\016\004\012\007\006\011\013\016" +
    "\021\017\020\001\002\000\004\002\343\001\002\000\004" +
    "\020\042\001\002\000\006\006\000\061\000\001\002\000" +
    "\014\004\uffca\007\uffca\011\uffca\016\uffca\017\uffca\001\002" +
    "\000\006\006\036\061\037\001\002\000\004\002\uff84\001" +
    "\002\000\006\006\ufffd\061\ufffd\001\002\000\006\006\uffff" +
    "\061\uffff\001\002\000\004\024\025\001\002\000\004\002" +
    "\uff87\001\002\000\004\002\uff86\001\002\000\014\004\012" +
    "\007\006\011\013\016\021\017\020\001\002\000\006\006" +
    "\ufffe\061\ufffe\001\002\000\006\006\ufffc\061\ufffc\001\002" +
    "\000\014\004\uffc9\007\uffc9\011\uffc9\016\uffc9\017\uffc9\001" +
    "\002\000\004\002\uff85\001\002\000\004\020\uffc2\001\002" +
    "\000\016\004\012\007\006\011\013\016\021\017\020\025" +
    "\032\001\002\000\004\006\036\001\002\000\006\025\uffbf" +
    "\062\uffbf\001\002\000\006\025\uffbd\062\uffbd\001\002\000" +
    "\006\025\034\062\033\001\002\000\004\020\uffc1\001\002" +
    "\000\014\004\012\007\006\011\013\016\021\017\020\001" +
    "\002\000\004\020\uffc0\001\002\000\006\025\uffbe\062\uffbe" +
    "\001\002\000\012\012\ufff3\024\ufff3\025\ufff3\062\ufff3\001" +
    "\002\000\004\020\042\001\002\000\044\003\057\004\012" +
    "\005\062\006\102\007\006\011\013\016\021\017\020\021" +
    "\071\046\054\047\070\050\073\051\046\052\064\055\056" +
    "\057\100\060\072\001\002\000\004\002\uff83\001\002\000" +
    "\044\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\055\uffc4\057\uffc4\060\uffc4\001\002\000\004" +
    "\045\341\001\002\000\050\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\011\uffd5\016\uffd5\017\uffd5\021\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\057\uffd5\060\uffd5\001\002\000\050\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016\uffd3\017\uffd3\021" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\057\uffd3\060\uffd3\001\002\000\004\024" +
    "\323\001\002\000\050\003\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\011\uffb2\016\uffb2\017\uffb2\021\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\057\uffb2\060\uffb2\001\002\000\050\003\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\016\uffb7\017\uffb7\021\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\057\uffb7\060\uffb7\001\002\000\050\003\uffb6" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\016\uffb6\017" +
    "\uffb6\021\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\001\002\000" +
    "\050\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\016\uffd2\017\uffd2\021\uffd2\046\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2" +
    "\001\002\000\050\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\011\uffb3\016\uffb3\017\uffb3\021\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\057" +
    "\uffb3\060\uffb3\001\002\000\004\024\314\001\002\000\044" +
    "\003\274\004\012\005\062\006\102\007\006\011\013\016" +
    "\021\017\020\021\071\046\054\047\070\050\073\051\046" +
    "\052\064\055\056\057\100\060\072\001\002\000\030\003" +
    "\122\006\113\010\123\015\114\024\106\026\121\044\112" +
    "\045\310\063\120\064\126\065\111\001\002\000\006\021" +
    "\071\045\275\001\002\000\050\003\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\016\uffd1\017\uffd1\021\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\001\002\000\050\003\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001\002\000\004" +
    "\045\306\001\002\000\050\003\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\011\uffb5\016\uffb5\017\uffb5\021\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055" +
    "\uffb5\057\uffb5\060\uffb5\001\002\000\004\024\261\001\002" +
    "\000\050\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011" +
    "\uffb4\016\uffb4\017\uffb4\021\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\057\uffb4\060" +
    "\uffb4\001\002\000\050\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\011\uffd7\016\uffd7\017\uffd7\021\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\057\uffd7\060\uffd7\001\002\000\052\002\uffc6\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\016\uffc6\017\uffc6" +
    "\021\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\001\002\000\004" +
    "\046\250\001\002\000\052\002\uffc3\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\011\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\057\uffc3\060\uffc3\001\002\000\004\024\244" +
    "\001\002\000\004\024\240\001\002\000\050\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001\002\000\050" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\006\012\234\045\235\001\002\000\004\006\214" +
    "\001\002\000\004\024\205\001\002\000\050\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\016\uffd4\017\uffd4" +
    "\021\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4\001\002\000\010" +
    "\012\103\024\105\045\104\001\002\000\026\003\122\006" +
    "\113\010\123\015\114\024\106\026\121\044\112\063\120" +
    "\064\126\065\111\001\002\000\050\003\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\011\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\060\uffd0\001\002\000\032\003\122" +
    "\006\113\010\123\015\114\024\106\025\uffbb\026\121\044" +
    "\112\062\uffbb\063\120\064\126\065\111\001\002\000\024" +
    "\003\122\006\113\010\123\015\114\024\106\026\121\063" +
    "\120\064\126\065\111\001\002\000\044\013\uffdf\014\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\045\uffdf\062\uffdf\001\002\000\006\025\uffba\062\uffba\001" +
    "\002\000\046\013\ufff8\014\ufff8\021\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\062\ufff8" +
    "\001\002\000\026\003\122\006\113\010\123\015\114\024" +
    "\106\026\121\044\112\063\120\064\126\065\111\001\002" +
    "\000\052\013\uffda\014\uffda\024\105\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\177\034\176\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045" +
    "\uffda\062\uffda\001\002\000\046\013\ufffa\014\ufffa\021\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\045\ufffa\062\ufffa\001\002\000\044\013\uffdd\014\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045" +
    "\uffdd\062\uffdd\001\002\000\014\025\ufff2\042\172\043\173" +
    "\045\ufff2\062\ufff2\001\002\000\044\013\uff91\014\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\045" +
    "\uff91\062\uff91\001\002\000\046\013\ufff9\014\ufff9\021\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\045\ufff9\062\ufff9\001\002\000\010\010\166\063\167\064" +
    "\170\001\002\000\006\025\165\045\164\001\002\000\046" +
    "\013\ufffb\014\ufffb\021\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\045\ufffb\062\ufffb\001\002\000" +
    "\044\013\135\014\142\025\uffe7\026\134\027\146\030\144" +
    "\031\140\032\136\035\141\036\147\037\143\040\145\041" +
    "\137\042\uffe7\043\uffe7\045\uffe7\062\uffe7\001\002\000\014" +
    "\025\uffee\042\uffee\043\uffee\045\uffee\062\uffee\001\002\000" +
    "\046\013\ufff7\014\ufff7\021\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\062\ufff7\001\002" +
    "\000\044\013\uffde\014\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\045\uffde\062\uffde\001\002\000" +
    "\006\025\132\062\131\001\002\000\026\003\122\006\113" +
    "\010\123\015\114\024\106\026\121\044\112\063\120\064" +
    "\126\065\111\001\002\000\044\013\uffbc\014\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\045\uffbc" +
    "\062\uffbc\001\002\000\006\025\uffb9\062\uffb9\001\002\000" +
    "\024\003\122\006\113\010\123\015\114\024\106\026\121" +
    "\063\120\064\126\065\111\001\002\000\024\003\122\006" +
    "\113\010\123\015\114\024\106\026\121\063\120\064\126" +
    "\065\111\001\002\000\024\003\122\006\113\010\123\015" +
    "\114\024\106\026\121\063\120\064\126\065\111\001\002" +
    "\000\024\003\122\006\113\010\123\015\114\024\106\026" +
    "\121\063\120\064\126\065\111\001\002\000\024\003\122" +
    "\006\113\010\123\015\114\024\106\026\121\063\120\064" +
    "\126\065\111\001\002\000\024\003\122\006\113\010\123" +
    "\015\114\024\106\026\121\063\120\064\126\065\111\001" +
    "\002\000\024\003\122\006\113\010\123\015\114\024\106" +
    "\026\121\063\120\064\126\065\111\001\002\000\024\003" +
    "\122\006\113\010\123\015\114\024\106\026\121\063\120" +
    "\064\126\065\111\001\002\000\024\003\122\006\113\010" +
    "\123\015\114\024\106\026\121\063\120\064\126\065\111" +
    "\001\002\000\024\003\122\006\113\010\123\015\114\024" +
    "\106\026\121\063\120\064\126\065\111\001\002\000\024" +
    "\003\122\006\113\010\123\015\114\024\106\026\121\063" +
    "\120\064\126\065\111\001\002\000\024\003\122\006\113" +
    "\010\123\015\114\024\106\026\121\063\120\064\126\065" +
    "\111\001\002\000\030\014\142\025\uffeb\026\134\027\146" +
    "\030\144\031\140\032\136\042\uffeb\043\uffeb\045\uffeb\062" +
    "\uffeb\001\002\000\044\013\uffe4\014\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\136\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\062\uffe4" +
    "\001\002\000\030\014\142\025\uffe9\026\134\027\146\030" +
    "\144\031\140\032\136\042\uffe9\043\uffe9\045\uffe9\062\uffe9" +
    "\001\002\000\044\013\uffe3\014\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\136\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\062\uffe3\001" +
    "\002\000\030\014\142\025\uffea\026\134\027\146\030\144" +
    "\031\140\032\136\042\uffea\043\uffea\045\uffea\062\uffea\001" +
    "\002\000\044\013\uffe6\014\uffe6\025\uffe6\026\uffe6\027\146" +
    "\030\144\031\140\032\136\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\062\uffe6\001\002" +
    "\000\030\014\142\025\uffec\026\134\027\146\030\144\031" +
    "\140\032\136\042\uffec\043\uffec\045\uffec\062\uffec\001\002" +
    "\000\044\013\uffe2\014\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\136\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\045\uffe2\062\uffe2\001\002\000" +
    "\030\014\142\025\uffe8\026\134\027\146\030\144\031\140" +
    "\032\136\042\uffe8\043\uffe8\045\uffe8\062\uffe8\001\002\000" +
    "\044\013\uffe1\014\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\045\uffe1\062\uffe1\001\002\000\030" +
    "\014\142\025\uffed\026\134\027\146\030\144\031\140\032" +
    "\136\042\uffed\043\uffed\045\uffed\062\uffed\001\002\000\044" +
    "\013\uffe5\014\uffe5\025\uffe5\026\uffe5\027\146\030\144\031" +
    "\140\032\136\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\045\uffe5\062\uffe5\001\002\000\044\013" +
    "\uffdc\014\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\045\uffdc\062\uffdc\001\002\000\044\013\uffdb" +
    "\014\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\045\uffdb\062\uffdb\001\002\000\046\013\ufff6\014" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\045\ufff6\056\ufff6\062\ufff6\001\002\000\046\013\ufff4" +
    "\014\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\045\ufff4\056\ufff4\062\ufff4\001\002\000\046\013" +
    "\ufff5\014\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\045\ufff5\056\ufff5\062\ufff5\001\002\000\044" +
    "\013\uff8e\014\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\045\uff8e\062\uff8e\001\002\000\026\003" +
    "\122\006\113\010\123\015\114\024\106\026\121\044\112" +
    "\063\120\064\126\065\111\001\002\000\026\003\122\006" +
    "\113\010\123\015\114\024\106\026\121\044\112\063\120" +
    "\064\126\065\111\001\002\000\014\025\ufff0\042\ufff0\043" +
    "\ufff0\045\ufff0\062\ufff0\001\002\000\014\025\ufff1\042\ufff1" +
    "\043\ufff1\045\ufff1\062\ufff1\001\002\000\044\013\uff8f\014" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\045\uff8f\062\uff8f\001\002\000\044\013\uff90\014\uff90" +
    "\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\035" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\045\uff90\062\uff90\001\002\000\014\025\uffef\042\172\043" +
    "\173\045\uffef\062\uffef\001\002\000\020\014\142\025\202" +
    "\026\134\027\146\030\144\031\140\032\136\001\002\000" +
    "\044\013\uffe0\014\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\045\uffe0\062\uffe0\001\002\000\004" +
    "\045\204\001\002\000\050\003\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\011\uffcd\016\uffcd\017\uffcd\021\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\057\uffcd\060\uffcd\001\002\000\026\003\122\006\113" +
    "\010\123\015\114\024\106\026\121\044\112\063\120\064" +
    "\126\065\111\001\002\000\006\025\uff8a\062\uff8a\001\002" +
    "\000\006\025\211\062\210\001\002\000\026\003\122\006" +
    "\113\010\123\015\114\024\106\026\121\044\112\063\120" +
    "\064\126\065\111\001\002\000\004\045\212\001\002\000" +
    "\050\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b" +
    "\016\uff8b\017\uff8b\021\uff8b\046\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b" +
    "\001\002\000\006\025\uff89\062\uff89\001\002\000\010\012" +
    "\ufff3\022\215\045\ufff3\001\002\000\006\006\231\010\230" +
    "\001\002\000\006\012\217\045\220\001\002\000\004\020" +
    "\221\001\002\000\050\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\011\uff97\016\uff97\017\uff97\021\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97" +
    "\057\uff97\060\uff97\001\002\000\014\010\123\015\114\063" +
    "\120\064\126\065\111\001\002\000\006\021\225\062\224" +
    "\001\002\000\006\021\uff92\062\uff92\001\002\000\014\010" +
    "\123\015\114\063\120\064\126\065\111\001\002\000\004" +
    "\045\226\001\002\000\050\003\uff96\004\uff96\005\uff96\006" +
    "\uff96\007\uff96\011\uff96\016\uff96\017\uff96\021\uff96\046\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\057\uff96\060\uff96\001\002\000\006\021\uff93\062\uff93" +
    "\001\002\000\004\023\233\001\002\000\004\023\232\001" +
    "\002\000\006\012\uff94\045\uff94\001\002\000\006\012\uff95" +
    "\045\uff95\001\002\000\026\003\122\006\113\010\123\015" +
    "\114\024\106\026\121\044\112\063\120\064\126\065\111" +
    "\001\002\000\050\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\011\uffcc\016\uffcc\017\uffcc\021\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057" +
    "\uffcc\060\uffcc\001\002\000\004\045\237\001\002\000\052" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060" +
    "\uffcb\001\002\000\026\003\122\006\113\010\123\015\114" +
    "\024\106\026\121\044\112\063\120\064\126\065\111\001" +
    "\002\000\004\025\242\001\002\000\004\020\042\001\002" +
    "\000\050\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\016\uffaa\017\uffaa\021\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060" +
    "\uffaa\001\002\000\004\006\245\001\002\000\004\025\246" +
    "\001\002\000\004\045\247\001\002\000\050\003\uff88\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\011\uff88\016\uff88\017\uff88" +
    "\021\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053" +
    "\uff88\054\uff88\055\uff88\057\uff88\060\uff88\001\002\000\004" +
    "\024\251\001\002\000\026\003\122\006\113\010\123\015" +
    "\114\024\106\026\121\044\112\063\120\064\126\065\111" +
    "\001\002\000\004\025\253\001\002\000\004\020\042\001" +
    "\002\000\050\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad" +
    "\011\uffad\016\uffad\017\uffad\021\uffad\046\uffad\047\255\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad" +
    "\060\uffad\001\002\000\006\020\042\046\250\001\002\000" +
    "\050\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae" +
    "\016\uffae\017\uffae\021\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae\060\uffae" +
    "\001\002\000\050\003\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\011\uffac\016\uffac\017\uffac\021\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\057" +
    "\uffac\060\uffac\001\002\000\050\003\uffab\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\011\uffab\016\uffab\017\uffab\021\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\057\uffab\060\uffab\001\002\000\026\003\122\006" +
    "\113\010\123\015\114\024\106\026\121\044\112\063\120" +
    "\064\126\065\111\001\002\000\004\025\263\001\002\000" +
    "\004\020\265\001\002\000\050\003\uff9f\004\uff9f\005\uff9f" +
    "\006\uff9f\007\uff9f\011\uff9f\016\uff9f\017\uff9f\021\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\057\uff9f\060\uff9f\001\002\000\004\053\270\001" +
    "\002\000\010\021\uff9d\053\uff9d\054\uff9d\001\002\000\010" +
    "\021\uff99\053\270\054\277\001\002\000\010\010\166\063" +
    "\167\064\170\001\002\000\004\056\272\001\002\000\042" +
    "\003\274\004\012\005\062\006\102\007\006\011\013\016" +
    "\021\017\020\046\054\047\070\050\073\051\046\052\064" +
    "\055\056\057\100\060\072\001\002\000\050\003\274\004" +
    "\012\005\062\006\102\007\006\011\013\016\021\017\020" +
    "\021\uff9b\046\054\047\070\050\073\051\046\052\064\053" +
    "\uff9b\054\uff9b\055\056\057\100\060\072\001\002\000\004" +
    "\045\275\001\002\000\050\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\057\uffce\060\uffce\001\002\000\050\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\016\uffd8\017\uffd8\021" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000\004\056" +
    "\304\001\002\000\004\021\uff9a\001\002\000\004\021\303" +
    "\001\002\000\010\021\uff9c\053\uff9c\054\uff9c\001\002\000" +
    "\050\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\011\uff9e" +
    "\016\uff9e\017\uff9e\021\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e" +
    "\001\002\000\042\003\274\004\012\005\062\006\102\007" +
    "\006\011\013\016\021\017\020\046\054\047\070\050\073" +
    "\051\046\052\064\055\056\057\100\060\072\001\002\000" +
    "\044\003\274\004\012\005\062\006\102\007\006\011\013" +
    "\016\021\017\020\021\uff98\046\054\047\070\050\073\051" +
    "\046\052\064\055\056\057\100\060\072\001\002\000\050" +
    "\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\016" +
    "\uffa9\017\uffa9\021\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9\060\uffa9\001" +
    "\002\000\052\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\011\uffc5\016\uffc5\017\uffc5\021\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\060\uffc5\001\002\000\050\003\uff8d\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\011\uff8d\016\uff8d\017\uff8d\021\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\057\uff8d\060\uff8d\001\002\000\004\045\312" +
    "\001\002\000\050\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\011\uff8c\016\uff8c\017\uff8c\021\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\057" +
    "\uff8c\060\uff8c\001\002\000\052\002\uffc7\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\011\uffc7\016\uffc7\017\uffc7\021" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002\000\026\003" +
    "\122\006\113\010\123\015\114\024\106\026\121\044\112" +
    "\063\120\064\126\065\111\001\002\000\004\025\316\001" +
    "\002\000\004\020\042\001\002\000\050\003\uffb1\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\011\uffb1\016\uffb1\017\uffb1\021" +
    "\uffb1\046\uffb1\047\320\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\057\uffb1\060\uffb1\001\002\000\006\020" +
    "\042\046\250\001\002\000\050\003\uffaf\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\011\uffaf\016\uffaf\017\uffaf\021\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\057\uffaf\060\uffaf\001\002\000\050\003\uffb0\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\011\uffb0\016\uffb0\017\uffb0" +
    "\021\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\057\uffb0\060\uffb0\001\002\000\042" +
    "\003\122\004\012\006\113\007\006\010\123\011\013\015" +
    "\114\016\021\017\020\024\106\026\121\044\112\045\uffa4" +
    "\063\120\064\126\065\111\001\002\000\004\025\337\001" +
    "\002\000\004\045\uffa5\001\002\000\004\045\uffa6\001\002" +
    "\000\004\012\234\001\002\000\004\045\331\001\002\000" +
    "\030\003\122\006\113\010\123\015\114\024\106\026\121" +
    "\044\112\045\uffa2\063\120\064\126\065\111\001\002\000" +
    "\004\045\uffa3\001\002\000\004\045\334\001\002\000\030" +
    "\003\122\006\113\010\123\015\114\024\106\025\uffa0\026" +
    "\121\044\112\063\120\064\126\065\111\001\002\000\004" +
    "\025\uffa1\001\002\000\004\025\uffa7\001\002\000\004\020" +
    "\042\001\002\000\050\003\uffa8\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\011\uffa8\016\uffa8\017\uffa8\021\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\057\uffa8\060\uffa8\001\002\000\050\003\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf\017\uffcf\021\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\057\uffcf\060\uffcf\001\002\000\014\004\uffc8" +
    "\007\uffc8\011\uffc8\016\uffc8\017\uffc8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\022\002\003\003\007\010\013\012\016\013" +
    "\006\015\004\044\014\045\010\001\001\000\002\001\001" +
    "\000\006\014\341\061\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\007\010\013" +
    "\013\021\015\004\045\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\025\010\027\017\030\020\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\025\010" +
    "\027\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\040\061\037\001\001\000" +
    "\052\003\076\004\054\005\073\006\065\007\060\010\075" +
    "\021\043\022\074\023\047\025\050\026\062\027\064\030" +
    "\052\031\046\040\100\056\044\060\051\062\066\063\057" +
    "\065\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\076\005\275\006\065\007\060\010\075\021" +
    "\043\022\074\023\047\025\050\026\062\027\064\030\052" +
    "\031\046\040\100\056\044\060\051\062\312\063\057\065" +
    "\042\001\001\000\022\011\106\032\310\033\123\035\126" +
    "\036\116\050\115\051\124\065\114\001\001\000\004\062" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\106\032\202\033\123\035\126\036\116" +
    "\050\115\051\124\065\114\001\001\000\002\001\001\000" +
    "\024\011\106\032\107\033\123\035\126\036\116\050\115" +
    "\051\124\065\114\066\127\001\001\000\014\011\106\033" +
    "\200\035\126\036\116\065\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\106\033" +
    "\123\035\126\036\116\050\177\051\124\065\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\106\032\132\033" +
    "\123\035\126\036\116\050\115\051\124\065\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\106\033" +
    "\162\035\126\036\116\065\114\001\001\000\014\011\106" +
    "\033\161\035\126\036\116\065\114\001\001\000\014\011" +
    "\106\033\160\035\126\036\116\065\114\001\001\000\014" +
    "\011\106\033\157\035\126\036\116\065\114\001\001\000" +
    "\014\011\106\033\156\035\126\036\116\065\114\001\001" +
    "\000\014\011\106\033\155\035\126\036\116\065\114\001" +
    "\001\000\014\011\106\033\154\035\126\036\116\065\114" +
    "\001\001\000\014\011\106\033\153\035\126\036\116\065" +
    "\114\001\001\000\014\011\106\033\152\035\126\036\116" +
    "\065\114\001\001\000\014\011\106\033\151\035\126\036" +
    "\116\065\114\001\001\000\014\011\106\033\150\035\126" +
    "\036\116\065\114\001\001\000\014\011\106\033\147\035" +
    "\126\036\116\065\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\106\033\123\035\126\036\116\050\174" +
    "\051\124\065\114\001\001\000\020\011\106\033\123\035" +
    "\126\036\116\050\173\051\124\065\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\106\032" +
    "\205\033\123\035\126\036\116\050\115\051\124\057\206" +
    "\065\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\106\032\212\033\123\035\126\036\116\050\115" +
    "\051\124\065\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\222\041\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\011\106\032\235\033\123\035\126\036\116\050\115" +
    "\051\124\065\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\011\106\032\240\033\123" +
    "\035\126\036\116\050\115\051\124\065\114\001\001\000" +
    "\002\001\001\000\006\014\242\061\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\106" +
    "\032\251\033\123\035\126\036\116\050\115\051\124\065" +
    "\114\001\001\000\002\001\001\000\006\014\253\061\037" +
    "\001\001\000\006\023\256\024\255\001\001\000\006\014" +
    "\257\061\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\106\032\261\033\123\035" +
    "\126\036\116\050\115\051\124\065\114\001\001\000\002" +
    "\001\001\000\004\046\263\001\001\000\002\001\001\000" +
    "\006\037\266\042\265\001\001\000\002\001\001\000\010" +
    "\042\301\043\277\047\300\001\001\000\004\034\270\001" +
    "\001\000\002\001\001\000\050\003\076\004\272\005\073" +
    "\006\065\007\060\010\075\021\043\022\074\023\047\025" +
    "\050\026\062\027\064\030\052\031\046\040\100\056\044" +
    "\060\051\063\057\065\042\001\001\000\046\003\076\005" +
    "\275\006\065\007\060\010\075\021\043\022\074\023\047" +
    "\025\050\026\062\027\064\030\052\031\046\040\100\056" +
    "\044\060\051\063\057\065\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\076\004\304\005\073\006\065\007" +
    "\060\010\075\021\043\022\074\023\047\025\050\026\062" +
    "\027\064\030\052\031\046\040\100\056\044\060\051\063" +
    "\057\065\042\001\001\000\046\003\076\005\275\006\065" +
    "\007\060\010\075\021\043\022\074\023\047\025\050\026" +
    "\062\027\064\030\052\031\046\040\100\056\044\060\051" +
    "\063\057\065\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\106\032\314\033\123\035" +
    "\126\036\116\050\115\051\124\065\114\001\001\000\002" +
    "\001\001\000\006\014\316\061\037\001\001\000\004\023" +
    "\320\001\001\000\006\014\321\061\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\025\007\325\010" +
    "\326\011\106\032\324\033\123\035\126\036\116\050\115" +
    "\051\124\052\323\053\327\065\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\011\106\032\331\033\123\035" +
    "\126\036\116\050\115\051\124\054\332\065\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\106\032" +
    "\334\033\123\035\126\036\116\050\115\051\124\055\335" +
    "\065\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\337\061\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    Lexer parser;
    SymbolTable symbolTable = new SymbolTable();

    // Constructor del parser
    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser = parser;
        this.symbolFactory = new DefaultSymbolFactory();

        // Inicializar el ámbito global
        FunctionInfo globalFunction = new FunctionInfo("global", "void",0,0, new ArrayList<>());
        if (!symbolTable.pushFunction(globalFunction)) {
            System.err.println("Error: Función global ya está definida.");
        }
        globalFunction.beginScope();
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error sintactico, linea: " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error sintactico: " + message);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // Reportar el error fatal sin detener el programa
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error fatal sintactico " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error fatal de sintaxis: " + message);
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol info) {
        if (info.value != null) {
            System.err.println("Error no recuperable en la linea " + (info.left + 1) + ", columna " + (info.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) i;
    RESULT = new SymbolInfo("int", "int", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) s;
    RESULT = new SymbolInfo("string", "string", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) c;
    RESULT = new SymbolInfo("char", "char", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) b;
    RESULT = new SymbolInfo("boolean", "boolean", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) f;
    RESULT = new SymbolInfo("float", "float", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Obtener el tipo
    String tipo = (String) t;

    // Cast correcto de 'id' a TokenInfo
    TokenInfo token = (TokenInfo) id;

    // Obtener el nombre, línea y columna
    String nombre = token.getValue();
    int linea = token.getLine() + 1;
    int columna = token.getColumn() + 1;

    // Imprimir la información de declaración
    //System.out.println("Declaración de variable '" + nombre + "' de tipo '" + tipo + "' en línea " + linea + ", columna " + columna);

    // Crear el SymbolInfo con la información de posición
    RESULT = new SymbolInfo(nombre, tipo, linea, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       RESULT = ec;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           SymbolInfo op1 = (SymbolInfo) ea1;
                           SymbolInfo op2 = (SymbolInfo) ea2;

                           if (!op1.getType().equals(op2.getType())) {
                                System.err.println("Error semantico, comparando dos cosas diferentes");
                           }

                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;
		
                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;
		
                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;
		
                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;
		
                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;
		
                            RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.getCurrentScope();
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.getCurrentScope();
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           SymbolInfo op1 = (SymbolInfo) ea1;
                           SymbolInfo op2 = (SymbolInfo) ea2;
                           FunctionInfo currentTable = symbolTable.getCurrentScope();
                           ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                           RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.getCurrentScope();
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.getCurrentScope();
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.getCurrentScope();
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = ea;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object uo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= llamada_funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_aritmetica ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_aritmetica ::= error CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           TokenInfo token = (TokenInfo) id;
                           SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);

                           FunctionInfo currentTable = symbolTable.getCurrentScope();

                           Variable.checkExistance(variable, currentTable);
                           RESULT = variable;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= llamada_funcion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignar ::= IDENTIFIER EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TokenInfo token = (TokenInfo) id;
    SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
    SymbolInfo expressionResult = (SymbolInfo) e;
    FunctionInfo currentTable = symbolTable.getCurrentScope();

    // Verificar compatibilidad de tipos
    Variable.checkType(variable, expressionResult, currentTable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();

    Variable.checkRepeated(info, currentTable);

    boolean inserted = currentTable.insert(info.getName(), info);

    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();
    SymbolInfo expressionResult = (SymbolInfo) e;

    Variable.checkRepeated(info, currentTable);

    boolean inserted = currentTable.insert(info.getName(), info);

    Variable.checkType(info, expressionResult, currentTable);

    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque ::= apertura_bloque sentencias cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= apertura_bloque cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= apertura_bloque error cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // apertura_bloque ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentFunction = symbolTable.getCurrentScope();
        if (currentFunction != null) {
            currentFunction.beginScope();
        } else {
            System.err.println("Error: No se puede abrir un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cierre_bloque ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.getCurrentScope();
        if (currentTable != null) {
            currentTable.printScopes();
            currentTable.endScope();
        } else {
            System.err.println("Error: No se puede cerrar un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo funcSymbol = (SymbolInfo) i;
        String funcName = funcSymbol.getName();
        String returnType = funcSymbol.getType();
        System.out.println("\n Función: '" + funcName + "' con tipo de retorno '" + returnType + "'");
        List<SymbolInfo> paramList = (List<SymbolInfo>) e;
        for (SymbolInfo param : paramList) {
            System.out.println("Parámetro: nombre = " + param.getName() + ", tipo = " + param.getType());
        }
        FunctionInfo fInfo = new FunctionInfo(funcName, returnType,0,0, paramList);

        // Insertar la función en la tabla de símbolos
        boolean inserted = symbolTable.pushFunction(fInfo);

        // Iniciar el primer scope de la función
        fInfo.beginScope();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		
    System.out.println("Sin parámetros");
    RESULT = new ArrayList<SymbolInfo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = p;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametroAux ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = (List<SymbolInfo>) pl;
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametro ::= nombrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // llamada_funcion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        TokenInfo token = (TokenInfo) id;

        String funcName = token.getValue();
        FunctionInfo function = symbolTable.lookupFunction(funcName);

        if (function != null) {

            SymbolInfo symbolFunc = new SymbolInfo(function.getName(), function.getType(), 0, 0);

            RESULT = symbolFunc;

        } else {
            System.err.println("Error semantico, la funcion: " + funcName + " no existe, linea: " + token.getLine() + " y columna: " + token.getColumn());
            RESULT = null;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argumentos ::= argumentos COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_if_list_opt ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_stmt ::= CASE literales_num COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arreglo ::= tipos IDENTIFIER array_size SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // arreglo ::= tipos IDENTIFIER array_size EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // array_size ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // array_size ::= OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // negacion ::= MINUS literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // programa ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error relacionado a la ausencia o mal estructura de la funcion main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
