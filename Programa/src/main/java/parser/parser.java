
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\004\003\000\002" +
    "\004\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\004\000\002\007\006\000\002\012\003\000" +
    "\002\012\004\000\002\013\004\000\002\014\005\000\002" +
    "\014\004\000\002\015\004\000\002\016\004\000\002\016" +
    "\005\000\002\017\003\000\002\017\005\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\007\000\002\022\011\000\002\022" +
    "\010\000\002\022\012\000\002\023\011\000\002\024\002" +
    "\000\002\024\003\000\002\025\007\000\002\031\004\000" +
    "\002\027\007\000\002\052\007\000\002\053\003\000\002" +
    "\053\003\000\002\053\002\000\002\054\003\000\002\054" +
    "\002\000\002\055\003\000\002\055\002\000\002\026\007" +
    "\000\002\046\006\000\002\037\003\000\002\037\004\000" +
    "\002\042\006\000\002\047\003\000\002\047\002\000\002" +
    "\043\005\000\002\040\010\000\002\040\014\000\002\041" +
    "\005\000\002\041\003\000\002\035\003\000\002\035\004" +
    "\000\002\035\004\000\002\036\004\000\002\030\004\000" +
    "\002\030\005\000\002\056\007\000\002\057\003\000\002" +
    "\057\005\000\002\060\007\000\002\002\003\000\002\044" +
    "\004\000\002\044\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\014\004\012\007\006\011\013\016\020\017" +
    "\017\001\002\000\004\002\307\001\002\000\004\020\040" +
    "\001\002\000\010\006\000\022\000\061\000\001\002\000" +
    "\014\004\uffd2\007\uffd2\011\uffd2\016\uffd2\017\uffd2\001\002" +
    "\000\006\006\035\061\036\001\002\000\004\002\uff96\001" +
    "\002\000\010\006\ufffd\022\ufffd\061\ufffd\001\002\000\010" +
    "\006\uffff\022\uffff\061\uffff\001\002\000\004\024\024\001" +
    "\002\000\004\002\uff98\001\002\000\014\004\012\007\006" +
    "\011\013\016\020\017\017\001\002\000\010\006\ufffe\022" +
    "\ufffe\061\ufffe\001\002\000\010\006\ufffc\022\ufffc\061\ufffc" +
    "\001\002\000\014\004\uffd1\007\uffd1\011\uffd1\016\uffd1\017" +
    "\uffd1\001\002\000\004\002\uff97\001\002\000\004\020\uffcd" +
    "\001\002\000\016\004\012\007\006\011\013\016\020\017" +
    "\017\025\031\001\002\000\004\006\035\001\002\000\006" +
    "\025\uffca\062\uffca\001\002\000\006\025\uffc8\062\uffc8\001" +
    "\002\000\006\025\033\062\032\001\002\000\004\020\uffcc" +
    "\001\002\000\014\004\012\007\006\011\013\016\020\017" +
    "\017\001\002\000\004\020\uffcb\001\002\000\006\025\uffc9" +
    "\062\uffc9\001\002\000\014\012\ufff3\024\ufff3\025\ufff3\045" +
    "\ufff3\062\ufff3\001\002\000\004\020\040\001\002\000\004" +
    "\002\uff95\001\002\000\040\004\012\005\064\007\006\011" +
    "\013\016\020\017\017\021\053\046\052\047\043\050\045" +
    "\051\072\052\051\055\047\057\065\060\042\001\002\000" +
    "\044\004\uffd8\005\uffd8\007\uffd8\011\uffd8\016\uffd8\017\uffd8" +
    "\021\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\001\002\000\004" +
    "\024\302\001\002\000\004\046\237\001\002\000\040\004" +
    "\012\005\064\007\006\011\013\016\020\017\017\021\301" +
    "\046\052\047\043\050\045\051\072\052\051\055\047\057" +
    "\065\060\042\001\002\000\004\024\275\001\002\000\044" +
    "\004\uffd5\005\uffd5\007\uffd5\011\uffd5\016\uffd5\017\uffd5\021" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\057\uffd5\060\uffd5\001\002\000\026\006" +
    "\103\010\114\015\104\024\075\026\113\044\102\045\273" +
    "\063\112\064\117\065\101\001\002\000\044\004\uffc6\005" +
    "\uffc6\007\uffc6\011\uffc6\016\uffc6\017\uffc6\021\uffc6\046\uffc6" +
    "\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\057\uffc6\060\uffc6\001\002\000\004\024\247\001\002" +
    "\000\004\024\227\001\002\000\046\002\uffce\004\uffce\005" +
    "\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\057\uffce\060\uffce\001\002\000\044\004\uffd7\005\uffd7" +
    "\007\uffd7\011\uffd7\016\uffd7\017\uffd7\021\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\057\uffd7\060\uffd7\001\002\000\006\006\035\022\212\001" +
    "\002\000\044\004\uffd9\005\uffd9\007\uffd9\011\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\055\uffd9\057\uffd9\060\uffd9\001\002" +
    "\000\044\004\uffdc\005\uffdc\007\uffdc\011\uffdc\016\uffdc\017" +
    "\uffdc\021\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\057\uffdc\060\uffdc\001\002\000" +
    "\044\004\uffc2\005\uffc2\007\uffc2\011\uffc2\016\uffc2\017\uffc2" +
    "\021\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\057\uffc2\060\uffc2\001\002\000\044" +
    "\004\uffc4\005\uffc4\007\uffc4\011\uffc4\016\uffc4\017\uffc4\021" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\057\uffc4\060\uffc4\001\002\000\006\012" +
    "\167\045\211\001\002\000\044\004\uffda\005\uffda\007\uffda" +
    "\011\uffda\016\uffda\017\uffda\021\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\057\uffda" +
    "\060\uffda\001\002\000\004\045\210\001\002\000\004\024" +
    "\201\001\002\000\044\004\uffc7\005\uffc7\007\uffc7\011\uffc7" +
    "\016\uffc7\017\uffc7\021\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7" +
    "\001\002\000\044\004\uffd6\005\uffd6\007\uffd6\011\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001" +
    "\002\000\044\004\uffc1\005\uffc1\007\uffc1\011\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052" +
    "\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\060\uffc1\001\002" +
    "\000\044\004\uffc3\005\uffc3\007\uffc3\011\uffc3\016\uffc3\017" +
    "\uffc3\021\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\057\uffc3\060\uffc3\001\002\000" +
    "\004\024\074\001\002\000\044\004\uffc5\005\uffc5\007\uffc5" +
    "\011\uffc5\016\uffc5\017\uffc5\021\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\057\uffc5" +
    "\060\uffc5\001\002\000\040\004\012\006\103\007\006\010" +
    "\114\011\013\015\104\016\020\017\017\024\075\026\113" +
    "\044\102\045\uffb3\063\112\064\117\065\101\001\002\000" +
    "\022\006\103\010\114\015\104\024\075\026\113\063\112" +
    "\064\117\065\101\001\002\000\044\013\uffde\014\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045" +
    "\uffde\062\uffde\001\002\000\004\045\uffb4\001\002\000\004" +
    "\025\175\001\002\000\046\013\ufff8\014\ufff8\021\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\062\ufff8\001\002\000\024\006\103\010\114\015\104" +
    "\024\075\026\113\044\102\063\112\064\117\065\101\001" +
    "\002\000\050\013\uffdf\014\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\173\034\172\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf" +
    "\062\uffdf\001\002\000\046\013\ufffa\014\ufffa\021\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\045" +
    "\ufffa\062\ufffa\001\002\000\004\045\uffb5\001\002\000\004" +
    "\012\167\001\002\000\004\045\161\001\002\000\014\025" +
    "\ufff2\042\155\043\156\045\ufff2\062\ufff2\001\002\000\044" +
    "\013\uffa2\014\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\045\uffa2\062\uffa2\001\002\000\046\013" +
    "\ufff9\014\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\045\ufff9\062\ufff9\001\002\000\010" +
    "\010\151\063\152\064\153\001\002\000\046\013\ufffb\014" +
    "\ufffb\021\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\062\ufffb\001\002\000\044\013\122" +
    "\014\127\025\uffe7\026\121\027\133\030\131\031\125\032" +
    "\123\035\126\036\134\037\130\040\132\041\124\042\uffe7" +
    "\043\uffe7\045\uffe7\062\uffe7\001\002\000\014\025\uffee\042" +
    "\uffee\043\uffee\045\uffee\062\uffee\001\002\000\046\013\ufff7" +
    "\014\ufff7\021\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\045\ufff7\062\ufff7\001\002\000\044\013" +
    "\uffdd\014\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\043\uffdd\045\uffdd\062\uffdd\001\002\000\022\006\103" +
    "\010\114\015\104\024\075\026\113\063\112\064\117\065" +
    "\101\001\002\000\022\006\103\010\114\015\104\024\075" +
    "\026\113\063\112\064\117\065\101\001\002\000\022\006" +
    "\103\010\114\015\104\024\075\026\113\063\112\064\117" +
    "\065\101\001\002\000\022\006\103\010\114\015\104\024" +
    "\075\026\113\063\112\064\117\065\101\001\002\000\022" +
    "\006\103\010\114\015\104\024\075\026\113\063\112\064" +
    "\117\065\101\001\002\000\022\006\103\010\114\015\104" +
    "\024\075\026\113\063\112\064\117\065\101\001\002\000" +
    "\022\006\103\010\114\015\104\024\075\026\113\063\112" +
    "\064\117\065\101\001\002\000\022\006\103\010\114\015" +
    "\104\024\075\026\113\063\112\064\117\065\101\001\002" +
    "\000\022\006\103\010\114\015\104\024\075\026\113\063" +
    "\112\064\117\065\101\001\002\000\022\006\103\010\114" +
    "\015\104\024\075\026\113\063\112\064\117\065\101\001" +
    "\002\000\022\006\103\010\114\015\104\024\075\026\113" +
    "\063\112\064\117\065\101\001\002\000\022\006\103\010" +
    "\114\015\104\024\075\026\113\063\112\064\117\065\101" +
    "\001\002\000\030\014\127\025\uffeb\026\121\027\133\030" +
    "\131\031\125\032\123\042\uffeb\043\uffeb\045\uffeb\062\uffeb" +
    "\001\002\000\044\013\uffe4\014\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\123\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\045\uffe4\062\uffe4\001" +
    "\002\000\030\014\127\025\uffe9\026\121\027\133\030\131" +
    "\031\125\032\123\042\uffe9\043\uffe9\045\uffe9\062\uffe9\001" +
    "\002\000\044\013\uffe3\014\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\123\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3\062\uffe3\001\002" +
    "\000\030\014\127\025\uffea\026\121\027\133\030\131\031" +
    "\125\032\123\042\uffea\043\uffea\045\uffea\062\uffea\001\002" +
    "\000\044\013\uffe6\014\uffe6\025\uffe6\026\uffe6\027\133\030" +
    "\131\031\125\032\123\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\045\uffe6\062\uffe6\001\002\000" +
    "\030\014\127\025\uffec\026\121\027\133\030\131\031\125" +
    "\032\123\042\uffec\043\uffec\045\uffec\062\uffec\001\002\000" +
    "\044\013\uffe2\014\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\123\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\045\uffe2\062\uffe2\001\002\000\030" +
    "\014\127\025\uffe8\026\121\027\133\030\131\031\125\032" +
    "\123\042\uffe8\043\uffe8\045\uffe8\062\uffe8\001\002\000\044" +
    "\013\uffe1\014\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\045\uffe1\062\uffe1\001\002\000\030\014" +
    "\127\025\uffed\026\121\027\133\030\131\031\125\032\123" +
    "\042\uffed\043\uffed\045\uffed\062\uffed\001\002\000\044\013" +
    "\uffe5\014\uffe5\025\uffe5\026\uffe5\027\133\030\131\031\125" +
    "\032\123\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\045\uffe5\062\uffe5\001\002\000\046\013\ufff6" +
    "\014\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\045\ufff6\056\ufff6\062\ufff6\001\002\000\046\013" +
    "\ufff4\014\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\045\ufff4\056\ufff4\062\ufff4\001\002\000\046" +
    "\013\ufff5\014\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\045\ufff5\056\ufff5\062\ufff5\001\002\000" +
    "\044\013\uff9f\014\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\045\uff9f\062\uff9f\001\002\000\024" +
    "\006\103\010\114\015\104\024\075\026\113\044\102\063" +
    "\112\064\117\065\101\001\002\000\024\006\103\010\114" +
    "\015\104\024\075\026\113\044\102\063\112\064\117\065" +
    "\101\001\002\000\014\025\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\062\ufff0\001\002\000\014\025\ufff1\042\ufff1\043\ufff1\045" +
    "\ufff1\062\ufff1\001\002\000\026\006\103\010\114\015\104" +
    "\024\075\026\113\044\102\045\uffb1\063\112\064\117\065" +
    "\101\001\002\000\004\045\uffb2\001\002\000\004\045\164" +
    "\001\002\000\026\006\103\010\114\015\104\024\075\025" +
    "\uffaf\026\113\044\102\063\112\064\117\065\101\001\002" +
    "\000\004\025\uffb6\001\002\000\004\025\uffb0\001\002\000" +
    "\024\006\103\010\114\015\104\024\075\026\113\044\102" +
    "\063\112\064\117\065\101\001\002\000\004\045\171\001" +
    "\002\000\046\004\uffd3\005\uffd3\007\uffd3\011\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\001\002\000\044\013\uffa0\014\uffa0\025\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\045\uffa0\062\uffa0\001" +
    "\002\000\044\013\uffa1\014\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\045\uffa1\062\uffa1\001\002" +
    "\000\014\025\uffef\042\155\043\156\045\uffef\062\uffef\001" +
    "\002\000\004\020\040\001\002\000\044\004\uffb7\005\uffb7" +
    "\007\uffb7\011\uffb7\016\uffb7\017\uffb7\021\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\057\uffb7\060\uffb7\001\002\000\020\014\127\025\200\026" +
    "\121\027\133\030\131\031\125\032\123\001\002\000\044" +
    "\013\uffe0\014\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\045\uffe0\062\uffe0\001\002\000\024\006" +
    "\103\010\114\015\104\024\075\026\113\044\102\063\112" +
    "\064\117\065\101\001\002\000\006\025\205\062\204\001" +
    "\002\000\006\025\uff9b\062\uff9b\001\002\000\024\006\103" +
    "\010\114\015\104\024\075\026\113\044\102\063\112\064" +
    "\117\065\101\001\002\000\004\045\206\001\002\000\044" +
    "\004\uff9c\005\uff9c\007\uff9c\011\uff9c\016\uff9c\017\uff9c\021" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\057\uff9c\060\uff9c\001\002\000\006\025" +
    "\uff9a\062\uff9a\001\002\000\044\004\uffb8\005\uffb8\007\uffb8" +
    "\011\uffb8\016\uffb8\017\uffb8\021\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\057\uffb8" +
    "\060\uffb8\001\002\000\044\004\uffd4\005\uffd4\007\uffd4\011" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\060" +
    "\uffd4\001\002\000\004\010\213\001\002\000\004\023\214" +
    "\001\002\000\004\006\215\001\002\000\006\012\216\045" +
    "\217\001\002\000\004\020\220\001\002\000\044\004\uffa6" +
    "\005\uffa6\007\uffa6\011\uffa6\016\uffa6\017\uffa6\021\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\057\uffa6\060\uffa6\001\002\000\014\010\114\015" +
    "\104\063\112\064\117\065\101\001\002\000\006\021\uffa3" +
    "\062\uffa3\001\002\000\006\021\224\062\223\001\002\000" +
    "\014\010\114\015\104\063\112\064\117\065\101\001\002" +
    "\000\004\045\225\001\002\000\044\004\uffa5\005\uffa5\007" +
    "\uffa5\011\uffa5\016\uffa5\017\uffa5\021\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\057" +
    "\uffa5\060\uffa5\001\002\000\006\021\uffa4\062\uffa4\001\002" +
    "\000\024\006\103\010\114\015\104\024\075\026\113\044" +
    "\102\063\112\064\117\065\101\001\002\000\004\025\231" +
    "\001\002\000\004\020\040\001\002\000\044\004\uffc0\005" +
    "\uffc0\007\uffc0\011\uffc0\016\uffc0\017\uffc0\021\uffc0\046\uffc0" +
    "\047\233\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\057\uffc0\060\uffc0\001\002\000\006\020\040\046\237" +
    "\001\002\000\044\004\uffbe\005\uffbe\007\uffbe\011\uffbe\016" +
    "\uffbe\017\uffbe\021\uffbe\046\uffbe\047\235\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\001" +
    "\002\000\004\020\040\001\002\000\044\004\uffbd\005\uffbd" +
    "\007\uffbd\011\uffbd\016\uffbd\017\uffbd\021\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\057\uffbd\060\uffbd\001\002\000\004\024\241\001\002\000" +
    "\044\004\uffbf\005\uffbf\007\uffbf\011\uffbf\016\uffbf\017\uffbf" +
    "\021\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\057\uffbf\060\uffbf\001\002\000\024" +
    "\006\103\010\114\015\104\024\075\026\113\044\102\063" +
    "\112\064\117\065\101\001\002\000\004\025\243\001\002" +
    "\000\004\020\040\001\002\000\044\004\uffbb\005\uffbb\007" +
    "\uffbb\011\uffbb\016\uffbb\017\uffbb\021\uffbb\046\uffbb\047\043" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\057" +
    "\uffbb\060\uffbb\001\002\000\044\004\uffbc\005\uffbc\007\uffbc" +
    "\011\uffbc\016\uffbc\017\uffbc\021\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc" +
    "\060\uffbc\001\002\000\044\004\uffba\005\uffba\007\uffba\011" +
    "\uffba\016\uffba\017\uffba\021\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\057\uffba\060" +
    "\uffba\001\002\000\024\006\103\010\114\015\104\024\075" +
    "\026\113\044\102\063\112\064\117\065\101\001\002\000" +
    "\004\025\251\001\002\000\004\020\253\001\002\000\044" +
    "\004\uffae\005\uffae\007\uffae\011\uffae\016\uffae\017\uffae\021" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\057\uffae\060\uffae\001\002\000\004\053" +
    "\256\001\002\000\010\021\uffa8\053\256\054\263\001\002" +
    "\000\010\021\uffac\053\uffac\054\uffac\001\002\000\010\010" +
    "\151\063\152\064\153\001\002\000\004\056\260\001\002" +
    "\000\036\004\012\005\064\007\006\011\013\016\020\017" +
    "\017\046\052\047\043\050\045\051\072\052\051\055\047" +
    "\057\065\060\042\001\002\000\044\004\012\005\064\007" +
    "\006\011\013\016\020\017\017\021\uffaa\046\052\047\043" +
    "\050\045\051\072\052\051\053\uffaa\054\uffaa\055\047\057" +
    "\065\060\042\001\002\000\044\004\uffdb\005\uffdb\007\uffdb" +
    "\011\uffdb\016\uffdb\017\uffdb\021\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\057\uffdb" +
    "\060\uffdb\001\002\000\004\056\270\001\002\000\004\021" +
    "\uffa9\001\002\000\010\021\uffab\053\uffab\054\uffab\001\002" +
    "\000\004\021\267\001\002\000\044\004\uffad\005\uffad\007" +
    "\uffad\011\uffad\016\uffad\017\uffad\021\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057" +
    "\uffad\060\uffad\001\002\000\036\004\012\005\064\007\006" +
    "\011\013\016\020\017\017\046\052\047\043\050\045\051" +
    "\072\052\051\055\047\057\065\060\042\001\002\000\040" +
    "\004\012\005\064\007\006\011\013\016\020\017\017\021" +
    "\uffa7\046\052\047\043\050\045\051\072\052\051\055\047" +
    "\057\065\060\042\001\002\000\004\045\274\001\002\000" +
    "\044\004\uff9e\005\uff9e\007\uff9e\011\uff9e\016\uff9e\017\uff9e" +
    "\021\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\057\uff9e\060\uff9e\001\002\000\044" +
    "\004\uff9d\005\uff9d\007\uff9d\011\uff9d\016\uff9d\017\uff9d\021" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\057\uff9d\060\uff9d\001\002\000\024\006" +
    "\103\010\114\015\104\024\075\026\113\044\102\063\112" +
    "\064\117\065\101\001\002\000\004\025\277\001\002\000" +
    "\004\020\040\001\002\000\044\004\uffb9\005\uffb9\007\uffb9" +
    "\011\uffb9\016\uffb9\017\uffb9\021\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\001\002\000\046\002\uffcf\004\uffcf\005\uffcf\007" +
    "\uffcf\011\uffcf\016\uffcf\017\uffcf\021\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057" +
    "\uffcf\060\uffcf\001\002\000\004\006\303\001\002\000\004" +
    "\025\304\001\002\000\004\045\305\001\002\000\044\004" +
    "\uff99\005\uff99\007\uff99\011\uff99\016\uff99\017\uff99\021\uff99" +
    "\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054" +
    "\uff99\055\uff99\057\uff99\060\uff99\001\002\000\014\004\uffd0" +
    "\007\uffd0\011\uffd0\016\uffd0\017\uffd0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\022\002\003\003\007\010\013\012\015\013" +
    "\006\015\004\044\014\045\010\001\001\000\002\001\001" +
    "\000\004\014\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\022\001\001\000\002\001" +
    "\001\000\014\003\007\010\013\013\020\015\004\045\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\024" +
    "\010\026\017\027\020\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\024\010\026\020\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\036\001\001\000\002\001\001\000\044\003\054\004" +
    "\043\005\056\006\062\007\055\010\061\021\040\022\065" +
    "\023\047\025\072\026\060\027\070\030\057\031\067\040" +
    "\053\056\066\060\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\054\005\261\006" +
    "\062\007\055\010\061\021\040\022\065\023\047\025\072" +
    "\026\060\027\070\030\057\031\067\040\053\056\066\060" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\075\032\271\033\114\035\117\036\110\050\107\051" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\024\007\104\010\105" +
    "\011\075\032\076\033\114\035\117\036\110\050\107\051" +
    "\115\052\077\053\106\001\001\000\012\011\075\033\176" +
    "\035\117\036\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\075" +
    "\033\114\035\117\036\110\050\173\051\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\075\033\147\035\117" +
    "\036\110\001\001\000\012\011\075\033\146\035\117\036" +
    "\110\001\001\000\012\011\075\033\145\035\117\036\110" +
    "\001\001\000\012\011\075\033\144\035\117\036\110\001" +
    "\001\000\012\011\075\033\143\035\117\036\110\001\001" +
    "\000\012\011\075\033\142\035\117\036\110\001\001\000" +
    "\012\011\075\033\141\035\117\036\110\001\001\000\012" +
    "\011\075\033\140\035\117\036\110\001\001\000\012\011" +
    "\075\033\137\035\117\036\110\001\001\000\012\011\075" +
    "\033\136\035\117\036\110\001\001\000\012\011\075\033" +
    "\135\035\117\036\110\001\001\000\012\011\075\033\134" +
    "\035\117\036\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\075\033\114\035\117" +
    "\036\110\050\157\051\115\001\001\000\016\011\075\033" +
    "\114\035\117\036\110\050\156\051\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\075\032\161\033" +
    "\114\035\117\036\110\050\107\051\115\054\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\075\032" +
    "\165\033\114\035\117\036\110\050\107\051\115\055\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\075\032\167\033\114\035\117\036\110\050\107\051\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\075\032\202\033\114\035\117\036\110" +
    "\050\107\051\115\057\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\011\075\032\206\033\114\035\117" +
    "\036\110\050\107\051\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\220\041\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\011\075\032" +
    "\227\033\114\035\117\036\110\050\107\051\115\001\001" +
    "\000\002\001\001\000\004\014\231\001\001\000\004\023" +
    "\233\001\001\000\004\014\237\001\001\000\002\001\001" +
    "\000\004\014\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\075\032\241\033\114" +
    "\035\117\036\110\050\107\051\115\001\001\000\002\001" +
    "\001\000\004\014\243\001\001\000\006\023\245\024\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\075\032\247\033\114\035\117\036\110\050\107\051\115" +
    "\001\001\000\002\001\001\000\004\046\251\001\001\000" +
    "\002\001\001\000\006\037\253\042\254\001\001\000\010" +
    "\042\264\043\263\047\265\001\001\000\002\001\001\000" +
    "\004\034\256\001\001\000\002\001\001\000\044\003\054" +
    "\004\260\005\056\006\062\007\055\010\061\021\040\022" +
    "\065\023\047\025\072\026\060\027\070\030\057\031\067" +
    "\040\053\056\066\060\045\001\001\000\042\003\054\005" +
    "\261\006\062\007\055\010\061\021\040\022\065\023\047" +
    "\025\072\026\060\027\070\030\057\031\067\040\053\056" +
    "\066\060\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\054\004\270\005\056\006\062" +
    "\007\055\010\061\021\040\022\065\023\047\025\072\026" +
    "\060\027\070\030\057\031\067\040\053\056\066\060\045" +
    "\001\001\000\042\003\054\005\261\006\062\007\055\010" +
    "\061\021\040\022\065\023\047\025\072\026\060\027\070" +
    "\030\057\031\067\040\053\056\066\060\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\075\032\275\033\114\035\117\036\110\050\107\051" +
    "\115\001\001\000\002\001\001\000\004\014\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer parser;

    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser=parser;
        this.symbolFactory = new DefaultSymbolFactory();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque ::= OPEN_BLOCK CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametroAux ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametro ::= nombrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // case_stmt ::= CASE literales_num COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arreglo ::= tipos OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arreglo ::= tipos OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET IDENTIFIER EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // negacion ::= MINUS literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
