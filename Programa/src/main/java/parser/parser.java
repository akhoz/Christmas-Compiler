
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import tables.TokenInfo;
import destCodeGenerator.*;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\041\004\000\002\042" +
    "\004\000\002\042\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\010\004\000\002\010\004" +
    "\000\002\032\003\000\002\052\005\000\002\052\005\000" +
    "\002\052\004\000\002\052\003\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\004" +
    "\000\002\004\003\000\002\004\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\065\006" +
    "\000\002\006\004\000\002\007\006\000\002\012\003\000" +
    "\002\012\004\000\002\013\004\000\002\014\005\000\002" +
    "\014\004\000\002\014\005\000\002\063\003\000\002\064" +
    "\003\000\002\015\004\000\002\015\004\000\002\016\004" +
    "\000\002\016\005\000\002\017\003\000\002\017\005\000" +
    "\002\017\004\000\002\020\003\000\002\020\003\000\002" +
    "\067\006\000\002\070\002\000\002\070\003\000\002\070" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\007\000\002\022\011\000\002" +
    "\022\010\000\002\023\011\000\002\024\002\000\002\024" +
    "\003\000\002\024\004\000\002\025\007\000\002\031\004" +
    "\000\002\027\007\000\002\054\007\000\002\055\003\000" +
    "\002\055\003\000\002\055\005\000\002\055\002\000\002" +
    "\056\003\000\002\056\005\000\002\056\002\000\002\057" +
    "\003\000\002\057\005\000\002\057\002\000\002\026\007" +
    "\000\002\050\006\000\002\037\003\000\002\037\004\000" +
    "\002\044\006\000\002\051\003\000\002\051\002\000\002" +
    "\045\005\000\002\040\004\000\002\040\010\000\002\071" +
    "\005\000\002\066\005\000\002\066\005\000\002\072\004" +
    "\000\002\043\005\000\002\043\003\000\002\035\003\000" +
    "\002\035\004\000\002\035\004\000\002\036\004\000\002" +
    "\030\004\000\002\030\005\000\002\060\007\000\002\061" +
    "\003\000\002\061\005\000\002\062\007\000\002\002\003" +
    "\000\002\002\003\000\002\046\004\000\002\046\003\000" +
    "\002\047\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\016\003\016\004\012\007\006\011\013\016" +
    "\022\017\021\001\002\000\004\002\373\001\002\000\004" +
    "\020\062\001\002\000\006\006\ufffd\061\ufffd\001\002\000" +
    "\016\003\uffc5\004\uffc5\007\uffc5\011\uffc5\016\uffc5\017\uffc5" +
    "\001\002\000\006\006\060\061\057\001\002\000\004\002" +
    "\uff77\001\002\000\006\006\ufffa\061\ufffa\001\002\000\006" +
    "\006\ufffc\061\ufffc\001\002\000\004\024\033\001\002\000" +
    "\004\002\uff7a\001\002\000\012\002\ufffe\003\ufffe\020\030" +
    "\045\ufffe\001\002\000\016\003\016\004\012\007\006\011" +
    "\013\016\022\017\021\001\002\000\006\002\uff79\045\023" +
    "\001\002\000\006\006\ufffb\061\ufffb\001\002\000\006\006" +
    "\ufff9\061\ufff9\001\002\000\010\024\uffef\025\uffef\062\uffef" +
    "\001\002\000\016\003\uffc4\004\uffc4\007\uffc4\011\uffc4\016" +
    "\uffc4\017\uffc4\001\002\000\004\002\uff78\001\002\000\004" +
    "\045\023\001\002\000\014\002\000\003\031\021\000\025" +
    "\000\045\000\001\002\000\004\020\uffbc\001\002\000\014" +
    "\002\uffff\003\uffff\021\uffff\025\uffff\045\uffff\001\002\000" +
    "\004\020\uffbd\001\002\000\020\003\040\004\012\007\006" +
    "\011\013\016\022\017\021\025\042\001\002\000\006\025" +
    "\uffb5\062\uffb5\001\002\000\004\006\050\001\002\000\006" +
    "\025\uffb9\062\uffb9\001\002\000\006\025\uffb6\062\uffb6\001" +
    "\002\000\010\003\ufffe\025\047\045\ufffe\001\002\000\006" +
    "\025\044\062\043\001\002\000\004\020\uffbb\001\002\000" +
    "\016\003\046\004\012\007\006\011\013\016\022\017\021" +
    "\001\002\000\004\020\uffba\001\002\000\006\025\uffb8\062" +
    "\uffb8\001\002\000\012\003\ufffe\021\ufffe\025\ufffe\045\ufffe" +
    "\001\002\000\006\025\uffb7\062\uffb7\001\002\000\014\012" +
    "\ufff0\022\051\025\ufff0\045\ufff0\062\ufff0\001\002\000\006" +
    "\006\054\010\053\001\002\000\012\012\uff8a\025\uff8a\045" +
    "\uff8a\062\uff8a\001\002\000\004\023\056\001\002\000\004" +
    "\023\055\001\002\000\046\012\uff88\013\uff88\014\uff88\025" +
    "\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\045" +
    "\uff88\062\uff88\001\002\000\046\012\uff89\013\uff89\014\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\045\uff89\062\uff89\001\002\000\004\020\062\001\002\000" +
    "\006\012\ufff0\024\ufff0\001\002\000\044\003\046\004\012" +
    "\005\104\006\123\007\006\011\013\016\022\017\021\021" +
    "\113\046\076\047\112\050\115\051\067\052\106\055\101" +
    "\057\121\060\114\001\002\000\044\003\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\011\uffbf\016\uffbf\017\uffbf\021\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\055\uffbf\057" +
    "\uffbf\060\uffbf\001\002\000\004\002\uff76\001\002\000\004" +
    "\045\371\001\002\000\050\003\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\011\uffd0\016\uffd0\017\uffd0\021\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\057\uffd0\060\uffd0\001\002\000\050\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\057\uffce\060\uffce\001\002\000\004\024" +
    "\337\001\002\000\050\003\uffaa\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\011\uffaa\016\uffaa\017\uffaa\021\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\050\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\011\uffaf\016\uffaf\017\uffaf\021\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\057\uffaf\060\uffaf\001\002\000\050\003\uffae" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\016\uffae\017" +
    "\uffae\021\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\057\uffae\060\uffae\001\002\000" +
    "\050\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\016\uffcd\017\uffcd\021\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd" +
    "\001\002\000\006\021\113\045\301\001\002\000\050\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\016\uffab" +
    "\017\uffab\021\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\001\002" +
    "\000\004\024\327\001\002\000\006\012\316\045\317\001" +
    "\002\000\044\003\046\004\012\005\104\006\123\007\006" +
    "\011\013\016\022\017\021\021\113\046\076\047\112\050" +
    "\115\051\067\052\106\055\101\057\121\060\114\001\002" +
    "\000\030\003\046\006\134\010\145\015\136\024\127\026" +
    "\144\044\132\045\312\063\143\064\147\065\133\001\002" +
    "\000\050\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\057\uffcc\060" +
    "\uffcc\001\002\000\050\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\016\uffd1\017\uffd1\021\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\057\uffd1\060\uffd1\001\002\000\004\045\311\001\002\000" +
    "\050\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\016\uffad\017\uffad\021\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad" +
    "\001\002\000\004\024\264\001\002\000\050\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\011\uffac\016\uffac\017\uffac" +
    "\021\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\057\uffac\060\uffac\001\002\000\050" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\016" +
    "\uffd2\017\uffd2\021\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\060\uffd2\001" +
    "\002\000\052\002\uffc1\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\016\uffc1\017\uffc1\021\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\057\uffc1\060\uffc1\001\002\000\004\046\253\001\002\000" +
    "\052\002\uffbe\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\016\uffbe\017\uffbe\021\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\057\uffbe" +
    "\060\uffbe\001\002\000\004\024\247\001\002\000\004\024" +
    "\243\001\002\000\050\003\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\011\uffd4\016\uffd4\017\uffd4\021\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\057\uffd4\060\uffd4\001\002\000\050\003\uffb0\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\011\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\057\uffb0\060\uffb0\001\002\000\006\012\237" +
    "\045\240\001\002\000\004\024\230\001\002\000\050\003" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf\001\002" +
    "\000\010\012\124\024\126\045\125\001\002\000\026\003" +
    "\046\006\134\010\145\015\136\024\127\026\144\044\132" +
    "\063\143\064\147\065\133\001\002\000\050\003\uffca\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\011\uffca\016\uffca\017\uffca" +
    "\021\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053" +
    "\uffca\054\uffca\055\uffca\057\uffca\060\uffca\001\002\000\032" +
    "\003\046\006\134\010\145\015\136\024\127\025\uffb3\026" +
    "\144\044\132\062\uffb3\063\143\064\147\065\133\001\002" +
    "\000\024\003\046\006\134\010\145\015\136\024\127\026" +
    "\144\063\143\064\147\065\133\001\002\000\044\013\uffda" +
    "\014\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\045\uffda\062\uffda\001\002\000\006\025\uffb2\062" +
    "\uffb2\001\002\000\026\003\046\006\134\010\145\015\136" +
    "\024\127\026\144\044\132\063\143\064\147\065\133\001" +
    "\002\000\046\013\ufff5\014\ufff5\021\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\062\ufff5" +
    "\001\002\000\054\013\uffdb\014\uffdb\022\051\024\126\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\222" +
    "\034\220\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\045\uffdb\062\uffdb\001\002\000\044\013\uffd7" +
    "\014\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\045\uffd7\062\uffd7\001\002\000\046\013\ufff7\014" +
    "\ufff7\021\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\045\ufff7\062\ufff7\001\002\000\006\025\217" +
    "\045\216\001\002\000\044\013\uffd8\014\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\045\uffd8\062" +
    "\uffd8\001\002\000\014\025\uffee\042\212\043\213\045\uffee" +
    "\062\uffee\001\002\000\044\013\uff84\014\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\045\uff84\062" +
    "\uff84\001\002\000\046\013\ufff6\014\ufff6\021\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\062\ufff6\001\002\000\010\010\206\063\207\064\210\001" +
    "\002\000\046\013\ufff8\014\ufff8\021\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\062\ufff8" +
    "\001\002\000\044\013\157\014\164\025\uffe3\026\156\027" +
    "\170\030\166\031\162\032\160\035\163\036\171\037\165" +
    "\040\167\041\161\042\uffe3\043\uffe3\045\uffe3\062\uffe3\001" +
    "\002\000\046\013\ufff4\014\ufff4\021\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\045\ufff4\062\ufff4" +
    "\001\002\000\014\025\uffea\042\uffea\043\uffea\045\uffea\062" +
    "\uffea\001\002\000\044\013\uffd9\014\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045\uffd9\062\uffd9" +
    "\001\002\000\006\025\154\062\153\001\002\000\026\003" +
    "\046\006\134\010\145\015\136\024\127\026\144\044\132" +
    "\063\143\064\147\065\133\001\002\000\044\013\uffb4\014" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\045\uffb4\062\uffb4\001\002\000\006\025\uffb1\062\uffb1" +
    "\001\002\000\024\003\046\006\134\010\145\015\136\024" +
    "\127\026\144\063\143\064\147\065\133\001\002\000\024" +
    "\003\046\006\134\010\145\015\136\024\127\026\144\063" +
    "\143\064\147\065\133\001\002\000\024\003\046\006\134" +
    "\010\145\015\136\024\127\026\144\063\143\064\147\065" +
    "\133\001\002\000\024\003\046\006\134\010\145\015\136" +
    "\024\127\026\144\063\143\064\147\065\133\001\002\000" +
    "\024\003\046\006\134\010\145\015\136\024\127\026\144" +
    "\063\143\064\147\065\133\001\002\000\024\003\046\006" +
    "\134\010\145\015\136\024\127\026\144\063\143\064\147" +
    "\065\133\001\002\000\024\003\046\006\134\010\145\015" +
    "\136\024\127\026\144\063\143\064\147\065\133\001\002" +
    "\000\024\003\046\006\134\010\145\015\136\024\127\026" +
    "\144\063\143\064\147\065\133\001\002\000\024\003\046" +
    "\006\134\010\145\015\136\024\127\026\144\063\143\064" +
    "\147\065\133\001\002\000\024\003\046\006\134\010\145" +
    "\015\136\024\127\026\144\063\143\064\147\065\133\001" +
    "\002\000\024\003\046\006\134\010\145\015\136\024\127" +
    "\026\144\063\143\064\147\065\133\001\002\000\024\003" +
    "\046\006\134\010\145\015\136\024\127\026\144\063\143" +
    "\064\147\065\133\001\002\000\030\014\164\025\uffe7\026" +
    "\156\027\170\030\166\031\162\032\160\042\uffe7\043\uffe7" +
    "\045\uffe7\062\uffe7\001\002\000\044\013\uffe0\014\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\160\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\045" +
    "\uffe0\062\uffe0\001\002\000\030\014\164\025\uffe5\026\156" +
    "\027\170\030\166\031\162\032\160\042\uffe5\043\uffe5\045" +
    "\uffe5\062\uffe5\001\002\000\044\013\uffdf\014\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\160\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\045\uffdf" +
    "\062\uffdf\001\002\000\030\014\164\025\uffe6\026\156\027" +
    "\170\030\166\031\162\032\160\042\uffe6\043\uffe6\045\uffe6" +
    "\062\uffe6\001\002\000\044\013\uffe2\014\uffe2\025\uffe2\026" +
    "\uffe2\027\170\030\166\031\162\032\160\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\045\uffe2\062" +
    "\uffe2\001\002\000\030\014\164\025\uffe8\026\156\027\170" +
    "\030\166\031\162\032\160\042\uffe8\043\uffe8\045\uffe8\062" +
    "\uffe8\001\002\000\044\013\uffde\014\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\160\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045\uffde\062\uffde" +
    "\001\002\000\030\014\164\025\uffe4\026\156\027\170\030" +
    "\166\031\162\032\160\042\uffe4\043\uffe4\045\uffe4\062\uffe4" +
    "\001\002\000\044\013\uffdd\014\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\062\uffdd\001" +
    "\002\000\030\014\164\025\uffe9\026\156\027\170\030\166" +
    "\031\162\032\160\042\uffe9\043\uffe9\045\uffe9\062\uffe9\001" +
    "\002\000\044\013\uffe1\014\uffe1\025\uffe1\026\uffe1\027\170" +
    "\030\166\031\162\032\160\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\062\uffe1\001\002" +
    "\000\046\013\ufff3\014\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\045\ufff3\056\ufff3\062\ufff3\001" +
    "\002\000\046\013\ufff1\014\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\056\ufff1\062\ufff1" +
    "\001\002\000\046\013\ufff2\014\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\056\ufff2\062" +
    "\ufff2\001\002\000\044\013\uff81\014\uff81\025\uff81\026\uff81" +
    "\027\uff81\030\uff81\031\uff81\032\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\041\uff81\042\uff81\043\uff81\045\uff81\062\uff81" +
    "\001\002\000\026\003\046\006\134\010\145\015\136\024" +
    "\127\026\144\044\132\063\143\064\147\065\133\001\002" +
    "\000\026\003\046\006\134\010\145\015\136\024\127\026" +
    "\144\044\132\063\143\064\147\065\133\001\002\000\014" +
    "\025\uffec\042\uffec\043\uffec\045\uffec\062\uffec\001\002\000" +
    "\014\025\uffed\042\uffed\043\uffed\045\uffed\062\uffed\001\002" +
    "\000\044\013\uffd6\014\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\045\uffd6\062\uffd6\001\002\000" +
    "\044\013\uffd5\014\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\045\uffd5\062\uffd5\001\002\000\044" +
    "\013\uff82\014\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\032\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\045\uff82\062\uff82\001\002\000\044\013" +
    "\uff87\014\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87" +
    "\032\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\045\uff87\062\uff87\001\002\000\044\013\uff83" +
    "\014\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\045\uff83\062\uff83\001\002\000\014\025\uffeb\042" +
    "\212\043\213\045\uffeb\062\uffeb\001\002\000\020\014\164" +
    "\025\225\026\156\027\170\030\166\031\162\032\160\001" +
    "\002\000\044\013\uffdc\014\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc\062\uffdc\001\002" +
    "\000\004\045\227\001\002\000\050\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\011\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\001\002\000\026\003\046" +
    "\006\134\010\145\015\136\024\127\026\144\044\132\063" +
    "\143\064\147\065\133\001\002\000\006\025\uff7d\062\uff7d" +
    "\001\002\000\006\025\234\062\233\001\002\000\026\003" +
    "\046\006\134\010\145\015\136\024\127\026\144\044\132" +
    "\063\143\064\147\065\133\001\002\000\004\045\235\001" +
    "\002\000\050\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e" +
    "\011\uff7e\016\uff7e\017\uff7e\021\uff7e\046\uff7e\047\uff7e\050" +
    "\uff7e\051\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\057\uff7e" +
    "\060\uff7e\001\002\000\006\025\uff7c\062\uff7c\001\002\000" +
    "\026\003\046\006\134\010\145\015\136\024\127\026\144" +
    "\044\132\063\143\064\147\065\133\001\002\000\050\003" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\016\uffc7" +
    "\017\uffc7\021\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\060\uffc7\001\002" +
    "\000\004\045\242\001\002\000\052\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\011\uffc6\016\uffc6\017\uffc6\021\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\057\uffc6\060\uffc6\062\uffc6\001\002\000\026" +
    "\003\046\006\134\010\145\015\136\024\127\026\144\044" +
    "\132\063\143\064\147\065\133\001\002\000\004\025\245" +
    "\001\002\000\004\020\062\001\002\000\050\003\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\011\uffa2\016\uffa2\017\uffa2" +
    "\021\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\057\uffa2\060\uffa2\001\002\000\004" +
    "\006\250\001\002\000\004\025\251\001\002\000\004\045" +
    "\252\001\002\000\050\003\uff7b\004\uff7b\005\uff7b\006\uff7b" +
    "\007\uff7b\011\uff7b\016\uff7b\017\uff7b\021\uff7b\046\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\057\uff7b\060\uff7b\001\002\000\004\024\254\001\002\000" +
    "\026\003\046\006\134\010\145\015\136\024\127\026\144" +
    "\044\132\063\143\064\147\065\133\001\002\000\004\025" +
    "\256\001\002\000\004\020\062\001\002\000\050\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011\uffa5\016\uffa5\017" +
    "\uffa5\021\uffa5\046\uffa5\047\260\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\057\uffa5\060\uffa5\001\002\000" +
    "\006\020\062\046\253\001\002\000\050\003\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\011\uffa6\016\uffa6\017\uffa6\021" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\057\uffa6\060\uffa6\001\002\000\050\003" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\011\uffa4\016\uffa4" +
    "\017\uffa4\021\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\057\uffa4\060\uffa4\001\002" +
    "\000\050\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\011" +
    "\uffa3\016\uffa3\017\uffa3\021\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\057\uffa3\060" +
    "\uffa3\001\002\000\026\003\046\006\134\010\145\015\136" +
    "\024\127\026\144\044\132\063\143\064\147\065\133\001" +
    "\002\000\004\025\266\001\002\000\004\020\270\001\002" +
    "\000\050\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\011" +
    "\uff94\016\uff94\017\uff94\021\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\057\uff94\060" +
    "\uff94\001\002\000\004\053\273\001\002\000\010\021\uff92" +
    "\053\uff92\054\uff92\001\002\000\010\021\uff8e\053\273\054" +
    "\302\001\002\000\010\010\206\063\207\064\210\001\002" +
    "\000\004\056\275\001\002\000\042\003\046\004\012\005" +
    "\104\006\123\007\006\011\013\016\022\017\021\046\076" +
    "\047\112\050\115\051\067\052\106\055\101\057\121\060" +
    "\114\001\002\000\004\045\301\001\002\000\050\003\046" +
    "\004\012\005\104\006\123\007\006\011\013\016\022\017" +
    "\021\021\uff90\046\076\047\112\050\115\051\067\052\106" +
    "\053\uff90\054\uff90\055\101\057\121\060\114\001\002\000" +
    "\050\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\046\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3" +
    "\001\002\000\054\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\011\uffc9\012\uffef\016\uffc9\017\uffc9\021\uffc9\045\uffef" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\057\uffc9\060\uffc9\001\002\000\004\056\307" +
    "\001\002\000\004\021\uff8f\001\002\000\004\021\306\001" +
    "\002\000\010\021\uff91\053\uff91\054\uff91\001\002\000\050" +
    "\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\011\uff93\016" +
    "\uff93\017\uff93\021\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\057\uff93\060\uff93\001" +
    "\002\000\042\003\046\004\012\005\104\006\123\007\006" +
    "\011\013\016\022\017\021\046\076\047\112\050\115\051" +
    "\067\052\106\055\101\057\121\060\114\001\002\000\044" +
    "\003\046\004\012\005\104\006\123\007\006\011\013\016" +
    "\022\017\021\021\uff8d\046\076\047\112\050\115\051\067" +
    "\052\106\055\101\057\121\060\114\001\002\000\050\003" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\011\uffa1\016\uffa1" +
    "\017\uffa1\021\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\057\uffa1\060\uffa1\001\002" +
    "\000\050\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\011" +
    "\uff80\016\uff80\017\uff80\021\uff80\046\uff80\047\uff80\050\uff80" +
    "\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\057\uff80\060" +
    "\uff80\001\002\000\004\045\314\001\002\000\050\003\uff7f" +
    "\004\uff7f\005\uff7f\006\uff7f\007\uff7f\011\uff7f\016\uff7f\017" +
    "\uff7f\021\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f" +
    "\053\uff7f\054\uff7f\055\uff7f\057\uff7f\060\uff7f\001\002\000" +
    "\052\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\016\uffc2\017\uffc2\021\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2" +
    "\060\uffc2\001\002\000\004\020\320\001\002\000\050\003" +
    "\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\011\uff8c\016\uff8c" +
    "\017\uff8c\021\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\057\uff8c\060\uff8c\001\002" +
    "\000\014\010\145\015\136\063\143\064\147\065\133\001" +
    "\002\000\006\021\uff85\062\uff85\001\002\000\006\021\324" +
    "\062\323\001\002\000\014\010\145\015\136\063\143\064" +
    "\147\065\133\001\002\000\004\045\325\001\002\000\050" +
    "\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\016" +
    "\uff8b\017\uff8b\021\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b" +
    "\052\uff8b\053\uff8b\054\uff8b\055\uff8b\057\uff8b\060\uff8b\001" +
    "\002\000\006\021\uff86\062\uff86\001\002\000\026\003\046" +
    "\006\134\010\145\015\136\024\127\026\144\044\132\063" +
    "\143\064\147\065\133\001\002\000\004\025\331\001\002" +
    "\000\004\020\062\001\002\000\050\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\011\uffa9\016\uffa9\017\uffa9\021\uffa9" +
    "\046\uffa9\047\333\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\057\uffa9\060\uffa9\001\002\000\006\020\062" +
    "\046\253\001\002\000\050\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\011\uffa7\016\uffa7\017\uffa7\021\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\057\uffa7\060\uffa7\001\002\000\050\003\uffa8\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\011\uffa8\016\uffa8\017\uffa8\021" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\057\uffa8\060\uffa8\001\002\000\052\002" +
    "\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060\uffc0" +
    "\001\002\000\042\003\046\004\012\006\342\007\006\010" +
    "\145\011\013\015\136\016\022\017\021\024\127\026\144" +
    "\044\132\062\uff9b\063\143\064\147\065\133\001\002\000" +
    "\004\062\uff9d\001\002\000\004\025\367\001\002\000\052" +
    "\012\365\013\uffdb\014\uffdb\022\051\024\126\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\222\034\220\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\062" +
    "\uffdb\001\002\000\004\006\060\001\002\000\006\025\217" +
    "\045\364\001\002\000\004\062\uff9e\001\002\000\004\012" +
    "\237\001\002\000\004\062\350\001\002\000\030\003\046" +
    "\006\352\010\145\015\136\024\127\026\144\044\132\062" +
    "\uff98\063\143\064\147\065\133\001\002\000\004\062\uff9a" +
    "\001\002\000\052\012\362\013\uffdb\014\uffdb\022\051\024" +
    "\126\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\222" +
    "\034\220\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\062\uffdb\001\002\000\004\062\354\001\002" +
    "\000\030\003\046\006\356\010\145\015\136\024\127\025" +
    "\uff95\026\144\044\132\063\143\064\147\065\133\001\002" +
    "\000\004\025\uff97\001\002\000\052\012\360\013\uffdb\014" +
    "\uffdb\022\051\024\126\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\222\034\220\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000\004" +
    "\025\uff9f\001\002\000\026\003\046\006\134\010\145\015" +
    "\136\024\127\026\144\044\132\063\143\064\147\065\133" +
    "\001\002\000\004\025\uff96\001\002\000\026\003\046\006" +
    "\134\010\145\015\136\024\127\026\144\044\132\063\143" +
    "\064\147\065\133\001\002\000\004\062\uff99\001\002\000" +
    "\042\012\uffef\013\uffd6\014\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\062\uffd6\001\002\000\026\003\046" +
    "\006\134\010\145\015\136\024\127\026\144\044\132\063" +
    "\143\064\147\065\133\001\002\000\004\062\uff9c\001\002" +
    "\000\004\020\062\001\002\000\050\003\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\011\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\057\uffa0\060\uffa0\001\002\000\050\003\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\016\uffcb\017" +
    "\uffcb\021\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\001\002\000" +
    "\016\003\uffc3\004\uffc3\007\uffc3\011\uffc3\016\uffc3\017\uffc3" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\024\002\003\003\007\010\013\012\016\013" +
    "\006\015\004\041\017\046\014\047\010\001\001\000\002" +
    "\001\001\000\006\014\371\063\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\031\001" +
    "\001\000\002\001\001\000\004\042\026\001\001\000\016" +
    "\003\007\010\013\013\023\015\004\041\025\047\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\034\010\036\017" +
    "\040\020\035\041\025\071\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\034\010\036\020\044\041\025\071\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\026" +
    "\001\001\000\002\001\001\000\004\066\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\062\063\060\001\001\000\002\001\001\000\056\003\034" +
    "\004\077\005\115\006\107\007\102\010\117\021\064\022" +
    "\116\023\070\025\071\026\104\027\106\030\074\031\067" +
    "\040\121\041\073\060\065\062\072\064\110\065\101\067" +
    "\063\071\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\034\005\277\006\107\007\102\010\117\021\064\022" +
    "\116\023\070\025\071\026\104\027\106\030\074\031\067" +
    "\040\121\041\275\060\065\062\072\064\314\065\101\067" +
    "\063\071\076\001\001\000\026\011\127\032\312\033\145" +
    "\035\150\036\141\041\136\052\140\053\147\067\137\072" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\127\032\225\033\145\035\150\036\141\041\136\052\140" +
    "\053\147\067\137\072\134\001\001\000\002\001\001\000" +
    "\030\011\127\032\130\033\145\035\150\036\141\041\136" +
    "\052\140\053\147\067\137\070\151\072\134\001\001\000" +
    "\020\011\127\033\223\035\150\036\141\041\136\067\137" +
    "\072\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\127\033\145\035\150\036\141\041\136\052\222" +
    "\053\147\067\137\072\134\001\001\000\002\001\001\000" +
    "\004\066\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\127\032\154\033\145\035\150\036\141\041\136\052" +
    "\140\053\147\067\137\072\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\127\033\204\035\150\036" +
    "\141\041\136\067\137\072\134\001\001\000\020\011\127" +
    "\033\203\035\150\036\141\041\136\067\137\072\134\001" +
    "\001\000\020\011\127\033\202\035\150\036\141\041\136" +
    "\067\137\072\134\001\001\000\020\011\127\033\201\035" +
    "\150\036\141\041\136\067\137\072\134\001\001\000\020" +
    "\011\127\033\200\035\150\036\141\041\136\067\137\072" +
    "\134\001\001\000\020\011\127\033\177\035\150\036\141" +
    "\041\136\067\137\072\134\001\001\000\020\011\127\033" +
    "\176\035\150\036\141\041\136\067\137\072\134\001\001" +
    "\000\020\011\127\033\175\035\150\036\141\041\136\067" +
    "\137\072\134\001\001\000\020\011\127\033\174\035\150" +
    "\036\141\041\136\067\137\072\134\001\001\000\020\011" +
    "\127\033\173\035\150\036\141\041\136\067\137\072\134" +
    "\001\001\000\020\011\127\033\172\035\150\036\141\041" +
    "\136\067\137\072\134\001\001\000\020\011\127\033\171" +
    "\035\150\036\141\041\136\067\137\072\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\011\127\033\145\035\150\036\141\041\136\052\214\053" +
    "\147\067\137\072\134\001\001\000\024\011\127\033\145" +
    "\035\150\036\141\041\136\052\213\053\147\067\137\072" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\011\127\032\230\033\145\035\150\036\141\041\136" +
    "\052\140\053\147\061\231\067\137\072\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\127\032\235" +
    "\033\145\035\150\036\141\041\136\052\140\053\147\067" +
    "\137\072\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\127\032\240\033\145\035" +
    "\150\036\141\041\136\052\140\053\147\067\137\072\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\127\032\243\033\145\035\150\036\141" +
    "\041\136\052\140\053\147\067\137\072\134\001\001\000" +
    "\002\001\001\000\006\014\245\063\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\127" +
    "\032\254\033\145\035\150\036\141\041\136\052\140\053" +
    "\147\067\137\072\134\001\001\000\002\001\001\000\006" +
    "\014\256\063\060\001\001\000\006\023\261\024\260\001" +
    "\001\000\006\014\262\063\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\127\032" +
    "\264\033\145\035\150\036\141\041\136\052\140\053\147" +
    "\067\137\072\134\001\001\000\002\001\001\000\004\050" +
    "\266\001\001\000\002\001\001\000\006\037\271\044\270" +
    "\001\001\000\002\001\001\000\010\044\304\045\302\051" +
    "\303\001\001\000\004\034\273\001\001\000\002\001\001" +
    "\000\054\003\034\004\276\005\115\006\107\007\102\010" +
    "\117\021\064\022\116\023\070\025\071\026\104\027\106" +
    "\030\074\031\067\040\121\041\275\060\065\062\072\065" +
    "\101\067\063\071\076\001\001\000\002\001\001\000\052" +
    "\003\034\005\277\006\107\007\102\010\117\021\064\022" +
    "\116\023\070\025\071\026\104\027\106\030\074\031\067" +
    "\040\121\041\275\060\065\062\072\065\101\067\063\071" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\003\034\004\307\005\115" +
    "\006\107\007\102\010\117\021\064\022\116\023\070\025" +
    "\071\026\104\027\106\030\074\031\067\040\121\041\275" +
    "\060\065\062\072\065\101\067\063\071\076\001\001\000" +
    "\052\003\034\005\277\006\107\007\102\010\117\021\064" +
    "\022\116\023\070\025\071\026\104\027\106\030\074\031" +
    "\067\040\121\041\275\060\065\062\072\065\101\067\063" +
    "\071\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\320\043\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\011\127\032\327\033\145\035\150\036\141" +
    "\041\136\052\140\053\147\067\137\072\134\001\001\000" +
    "\002\001\001\000\006\014\331\063\060\001\001\000\004" +
    "\023\333\001\001\000\006\014\334\063\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\342\007\344\010\345\011\127\032\337\033\145\035" +
    "\150\036\141\041\343\052\140\053\147\054\340\055\346" +
    "\067\137\072\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\127\032\350\033\145\035\150\036\141" +
    "\041\136\052\140\053\147\056\352\067\137\072\134\001" +
    "\001\000\002\001\001\000\004\066\220\001\001\000\002" +
    "\001\001\000\030\011\127\032\354\033\145\035\150\036" +
    "\141\041\136\052\140\053\147\057\356\067\137\072\134" +
    "\001\001\000\002\001\001\000\004\066\220\001\001\000" +
    "\002\001\001\000\026\011\127\032\360\033\145\035\150" +
    "\036\141\041\136\052\140\053\147\067\137\072\134\001" +
    "\001\000\002\001\001\000\026\011\127\032\362\033\145" +
    "\035\150\036\141\041\136\052\140\053\147\067\137\072" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\127\032\365\033\145\035\150\036\141\041\136\052" +
    "\140\053\147\067\137\072\134\001\001\000\002\001\001" +
    "\000\006\014\367\063\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    Lexer parser;
    SymbolTable symbolTable = new SymbolTable();
    CodeGenerator codeGenerator;

    // Constructor del parser
    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser = parser;
        this.symbolFactory = new DefaultSymbolFactory();
        this.codeGenerator = new CodeGenerator();

        // Inicializar el ámbito global
        FunctionInfo globalFunction = new FunctionInfo("global", "void",0,0, new ArrayList<>());
        if (!symbolTable.pushFunction(globalFunction)) {
            System.err.println("Error: Función global ya está definida.");
        }
        globalFunction.beginScope();
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error sintactico, linea: " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error sintactico: " + message);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // Reportar el error fatal sin detener el programa
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error fatal sintactico " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error fatal de sintaxis: " + message);
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol info) {
        if (info.value != null) {
            System.err.println("Error no recuperable en la linea " + (info.left + 1) + ", columna " + (info.right + 1));
        }
    }

    @Override
    public int error_sync_size() {
        return 3;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // encontrar_error ::= error encontrar_error_aux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encontrar_error",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encontrar_error_aux ::= encontrar_error_aux error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encontrar_error_aux",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encontrar_error_aux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encontrar_error_aux",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tipos ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Integer.valueOf(i.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = s.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = c.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Boolean.valueOf(b.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Float.valueOf(f.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Obtener el tipo
    String tipo = (String) t;

    // Cast correcto de 'id' a TokenInfo
    TokenInfo token = (TokenInfo) id;

    // Obtener el nombre, línea y columna
    String nombre = token.getValue();
    int linea = token.getLine() + 1;
    int columna = token.getColumn() + 1;

    // Imprimir la información de declaración
    //System.out.println("Declaración de variable '" + nombre + "' de tipo '" + tipo + "' en línea " + linea + ", columna " + columna);

    // Crear el SymbolInfo con la información de posición
    RESULT = new SymbolInfo(nombre, tipo, linea, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nombrar ::= encontrar_error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_aritmetica ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_aritmetica ::= indice_array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_aritmetica ::= encontrar_error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_aritmetica ::= encontrar_error CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= llamada_funcion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= encontrar_error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignar ::= IDENTIFIER EQ expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();
    boolean inserted = currentTable.insert(info.getName(), info);
    if (!inserted) {
        System.err.println("Error semántico: La variable '" + info.getName() + "' ya existe en este ámbito.");
    }
    RESULT = null; // 'creacion' no necesita un valor semántico

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.getCurrentScope();
    boolean inserted = currentTable.insert(info.getName(), info);
    if (!inserted) {
        System.err.println("Error semántico: La variable '" + info.getName() + "' ya existe en este ámbito.");
    }
    System.out.println("Asignación de variable '" + info.getName() + "' con valor '" + e + "'");
    codeGenerator.assignVariableToRegister(info.getName(), e);
    RESULT = null; // 'creacionAsignacion' no necesita un valor semántico

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;
		
        symbolTable.popFunction();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque ::= apertura_bloque sentencias cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque ::= apertura_bloque cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque ::= apertura_bloque encontrar_error cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // apertura_bloque ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentFunction = symbolTable.getCurrentScope();
        if (currentFunction != null) {
            currentFunction.beginScope();
        } else {
            System.err.println("Error: No se puede abrir un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cierre_bloque ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.getCurrentScope();
        if (currentTable != null) {
            currentTable.printScopes();
            currentTable.endScope();
        } else {
            System.err.println("Error: No se puede cerrar un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo funcSymbol = (SymbolInfo) i;
        String funcName = funcSymbol.getName();
        String returnType = funcSymbol.getType();
        System.out.println("\n Función: '" + funcName + "' con tipo de retorno '" + returnType + "'");
        List<SymbolInfo> paramList = (List<SymbolInfo>) e;
        for (SymbolInfo param : paramList) {
            System.out.println("Parámetro: nombre = " + param.getName() + ", tipo = " + param.getType());
        }
        FunctionInfo fInfo = new FunctionInfo(funcName, returnType,0,0, paramList);

        // Insertar la función en la tabla de símbolos
        boolean inserted = symbolTable.pushFunction(fInfo);
        if (!inserted) {
            System.err.println("Error semántico: La función '" + funcName + "' ya existe en este ámbito.");
        }

        // Iniciar el primer scope de la función
        fInfo.beginScope();
        fInfo.insertParamList(paramList);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // encabezadoFuncion ::= error OPEN_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		
    System.out.println("Sin parámetros");
    RESULT = new ArrayList<SymbolInfo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = p;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametroAux ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = (List<SymbolInfo>) pl;
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametroAux ::= error CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametro ::= nombrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametro ::= nombrar_array 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // llamada_funcion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // argumentos ::= argumentos COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // else_if_list_opt ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicion_for ::= inicializacion_opt COMMA condicion_opt COMMA actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // inicializacion_opt ::= IDENTIFIER EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion_opt ::= IDENTIFIER EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // actualizacion_opt ::= IDENTIFIER EQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_stmt ::= CASE literales_num COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // arreglo ::= nombrar_array SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arreglo ::= nombrar_array EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // nombrar_array ::= tipos IDENTIFIER array_size 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar_array",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // array_size ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // array_size ::= OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // indice_array ::= IDENTIFIER array_size 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indice_array",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // negacion ::= MINUS literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // programa ::= encontrar_error 
            {
              Object RESULT =null;
		 System.err.println("Error relacionado a la ausencia o mal estructura de la funcion main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
