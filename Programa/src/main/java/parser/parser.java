
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import tables.SymbolTable;
import tables.SymbolInfo;
import tables.FunctionInfo;
import tables.TokenInfo;
import semanticalAnalysis.Variable;
import semanticalAnalysis.Function;
import semanticalAnalysis.ControlStructureOperations;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\010\004\000\002\032" +
    "\003\000\002\050\005\000\002\050\005\000\002\050\004" +
    "\000\002\050\003\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\063\006\000\002\006" +
    "\004\000\002\007\006\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\014\005\000\002\014\004\000" +
    "\002\014\005\000\002\061\003\000\002\062\003\000\002" +
    "\015\004\000\002\016\004\000\002\016\005\000\002\017" +
    "\003\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\065\006\000\002\066\002\000\002\066\003\000" +
    "\002\066\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\007\000\002\022\011" +
    "\000\002\022\010\000\002\023\011\000\002\024\002\000" +
    "\002\024\003\000\002\024\004\000\002\025\007\000\002" +
    "\031\004\000\002\027\007\000\002\052\007\000\002\053" +
    "\003\000\002\053\003\000\002\053\002\000\002\054\003" +
    "\000\002\054\002\000\002\055\003\000\002\055\002\000" +
    "\002\026\007\000\002\046\006\000\002\037\003\000\002" +
    "\037\004\000\002\042\006\000\002\047\003\000\002\047" +
    "\002\000\002\043\005\000\002\040\004\000\002\040\010" +
    "\000\002\067\005\000\002\064\005\000\002\064\005\000" +
    "\002\070\004\000\002\041\005\000\002\041\003\000\002" +
    "\035\003\000\002\035\004\000\002\035\004\000\002\036" +
    "\004\000\002\030\004\000\002\030\005\000\002\056\007" +
    "\000\002\057\003\000\002\057\005\000\002\060\007\000" +
    "\002\002\003\000\002\002\003\000\002\044\004\000\002" +
    "\044\003\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\016\003\015\004\012\007\006\011\013\016" +
    "\021\017\020\001\002\000\004\002\347\001\002\000\004" +
    "\020\052\001\002\000\006\006\000\061\000\001\002\000" +
    "\014\004\uffc9\007\uffc9\011\uffc9\016\uffc9\017\uffc9\001\002" +
    "\000\006\006\047\061\046\001\002\000\004\002\uff80\001" +
    "\002\000\006\006\ufffd\061\ufffd\001\002\000\006\006\uffff" +
    "\061\uffff\001\002\000\004\024\025\001\002\000\004\002" +
    "\uff82\001\002\000\004\002\uff83\001\002\000\014\004\012" +
    "\007\006\011\013\016\021\017\020\001\002\000\006\006" +
    "\ufffe\061\ufffe\001\002\000\006\006\ufffc\061\ufffc\001\002" +
    "\000\014\004\uffc8\007\uffc8\011\uffc8\016\uffc8\017\uffc8\001" +
    "\002\000\004\002\uff81\001\002\000\004\020\uffc1\001\002" +
    "\000\016\004\012\007\006\011\013\016\021\017\020\025" +
    "\033\001\002\000\006\025\uffbb\062\uffbb\001\002\000\004" +
    "\006\037\001\002\000\006\025\uffbe\062\uffbe\001\002\000" +
    "\006\025\uffbc\062\uffbc\001\002\000\006\025\035\062\034" +
    "\001\002\000\004\020\uffc0\001\002\000\014\004\012\007" +
    "\006\011\013\016\021\017\020\001\002\000\004\020\uffbf" +
    "\001\002\000\006\025\uffbd\062\uffbd\001\002\000\014\012" +
    "\ufff3\022\040\025\ufff3\045\ufff3\062\ufff3\001\002\000\006" +
    "\006\043\010\042\001\002\000\012\012\uff93\025\uff93\045" +
    "\uff93\062\uff93\001\002\000\004\023\045\001\002\000\004" +
    "\023\044\001\002\000\046\012\uff91\013\uff91\014\uff91\025" +
    "\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\045" +
    "\uff91\062\uff91\001\002\000\046\012\uff92\013\uff92\014\uff92" +
    "\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\045\uff92\062\uff92\001\002\000\004\020\052\001\002\000" +
    "\006\012\ufff3\024\ufff3\001\002\000\044\003\070\004\012" +
    "\005\073\006\112\007\006\011\013\016\021\017\020\021" +
    "\102\046\064\047\101\050\104\051\056\052\075\055\067" +
    "\057\110\060\103\001\002\000\004\002\uff7f\001\002\000" +
    "\044\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\055\uffc3\057\uffc3\060\uffc3\001\002\000\004" +
    "\045\345\001\002\000\050\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\016\uffd4\017\uffd4\021\uffd4\046\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\057\uffd4\060\uffd4\001\002\000\050\003\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\057\uffd2\060\uffd2\001\002\000\004\024" +
    "\326\001\002\000\050\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\011\uffb0\016\uffb0\017\uffb0\021\uffb0\046\uffb0\047" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\057\uffb0\060\uffb0\001\002\000\050\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\011\uffb5\016\uffb5\017\uffb5\021\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\057\uffb5\060\uffb5\001\002\000\050\003\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\uffb4\016\uffb4\017" +
    "\uffb4\021\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\057\uffb4\060\uffb4\001\002\000" +
    "\050\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1" +
    "\001\002\000\050\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\011\uffb1\016\uffb1\017\uffb1\021\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\057" +
    "\uffb1\060\uffb1\001\002\000\004\024\317\001\002\000\006" +
    "\012\306\045\307\001\002\000\044\003\266\004\012\005" +
    "\073\006\112\007\006\011\013\016\021\017\020\021\102" +
    "\046\064\047\101\050\104\051\056\052\075\055\067\057" +
    "\110\060\103\001\002\000\030\003\133\006\123\010\134" +
    "\015\125\024\116\026\132\044\122\045\302\063\131\064" +
    "\137\065\121\001\002\000\006\021\102\045\267\001\002" +
    "\000\050\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\001\002\000\050\003\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\011\uffd5\016\uffd5\017\uffd5\021\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\001\002\000\004\045\300\001\002\000" +
    "\050\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\016\uffb3\017\uffb3\021\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3" +
    "\001\002\000\004\024\250\001\002\000\050\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\016\uffb2\017\uffb2" +
    "\021\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\001\002\000\050" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\060\uffd6\001" +
    "\002\000\052\002\uffc5\003\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\011\uffc5\016\uffc5\017\uffc5\021\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\060\uffc5\001\002\000\004\046\237\001\002\000" +
    "\052\002\uffc2\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\011\uffc2\016\uffc2\017\uffc2\021\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\057\uffc2" +
    "\060\uffc2\001\002\000\004\024\233\001\002\000\004\024" +
    "\227\001\002\000\050\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\016\uffd8\017\uffd8\021\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\060\uffd8\001\002\000\050\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\011\uffb6\016\uffb6\017\uffb6\021\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054" +
    "\uffb6\055\uffb6\057\uffb6\060\uffb6\001\002\000\006\012\223" +
    "\045\224\001\002\000\004\024\214\001\002\000\050\003" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\057\uffd3\060\uffd3\001\002" +
    "\000\010\012\113\024\115\045\114\001\002\000\026\003" +
    "\133\006\123\010\134\015\125\024\116\026\132\044\122" +
    "\063\131\064\137\065\121\001\002\000\050\003\uffcf\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\057\uffcf\060\uffcf\001\002\000\032" +
    "\003\133\006\123\010\134\015\125\024\116\025\uffb9\026" +
    "\132\044\122\062\uffb9\063\131\064\137\065\121\001\002" +
    "\000\024\003\133\006\123\010\134\015\125\024\116\026" +
    "\132\063\131\064\137\065\121\001\002\000\044\013\uffdf" +
    "\014\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\043\uffdf\045\uffdf\062\uffdf\001\002\000\006\025\uffb8\062" +
    "\uffb8\001\002\000\046\013\ufff8\014\ufff8\021\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8" +
    "\062\ufff8\001\002\000\026\003\133\006\123\010\134\015" +
    "\125\024\116\026\132\044\122\063\131\064\137\065\121" +
    "\001\002\000\054\013\uffd9\014\uffd9\022\040\024\115\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\206" +
    "\034\204\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\045\uffd9\062\uffd9\001\002\000\044\013\uffdc" +
    "\014\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\045\uffdc\062\uffdc\001\002\000\046\013\ufffa\014" +
    "\ufffa\021\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\062\ufffa\001\002\000\044\013\uffdd" +
    "\014\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\045\uffdd\062\uffdd\001\002\000\014\025\ufff2\042" +
    "\200\043\201\045\ufff2\062\ufff2\001\002\000\044\013\uff8d" +
    "\014\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\045\uff8d\062\uff8d\001\002\000\046\013\ufff9\014" +
    "\ufff9\021\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\045\ufff9\062\ufff9\001\002\000\014\010\134" +
    "\015\125\063\131\064\137\065\121\001\002\000\006\025" +
    "\176\045\175\001\002\000\046\013\ufffb\014\ufffb\021\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\045\ufffb\062\ufffb\001\002\000\044\013\146\014\153\025" +
    "\uffe7\026\145\027\157\030\155\031\151\032\147\035\152" +
    "\036\160\037\154\040\156\041\150\042\uffe7\043\uffe7\045" +
    "\uffe7\062\uffe7\001\002\000\014\025\uffee\042\uffee\043\uffee" +
    "\045\uffee\062\uffee\001\002\000\046\013\ufff7\014\ufff7\021" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\045\ufff7\062\ufff7\001\002\000\044\013\uffde\014\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\045\uffde\062\uffde\001\002\000\006\025\143\062\142\001" +
    "\002\000\026\003\133\006\123\010\134\015\125\024\116" +
    "\026\132\044\122\063\131\064\137\065\121\001\002\000" +
    "\044\013\uffba\014\uffba\025\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\062\uffba\001\002\000\006" +
    "\025\uffb7\062\uffb7\001\002\000\024\003\133\006\123\010" +
    "\134\015\125\024\116\026\132\063\131\064\137\065\121" +
    "\001\002\000\024\003\133\006\123\010\134\015\125\024" +
    "\116\026\132\063\131\064\137\065\121\001\002\000\024" +
    "\003\133\006\123\010\134\015\125\024\116\026\132\063" +
    "\131\064\137\065\121\001\002\000\024\003\133\006\123" +
    "\010\134\015\125\024\116\026\132\063\131\064\137\065" +
    "\121\001\002\000\024\003\133\006\123\010\134\015\125" +
    "\024\116\026\132\063\131\064\137\065\121\001\002\000" +
    "\024\003\133\006\123\010\134\015\125\024\116\026\132" +
    "\063\131\064\137\065\121\001\002\000\024\003\133\006" +
    "\123\010\134\015\125\024\116\026\132\063\131\064\137" +
    "\065\121\001\002\000\024\003\133\006\123\010\134\015" +
    "\125\024\116\026\132\063\131\064\137\065\121\001\002" +
    "\000\024\003\133\006\123\010\134\015\125\024\116\026" +
    "\132\063\131\064\137\065\121\001\002\000\024\003\133" +
    "\006\123\010\134\015\125\024\116\026\132\063\131\064" +
    "\137\065\121\001\002\000\024\003\133\006\123\010\134" +
    "\015\125\024\116\026\132\063\131\064\137\065\121\001" +
    "\002\000\024\003\133\006\123\010\134\015\125\024\116" +
    "\026\132\063\131\064\137\065\121\001\002\000\030\014" +
    "\153\025\uffeb\026\145\027\157\030\155\031\151\032\147" +
    "\042\uffeb\043\uffeb\045\uffeb\062\uffeb\001\002\000\044\013" +
    "\uffe4\014\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\147\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\045\uffe4\062\uffe4\001\002\000\030\014\153" +
    "\025\uffe9\026\145\027\157\030\155\031\151\032\147\042" +
    "\uffe9\043\uffe9\045\uffe9\062\uffe9\001\002\000\044\013\uffe3" +
    "\014\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\147\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\045\uffe3\062\uffe3\001\002\000\030\014\153\025" +
    "\uffea\026\145\027\157\030\155\031\151\032\147\042\uffea" +
    "\043\uffea\045\uffea\062\uffea\001\002\000\044\013\uffe6\014" +
    "\uffe6\025\uffe6\026\uffe6\027\157\030\155\031\151\032\147" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\045\uffe6\062\uffe6\001\002\000\030\014\153\025\uffec" +
    "\026\145\027\157\030\155\031\151\032\147\042\uffec\043" +
    "\uffec\045\uffec\062\uffec\001\002\000\044\013\uffe2\014\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\147\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\045\uffe2\062\uffe2\001\002\000\030\014\153\025\uffe8\026" +
    "\145\027\157\030\155\031\151\032\147\042\uffe8\043\uffe8" +
    "\045\uffe8\062\uffe8\001\002\000\044\013\uffe1\014\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045" +
    "\uffe1\062\uffe1\001\002\000\030\014\153\025\uffed\026\145" +
    "\027\157\030\155\031\151\032\147\042\uffed\043\uffed\045" +
    "\uffed\062\uffed\001\002\000\044\013\uffe5\014\uffe5\025\uffe5" +
    "\026\uffe5\027\157\030\155\031\151\032\147\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\045\uffe5" +
    "\062\uffe5\001\002\000\044\013\uffdb\014\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045\uffdb\062" +
    "\uffdb\001\002\000\044\013\uffda\014\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\062\uffda" +
    "\001\002\000\044\013\uff8a\014\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\035\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\045\uff8a\062\uff8a\001" +
    "\002\000\026\003\133\006\123\010\134\015\125\024\116" +
    "\026\132\044\122\063\131\064\137\065\121\001\002\000" +
    "\026\003\133\006\123\010\134\015\125\024\116\026\132" +
    "\044\122\063\131\064\137\065\121\001\002\000\014\025" +
    "\ufff0\042\ufff0\043\ufff0\045\ufff0\062\ufff0\001\002\000\014" +
    "\025\ufff1\042\ufff1\043\ufff1\045\ufff1\062\ufff1\001\002\000" +
    "\044\013\uff8b\014\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\045\uff8b\062\uff8b\001\002\000\044" +
    "\013\uff90\014\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\045\uff90\062\uff90\001\002\000\044\013" +
    "\uff8c\014\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042" +
    "\uff8c\043\uff8c\045\uff8c\062\uff8c\001\002\000\014\025\uffef" +
    "\042\200\043\201\045\uffef\062\uffef\001\002\000\020\014" +
    "\153\025\211\026\145\027\157\030\155\031\151\032\147" +
    "\001\002\000\044\013\uffe0\014\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\045\uffe0\062\uffe0\001" +
    "\002\000\004\045\213\001\002\000\050\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\011\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\057\uffcc\060\uffcc\001\002\000\026\003" +
    "\133\006\123\010\134\015\125\024\116\026\132\044\122" +
    "\063\131\064\137\065\121\001\002\000\006\025\uff86\062" +
    "\uff86\001\002\000\006\025\220\062\217\001\002\000\026" +
    "\003\133\006\123\010\134\015\125\024\116\026\132\044" +
    "\122\063\131\064\137\065\121\001\002\000\004\045\221" +
    "\001\002\000\050\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\011\uff87\016\uff87\017\uff87\021\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\057" +
    "\uff87\060\uff87\001\002\000\006\025\uff85\062\uff85\001\002" +
    "\000\026\003\133\006\123\010\134\015\125\024\116\026" +
    "\132\044\122\063\131\064\137\065\121\001\002\000\050" +
    "\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\053\uffcb\054\uffcb\055\uffcb\057\uffcb\060\uffcb\001" +
    "\002\000\004\045\226\001\002\000\052\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\016\uffca\017\uffca\021" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\057\uffca\060\uffca\001\002\000" +
    "\026\003\133\006\123\010\134\015\125\024\116\026\132" +
    "\044\122\063\131\064\137\065\121\001\002\000\004\025" +
    "\231\001\002\000\004\020\052\001\002\000\050\003\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\016\uffa8\017" +
    "\uffa8\021\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\057\uffa8\060\uffa8\001\002\000" +
    "\004\006\234\001\002\000\004\025\235\001\002\000\004" +
    "\045\236\001\002\000\050\003\uff84\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\011\uff84\016\uff84\017\uff84\021\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\057\uff84\060\uff84\001\002\000\004\024\240\001\002" +
    "\000\026\003\133\006\123\010\134\015\125\024\116\026" +
    "\132\044\122\063\131\064\137\065\121\001\002\000\004" +
    "\025\242\001\002\000\004\020\052\001\002\000\050\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011\uffab\016\uffab" +
    "\017\uffab\021\uffab\046\uffab\047\244\050\uffab\051\uffab\052" +
    "\uffab\053\uffab\054\uffab\055\uffab\057\uffab\060\uffab\001\002" +
    "\000\006\020\052\046\237\001\002\000\050\003\uffac\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\011\uffac\016\uffac\017\uffac" +
    "\021\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\057\uffac\060\uffac\001\002\000\050" +
    "\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\016" +
    "\uffaa\017\uffaa\021\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\057\uffaa\060\uffaa\001" +
    "\002\000\050\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\011\uffa9\016\uffa9\017\uffa9\021\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\057\uffa9" +
    "\060\uffa9\001\002\000\026\003\133\006\123\010\134\015" +
    "\125\024\116\026\132\044\122\063\131\064\137\065\121" +
    "\001\002\000\004\025\252\001\002\000\004\020\254\001" +
    "\002\000\050\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\011\uff9d\016\uff9d\017\uff9d\021\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\057\uff9d" +
    "\060\uff9d\001\002\000\004\053\257\001\002\000\010\021" +
    "\uff9b\053\uff9b\054\uff9b\001\002\000\010\021\uff97\053\257" +
    "\054\271\001\002\000\010\010\260\063\261\064\262\001" +
    "\002\000\004\056\ufff6\001\002\000\004\056\ufff4\001\002" +
    "\000\004\056\ufff5\001\002\000\004\056\264\001\002\000" +
    "\042\003\266\004\012\005\073\006\112\007\006\011\013" +
    "\016\021\017\020\046\064\047\101\050\104\051\056\052" +
    "\075\055\067\057\110\060\103\001\002\000\050\003\266" +
    "\004\012\005\073\006\112\007\006\011\013\016\021\017" +
    "\020\021\uff99\046\064\047\101\050\104\051\056\052\075" +
    "\053\uff99\054\uff99\055\067\057\110\060\103\001\002\000" +
    "\004\045\267\001\002\000\050\003\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\011\uffcd\016\uffcd\017\uffcd\021\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\057\uffcd\060\uffcd\001\002\000\050\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\016\uffd7\017\uffd7" +
    "\021\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\057\uffd7\060\uffd7\001\002\000\004" +
    "\056\276\001\002\000\004\021\uff98\001\002\000\010\021" +
    "\uff9a\053\uff9a\054\uff9a\001\002\000\004\021\275\001\002" +
    "\000\050\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\011" +
    "\uff9c\016\uff9c\017\uff9c\021\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\057\uff9c\060" +
    "\uff9c\001\002\000\042\003\266\004\012\005\073\006\112" +
    "\007\006\011\013\016\021\017\020\046\064\047\101\050" +
    "\104\051\056\052\075\055\067\057\110\060\103\001\002" +
    "\000\044\003\266\004\012\005\073\006\112\007\006\011" +
    "\013\016\021\017\020\021\uff96\046\064\047\101\050\104" +
    "\051\056\052\075\055\067\057\110\060\103\001\002\000" +
    "\050\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7" +
    "\016\uffa7\017\uffa7\021\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\057\uffa7\060\uffa7" +
    "\001\002\000\052\002\uffc4\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\011\uffc4\016\uffc4\017\uffc4\021\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\057\uffc4\060\uffc4\001\002\000\050\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\011\uff89\016\uff89\017\uff89\021" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\057\uff89\060\uff89\001\002\000\004\045" +
    "\304\001\002\000\050\003\uff88\004\uff88\005\uff88\006\uff88" +
    "\007\uff88\011\uff88\016\uff88\017\uff88\021\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88" +
    "\057\uff88\060\uff88\001\002\000\052\002\uffc6\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\016\uffc6\017\uffc6" +
    "\021\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\057\uffc6\060\uffc6\001\002\000\004" +
    "\020\310\001\002\000\050\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\011\uff95\016\uff95\017\uff95\021\uff95\046\uff95" +
    "\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\055" +
    "\uff95\057\uff95\060\uff95\001\002\000\014\010\134\015\125" +
    "\063\131\064\137\065\121\001\002\000\006\021\uff8e\062" +
    "\uff8e\001\002\000\006\021\314\062\313\001\002\000\014" +
    "\010\134\015\125\063\131\064\137\065\121\001\002\000" +
    "\004\045\315\001\002\000\050\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\011\uff94\016\uff94\017\uff94\021\uff94\046" +
    "\uff94\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94" +
    "\055\uff94\057\uff94\060\uff94\001\002\000\006\021\uff8f\062" +
    "\uff8f\001\002\000\026\003\133\006\123\010\134\015\125" +
    "\024\116\026\132\044\122\063\131\064\137\065\121\001" +
    "\002\000\004\025\321\001\002\000\004\020\052\001\002" +
    "\000\050\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011" +
    "\uffaf\016\uffaf\017\uffaf\021\uffaf\046\uffaf\047\323\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\057\uffaf\060" +
    "\uffaf\001\002\000\006\020\052\046\237\001\002\000\050" +
    "\003\uffad\004\uffad\005\uffad\006\uffad\007\uffad\011\uffad\016" +
    "\uffad\017\uffad\021\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\057\uffad\060\uffad\001" +
    "\002\000\050\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae" +
    "\011\uffae\016\uffae\017\uffae\021\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\057\uffae" +
    "\060\uffae\001\002\000\042\003\133\004\012\006\123\007" +
    "\006\010\134\011\013\015\125\016\021\017\020\024\116" +
    "\026\132\044\122\045\uffa2\063\131\064\137\065\121\001" +
    "\002\000\004\045\uffa3\001\002\000\004\025\343\001\002" +
    "\000\004\006\047\001\002\000\004\045\uffa4\001\002\000" +
    "\004\012\223\001\002\000\004\045\335\001\002\000\030" +
    "\003\133\006\123\010\134\015\125\024\116\026\132\044" +
    "\122\045\uffa0\063\131\064\137\065\121\001\002\000\004" +
    "\045\uffa1\001\002\000\004\045\340\001\002\000\030\003" +
    "\133\006\123\010\134\015\125\024\116\025\uff9e\026\132" +
    "\044\122\063\131\064\137\065\121\001\002\000\004\025" +
    "\uff9f\001\002\000\004\025\uffa5\001\002\000\004\020\052" +
    "\001\002\000\050\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\011\uffa6\016\uffa6\017\uffa6\021\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\057" +
    "\uffa6\060\uffa6\001\002\000\050\003\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\016\uffce\017\uffce\021\uffce\046" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\057\uffce\060\uffce\001\002\000\014\004\uffc7\007" +
    "\uffc7\011\uffc7\016\uffc7\017\uffc7\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\002\003\003\007\010\013\012\016\013" +
    "\006\015\004\044\015\045\010\001\001\000\002\001\001" +
    "\000\006\014\345\061\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\007\010\013" +
    "\013\021\015\004\045\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\026\010\030\017\031\020\027\067" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\026\010\030\020\035\067\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\050\061\047\001\001\000\002\001\001\000\054" +
    "\003\026\004\065\005\104\006\076\007\071\010\106\021" +
    "\053\022\105\023\057\025\060\026\073\027\075\030\062" +
    "\031\056\040\110\056\054\060\061\062\077\063\070\065" +
    "\052\067\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\026\005\267\006\076" +
    "\007\071\010\106\021\053\022\105\023\057\025\060\026" +
    "\073\027\075\030\062\031\056\040\110\056\054\060\061" +
    "\062\304\063\070\065\052\067\064\001\001\000\024\011" +
    "\116\032\302\033\134\035\137\036\127\050\126\051\135" +
    "\065\125\070\123\001\001\000\004\062\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\116\032\211\033" +
    "\134\035\137\036\127\050\126\051\135\065\125\070\123" +
    "\001\001\000\002\001\001\000\026\011\116\032\117\033" +
    "\134\035\137\036\127\050\126\051\135\065\125\066\140" +
    "\070\123\001\001\000\016\011\116\033\207\035\137\036" +
    "\127\065\125\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\011\116\033\134\035" +
    "\137\036\127\050\206\051\135\065\125\070\123\001\001" +
    "\000\004\064\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\116\032\143\033\134\035\137\036\127\050\126" +
    "\051\135\065\125\070\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\116\033\173\035\137\036\127" +
    "\065\125\070\123\001\001\000\016\011\116\033\172\035" +
    "\137\036\127\065\125\070\123\001\001\000\016\011\116" +
    "\033\171\035\137\036\127\065\125\070\123\001\001\000" +
    "\016\011\116\033\170\035\137\036\127\065\125\070\123" +
    "\001\001\000\016\011\116\033\167\035\137\036\127\065" +
    "\125\070\123\001\001\000\016\011\116\033\166\035\137" +
    "\036\127\065\125\070\123\001\001\000\016\011\116\033" +
    "\165\035\137\036\127\065\125\070\123\001\001\000\016" +
    "\011\116\033\164\035\137\036\127\065\125\070\123\001" +
    "\001\000\016\011\116\033\163\035\137\036\127\065\125" +
    "\070\123\001\001\000\016\011\116\033\162\035\137\036" +
    "\127\065\125\070\123\001\001\000\016\011\116\033\161" +
    "\035\137\036\127\065\125\070\123\001\001\000\016\011" +
    "\116\033\160\035\137\036\127\065\125\070\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\011\116\033" +
    "\134\035\137\036\127\050\202\051\135\065\125\070\123" +
    "\001\001\000\022\011\116\033\134\035\137\036\127\050" +
    "\201\051\135\065\125\070\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\011" +
    "\116\032\214\033\134\035\137\036\127\050\126\051\135" +
    "\057\215\065\125\070\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\011\116\032\221\033\134\035\137" +
    "\036\127\050\126\051\135\065\125\070\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\011\116\032\224\033\134\035\137\036\127\050\126\051" +
    "\135\065\125\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\011\116\032\227\033" +
    "\134\035\137\036\127\050\126\051\135\065\125\070\123" +
    "\001\001\000\002\001\001\000\006\014\231\061\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\011\116\032\240\033\134\035\137\036\127\050\126" +
    "\051\135\065\125\070\123\001\001\000\002\001\001\000" +
    "\006\014\242\061\047\001\001\000\006\023\245\024\244" +
    "\001\001\000\006\014\246\061\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\116" +
    "\032\250\033\134\035\137\036\127\050\126\051\135\065" +
    "\125\070\123\001\001\000\002\001\001\000\004\046\252" +
    "\001\001\000\002\001\001\000\006\037\255\042\254\001" +
    "\001\000\002\001\001\000\010\042\272\043\271\047\273" +
    "\001\001\000\004\034\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\026\004\264\005\104\006\076\007\071\010\106\021" +
    "\053\022\105\023\057\025\060\026\073\027\075\030\062" +
    "\031\056\040\110\056\054\060\061\063\070\065\052\067" +
    "\064\001\001\000\050\003\026\005\267\006\076\007\071" +
    "\010\106\021\053\022\105\023\057\025\060\026\073\027" +
    "\075\030\062\031\056\040\110\056\054\060\061\063\070" +
    "\065\052\067\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\026\004\276\005\104\006\076\007\071\010\106" +
    "\021\053\022\105\023\057\025\060\026\073\027\075\030" +
    "\062\031\056\040\110\056\054\060\061\063\070\065\052" +
    "\067\064\001\001\000\050\003\026\005\267\006\076\007" +
    "\071\010\106\021\053\022\105\023\057\025\060\026\073" +
    "\027\075\030\062\031\056\040\110\056\054\060\061\063" +
    "\070\065\052\067\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\310\041\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\116\032" +
    "\317\033\134\035\137\036\127\050\126\051\135\065\125" +
    "\070\123\001\001\000\002\001\001\000\006\014\321\061" +
    "\047\001\001\000\004\023\323\001\001\000\006\014\324" +
    "\061\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\330\007\331\010\332\011\116\032\326\033\134" +
    "\035\137\036\127\050\126\051\135\052\327\053\333\065" +
    "\125\070\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\116\032\335\033\134\035\137" +
    "\036\127\050\126\051\135\054\336\065\125\070\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\011\116" +
    "\032\340\033\134\035\137\036\127\050\126\051\135\055" +
    "\341\065\125\070\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\343\061\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    Lexer parser;
    SymbolTable symbolTable = new SymbolTable();
    String currentFunctionName = null; // Variable para rastrear la función actual

    // Constructor del parser
    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser = parser;

        FunctionInfo globalFunction = new FunctionInfo("global", "void",0,0, new ArrayList<>());
        if (!symbolTable.pushFunction(globalFunction)) {
            System.err.println("Error: Función global ya está definida.");
        }
        globalFunction.beginScope();

        this.symbolFactory = new DefaultSymbolFactory();
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error sintactico, linea: " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error sintactico: " + message);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // Reportar el error fatal sin detener el programa
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            System.err.println("Error fatal sintactico " + (symbol.left + 1) + ", columna " + (symbol.right + 1) + ": " + symbol.value);
        } else {
            System.err.println("Error fatal de sintaxis: " + message);
        }
    }

    @Override
    public void unrecovered_syntax_error(Symbol info) {
        if (info.value != null) {
            System.err.println("Error no recuperable en la linea " + (info.left + 1) + ", columna " + (info.right + 1));
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = "boolean"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) i;
    RESULT = new SymbolInfo("int", "int", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) s;
    RESULT = new SymbolInfo("string", "string", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) c;
    RESULT = new SymbolInfo("char", "char", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) b;
    RESULT = new SymbolInfo("boolean", "boolean", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    TokenInfo token = (TokenInfo) f;
    RESULT = new SymbolInfo("float", "float", token.getLine() + 1, token.getColumn() + 1);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales_num ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    // Obtener el tipo
    String tipo = (String) t;

    // Cast correcto de 'id' a TokenInfo
    TokenInfo token = (TokenInfo) id;

    // Obtener el nombre, línea y columna
    String nombre = token.getValue();
    int linea = token.getLine() + 1;
    int columna = token.getColumn() + 1;

    // Imprimir la información de declaración
    //System.out.println("Declaración de variable '" + nombre + "' de tipo '" + tipo + "' en línea " + linea + ", columna " + columna);

    // Crear el SymbolInfo con la información de posición
    RESULT = new SymbolInfo(nombre, tipo, linea, columna);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= expresion_logica 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_logica ::= expresion_logica AND expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_logica ::= expresion_logica OR expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;
		
                       RESULT = new SymbolInfo("boolean", "boolean", 0, 0);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_logica ::= expresion_comparacion 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       RESULT = ec;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_comparacion ::= expresion_aritmetica EQEQ expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_comparacion ::= expresion_aritmetica NEQ expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             SymbolInfo op1 = (SymbolInfo) ea1;
                             SymbolInfo op2 = (SymbolInfo) ea2;
                             FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                             ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                             RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_comparacion ::= expresion_aritmetica LT expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_comparacion ::= expresion_aritmetica LE expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_comparacion ::= expresion_aritmetica GT expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_comparacion ::= expresion_aritmetica GE expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_comparacion ::= expresion_aritmetica 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ea; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_comparacion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           SymbolInfo op1 = (SymbolInfo) ea1;
                           SymbolInfo op2 = (SymbolInfo) ea2;
                           FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                           ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                           RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica POW expresion_aritmetica 
            {
              Object RESULT =null;
		int ea1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ea1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ea2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ea2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            SymbolInfo op1 = (SymbolInfo) ea1;
                            SymbolInfo op2 = (SymbolInfo) ea2;
                            FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                            ControlStructureOperations.checkOperandsType(op1, op2, currentTable);
                            RESULT = new SymbolInfo(op1.getType(), op1.getType(), op1.getLine(), op1.getColumn());
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            RESULT = ea;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_aritmetica ::= unary_operators 
            {
              Object RESULT =null;
		int uoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object uo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_aritmetica ::= llamada_funcion 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lf; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_aritmetica ::= indice_array 
            {
              Object RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_aritmetica ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_aritmetica ::= error CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           TokenInfo token = (TokenInfo) id;
                           SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);

                           FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

                           Variable.checkExistance(variable, currentTable);
                           RESULT = variable;
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia ::= print_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia ::= asignar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia ::= IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencia ::= llamada_funcion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignar ::= IDENTIFIER EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    TokenInfo token = (TokenInfo) id;
    SymbolInfo variable = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
    SymbolInfo expressionResult = (SymbolInfo) e;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

    // Verificar compatibilidad de tipos
    Variable.checkType(variable, expressionResult, currentTable);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);

    Variable.checkRepeated(info, currentTable);

    boolean inserted = currentTable.insert(info.getName(), info);

    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // creacionAsignacion ::= nombrar EQ expresion SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SymbolInfo info = (SymbolInfo) n;
    FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
    SymbolInfo expressionResult = (SymbolInfo) e;

    Variable.checkRepeated(info, currentTable);

    boolean inserted = currentTable.insert(info.getName(), info);

    Variable.checkType(info, expressionResult, currentTable);

    // System.out.println("--------++_+_+_-" + symbolTable.functionScopes);
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;
		
        currentFunctionName = "global";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque ::= apertura_bloque sentencias cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque ::= apertura_bloque cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque ::= apertura_bloque error cierre_bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // apertura_bloque ::= OPEN_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentFunction = symbolTable.lookupFunction(currentFunctionName);
        if (currentFunction != null) {
            currentFunction.beginScope();
        } else {
            System.err.println("Error: No se puede abrir un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("apertura_bloque",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cierre_bloque ::= CLOSE_BLOCK 
            {
              Object RESULT =null;
		
        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
        if (currentTable != null) {
            currentTable.printScopes();
            currentTable.endScope();
        } else {
            System.err.println("Error: No se puede cerrar un bloque fuera de una función.");
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cierre_bloque",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo funcSymbol = (SymbolInfo) i;
        String funcName = funcSymbol.getName();
        String returnType = funcSymbol.getType();
        System.out.println("\n Función: '" + funcName + "' con tipo de retorno '" + returnType + "'");
        List<SymbolInfo> paramList = (List<SymbolInfo>) e;
        for (SymbolInfo param : paramList) {
            System.out.println("Parámetro: nombre = " + param.getName() + ", tipo = " + param.getType());
        }
        FunctionInfo fInfo = new FunctionInfo(funcName, returnType, 0, 0, paramList);

        // Insertar la función en la tabla de símbolos
        boolean inserted = symbolTable.pushFunction(fInfo);
        if (inserted) {
            System.out.println("encabezadoFuncion: Función '" + funcName + "' insertada correctamente en la tabla de símbolos.");
        } else {
            System.err.println("encabezadoFuncion: Error: Función '" + funcName + "' ya está definida.");
        }
        currentFunctionName = funcName;

        // Iniciar el primer scope de la función
        fInfo.beginScope();
        RESULT = fInfo;  // Retorna el FunctionInfo creado

        // Imprimir todas las funciones después de la inserción
        symbolTable.printAllFunctions();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;
		
    System.out.println("Sin parámetros");
    RESULT = new ArrayList<SymbolInfo>();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = p;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametroAux ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = new ArrayList<SymbolInfo>();
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        List<SymbolInfo> lista = (List<SymbolInfo>) pl;
        lista.add((SymbolInfo)p);
        RESULT = lista;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametro ::= nombrar 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametro ::= nombrar_array 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamada_funcion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        TokenInfo token = (TokenInfo) id;

        String funcName = token.getValue();
        FunctionInfo function = symbolTable.lookupFunction(funcName);

        if (function != null) {

            SymbolInfo symbolFunc = new SymbolInfo(function.getName(), function.getType(), 0, 0);

            RESULT = symbolFunc;

        } else {
            System.err.println("Error semantico, la funcion: " + funcName + " no existe, linea: " + token.getLine() + " y columna: " + token.getColumn());
            RESULT = null;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // argumentos ::= argumentos COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_if_list_opt ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_cicle ::= FOR OPEN_PAREN condicion_for CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_cicle",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicion_for ::= inicializacion_opt SEMICOLON condicion_opt SEMICOLON actualizacion_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // inicializacion_opt ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // inicializacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // inicializacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion_opt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // condicion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_opt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // actualizacion_opt ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // actualizacion_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actualizacion_opt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // switch_stmt ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN bloque_switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // bloque_switch ::= OPEN_BLOCK case_list default_stmt_opt CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_switch",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case_list ::= case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case_list ::= case_list case_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_stmt ::= CASE literales_num COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // default_stmt_opt ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // default_stmt_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt_opt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // default_stmt ::= DEFAULT COLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arreglo ::= nombrar_array SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arreglo ::= nombrar_array EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nombrar_array ::= tipos IDENTIFIER array_size 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar_array",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // array_size ::= OPEN_BRACKET INTEGER_LITERAL CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // array_size ::= OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_size",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // indice_array ::= IDENTIFIER array_size 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("indice_array",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        TokenInfo token = (TokenInfo) id;
                        SymbolInfo op = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
                        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                        ControlStructureOperations.checkUnaryOperandType(op, currentTable);
                        if (op != null) {
                            RESULT = new SymbolInfo(op.getType(), op.getType(), op.getLine(), op.getColumn());
                        } else {
                            RESULT = new SymbolInfo("null", "null", 0, 0);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        TokenInfo token = (TokenInfo) id;
                        SymbolInfo op = new SymbolInfo(token.getValue(), null, token.getLine() + 1, token.getColumn() + 1);
                        FunctionInfo currentTable = symbolTable.lookupFunction(currentFunctionName);
                        ControlStructureOperations.checkUnaryOperandType(op, currentTable);
                        if (op != null) {
                            RESULT = new SymbolInfo(op.getType(), op.getType(), op.getLine(), op.getColumn());
                        } else {
                            RESULT = new SymbolInfo("null", "null", 0, 0);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // negacion ::= MINUS literales 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        SymbolInfo literal = (SymbolInfo) l;
        ControlStructureOperations.checkNegationType(literal);
        RESULT = new SymbolInfo(literal.getType(), literal.getType(), literal.getLine(), literal.getColumn());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // print_stmt ::= PRINT OPEN_PAREN lista_print CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // lista_print ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // lista_print ::= lista_print COMMA expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_print",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // read_stmt ::= READ OPEN_PAREN IDENTIFIER CLOSE_PAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // programa ::= error 
            {
              Object RESULT =null;
		 System.err.println("Error relacionado a la ausencia o mal estructura de la funcion main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // conjuntoFunciones ::= funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // funcionMain ::= tipos MAIN bloque 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        currentFunctionName = "global";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
