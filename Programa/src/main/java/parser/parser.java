
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\037\003\000\002" +
    "\037\003\000\002\011\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\004\000\002\033\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\005\003\000\002\005\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\004\000\002\010\006\000\002\013\003\000\002\013\004" +
    "\000\002\014\004\000\002\015\005\000\002\016\004\000" +
    "\002\017\004\000\002\017\005\000\002\020\003\000\002" +
    "\020\005\000\002\021\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\007\000" +
    "\002\023\011\000\002\023\010\000\002\023\012\000\002" +
    "\024\011\000\002\025\002\000\002\025\003\000\002\026" +
    "\007\000\002\032\004\000\002\044\007\000\002\044\013" +
    "\000\002\045\005\000\002\045\003\000\002\040\003\000" +
    "\002\040\004\000\002\040\004\000\002\041\004\000\002" +
    "\031\004\000\002\031\005\000\002\002\003\000\002\050" +
    "\004\000\002\051\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\014\005\011\010\006\012\012\017\017\020" +
    "\016\001\002\000\004\002\205\001\002\000\004\021\027" +
    "\001\002\000\010\007\000\023\000\063\000\001\002\000" +
    "\014\005\uffd6\010\uffd6\012\uffd6\017\uffd6\020\uffd6\001\002" +
    "\000\004\007\024\001\002\000\010\007\ufffd\023\ufffd\063" +
    "\ufffd\001\002\000\010\007\uffff\023\uffff\063\uffff\001\002" +
    "\000\004\025\174\001\002\000\004\002\uffb2\001\002\000" +
    "\014\005\011\010\006\012\012\017\017\020\016\001\002" +
    "\000\010\007\ufffe\023\ufffe\063\ufffe\001\002\000\010\007" +
    "\ufffc\023\ufffc\063\ufffc\001\002\000\014\005\uffd5\010\uffd5" +
    "\012\uffd5\017\uffd5\020\uffd5\001\002\000\006\007\024\063" +
    "\023\001\002\000\004\002\uffb1\001\002\000\004\025\025" +
    "\001\002\000\014\013\ufff4\025\ufff4\026\ufff4\047\ufff4\064" +
    "\ufff4\001\002\000\004\026\026\001\002\000\004\021\027" +
    "\001\002\000\026\005\011\006\050\010\006\012\012\017" +
    "\017\020\016\050\037\051\032\052\034\057\035\001\002" +
    "\000\004\002\uffb0\001\002\000\030\005\uffda\006\uffda\010" +
    "\uffda\012\uffda\017\uffda\020\uffda\022\uffda\050\uffda\051\uffda" +
    "\052\uffda\057\uffda\001\002\000\004\050\145\001\002\000" +
    "\030\005\011\006\050\010\006\012\012\017\017\020\016" +
    "\022\171\050\037\051\032\052\034\057\035\001\002\000" +
    "\004\025\165\001\002\000\026\007\110\011\060\016\064" +
    "\017\065\025\105\030\104\046\112\047\163\065\062\067" +
    "\061\001\002\000\030\005\uffcb\006\uffcb\010\uffcb\012\uffcb" +
    "\017\uffcb\020\uffcb\022\uffcb\050\uffcb\051\uffcb\052\uffcb\057" +
    "\uffcb\001\002\000\004\025\103\001\002\000\030\005\uffd9" +
    "\006\uffd9\010\uffd9\012\uffd9\017\uffd9\020\uffd9\022\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\057\uffd9\001\002\000\006\007\024" +
    "\023\067\001\002\000\030\005\uffde\006\uffde\010\uffde\012" +
    "\uffde\017\uffde\020\uffde\022\uffde\050\uffde\051\uffde\052\uffde" +
    "\057\uffde\001\002\000\030\005\uffdb\006\uffdb\010\uffdb\012" +
    "\uffdb\017\uffdb\020\uffdb\022\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\057\uffdb\001\002\000\030\005\uffc9\006\uffc9\010\uffc9\012" +
    "\uffc9\017\uffc9\020\uffc9\022\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\057\uffc9\001\002\000\006\013\056\047\057\001\002\000" +
    "\030\005\uffc7\006\uffc7\010\uffc7\012\uffc7\017\uffc7\020\uffc7" +
    "\022\uffc7\050\uffc7\051\uffc7\052\uffc7\057\uffc7\001\002\000" +
    "\030\005\uffdc\006\uffdc\010\uffdc\012\uffdc\017\uffdc\020\uffdc" +
    "\022\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\001\002\000" +
    "\004\047\055\001\002\000\030\005\uffc6\006\uffc6\010\uffc6" +
    "\012\uffc6\017\uffc6\020\uffc6\022\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\057\uffc6\001\002\000\030\005\uffcc\006\uffcc\010\uffcc" +
    "\012\uffcc\017\uffcc\020\uffcc\022\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\057\uffcc\001\002\000\030\005\uffc8\006\uffc8\010\uffc8" +
    "\012\uffc8\017\uffc8\020\uffc8\022\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\057\uffc8\001\002\000\030\005\uffca\006\uffca\010\uffca" +
    "\012\uffca\017\uffca\020\uffca\022\uffca\050\uffca\051\uffca\052" +
    "\uffca\057\uffca\001\002\000\030\005\uffbd\006\uffbd\010\uffbd" +
    "\012\uffbd\017\uffbd\020\uffbd\022\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\057\uffbd\001\002\000\014\011\060\016\064\017\065" +
    "\065\062\067\061\001\002\000\030\005\uffd8\006\uffd8\010" +
    "\uffd8\012\uffd8\017\uffd8\020\uffd8\022\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\057\uffd8\001\002\000\032\014\ufffb\022\ufffb\026" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\047\ufffb\064\ufffb\001\002\000\032\014\ufff8\022" +
    "\ufff8\026\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\047\ufff8\064\ufff8\001\002\000\032\014" +
    "\ufff9\022\ufff9\026\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\047\ufff9\064\ufff9\001\002\000" +
    "\004\047\066\001\002\000\032\014\ufffa\022\ufffa\026\ufffa" +
    "\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\047\ufffa\064\ufffa\001\002\000\032\014\ufff7\022\ufff7" +
    "\026\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\047\ufff7\064\ufff7\001\002\000\030\005\uffd7" +
    "\006\uffd7\010\uffd7\012\uffd7\017\uffd7\020\uffd7\022\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\057\uffd7\001\002\000\004\024\070" +
    "\001\002\000\004\007\071\001\002\000\006\013\072\047" +
    "\073\001\002\000\004\021\074\001\002\000\030\005\uffbc" +
    "\006\uffbc\010\uffbc\012\uffbc\017\uffbc\020\uffbc\022\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\057\uffbc\001\002\000\014\011\060" +
    "\016\064\017\065\065\062\067\061\001\002\000\006\022" +
    "\uffb9\064\uffb9\001\002\000\006\022\100\064\077\001\002" +
    "\000\014\011\060\016\064\017\065\065\062\067\061\001" +
    "\002\000\004\047\101\001\002\000\030\005\uffbb\006\uffbb" +
    "\010\uffbb\012\uffbb\017\uffbb\020\uffbb\022\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\057\uffbb\001\002\000\006\022\uffba\064\uffba" +
    "\001\002\000\024\007\110\011\060\016\064\017\065\025" +
    "\105\030\104\046\112\065\062\067\061\001\002\000\006" +
    "\011\157\066\160\001\002\000\024\007\110\011\060\016" +
    "\064\017\065\025\105\030\104\046\112\065\062\067\061" +
    "\001\002\000\024\014\124\026\137\037\122\040\115\041" +
    "\120\042\116\043\121\044\117\045\123\001\002\000\026" +
    "\014\ufff1\026\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\047\ufff1\001\002\000\032\014\ufff3" +
    "\026\ufff3\035\136\036\135\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\047\ufff3\001\002\000\026" +
    "\014\uffb8\026\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\047\uffb8\001\002\000\024\007\110" +
    "\011\060\016\064\017\065\025\105\030\104\046\112\065" +
    "\062\067\061\001\002\000\026\014\ufff2\026\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\047" +
    "\ufff2\001\002\000\026\014\124\026\uffe8\037\122\040\115" +
    "\041\120\042\116\043\121\044\117\045\123\047\uffe8\001" +
    "\002\000\024\007\110\011\060\016\064\017\065\025\105" +
    "\030\104\046\112\065\062\067\061\001\002\000\024\007" +
    "\110\011\060\016\064\017\065\025\105\030\104\046\112" +
    "\065\062\067\061\001\002\000\024\007\110\011\060\016" +
    "\064\017\065\025\105\030\104\046\112\065\062\067\061" +
    "\001\002\000\024\007\110\011\060\016\064\017\065\025" +
    "\105\030\104\046\112\065\062\067\061\001\002\000\024" +
    "\007\110\011\060\016\064\017\065\025\105\030\104\046" +
    "\112\065\062\067\061\001\002\000\024\007\110\011\060" +
    "\016\064\017\065\025\105\030\104\046\112\065\062\067" +
    "\061\001\002\000\024\007\110\011\060\016\064\017\065" +
    "\025\105\030\104\046\112\065\062\067\061\001\002\000" +
    "\024\007\110\011\060\016\064\017\065\025\105\030\104" +
    "\046\112\065\062\067\061\001\002\000\026\014\ufff0\026" +
    "\ufff0\037\ufff0\040\115\041\120\042\116\043\121\044\117" +
    "\045\123\047\ufff0\001\002\000\026\014\uffe9\026\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\047\uffe9\001\002\000\026\014\uffef\026\uffef\037\uffef\040" +
    "\115\041\120\042\116\043\121\044\117\045\123\047\uffef" +
    "\001\002\000\026\014\uffeb\026\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\117\045\123\047\uffeb\001\002" +
    "\000\026\014\uffed\026\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\117\045\123\047\uffed\001\002\000\026" +
    "\014\uffea\026\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\047\uffea\001\002\000\026\014\uffec" +
    "\026\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\117\045\123\047\uffec\001\002\000\026\014\uffee\026\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\117\045" +
    "\123\047\uffee\001\002\000\026\014\uffb6\026\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\047" +
    "\uffb6\001\002\000\026\014\uffb7\026\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\001" +
    "\002\000\004\021\027\001\002\000\030\005\uffc5\006\uffc5" +
    "\010\uffc5\012\uffc5\017\uffc5\020\uffc5\022\uffc5\050\uffc5\051" +
    "\141\052\uffc5\057\uffc5\001\002\000\006\021\027\050\145" +
    "\001\002\000\030\005\uffc3\006\uffc3\010\uffc3\012\uffc3\017" +
    "\uffc3\020\uffc3\022\uffc3\050\uffc3\051\143\052\uffc3\057\uffc3" +
    "\001\002\000\004\021\027\001\002\000\030\005\uffc2\006" +
    "\uffc2\010\uffc2\012\uffc2\017\uffc2\020\uffc2\022\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\057\uffc2\001\002\000\004\025\147\001" +
    "\002\000\030\005\uffc4\006\uffc4\010\uffc4\012\uffc4\017\uffc4" +
    "\020\uffc4\022\uffc4\050\uffc4\051\uffc4\052\uffc4\057\uffc4\001" +
    "\002\000\024\007\110\011\060\016\064\017\065\025\105" +
    "\030\104\046\112\065\062\067\061\001\002\000\024\014" +
    "\124\026\151\037\122\040\115\041\120\042\116\043\121" +
    "\044\117\045\123\001\002\000\004\021\027\001\002\000" +
    "\030\005\uffc0\006\uffc0\010\uffc0\012\uffc0\017\uffc0\020\uffc0" +
    "\022\uffc0\050\uffc0\051\032\052\uffc0\057\uffc0\001\002\000" +
    "\030\005\uffc1\006\uffc1\010\uffc1\012\uffc1\017\uffc1\020\uffc1" +
    "\022\uffc1\050\uffc1\051\uffc1\052\uffc1\057\uffc1\001\002\000" +
    "\030\005\uffbf\006\uffbf\010\uffbf\012\uffbf\017\uffbf\020\uffbf" +
    "\022\uffbf\050\uffbf\051\uffbf\052\uffbf\057\uffbf\001\002\000" +
    "\024\014\124\026\156\037\122\040\115\041\120\042\116" +
    "\043\121\044\117\045\123\001\002\000\026\014\uffe7\026" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7" +
    "\045\uffe7\047\uffe7\001\002\000\026\014\ufff6\026\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\047\ufff6\001\002\000\026\014\ufff5\026\ufff5\037\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5" +
    "\001\002\000\026\014\uffb5\026\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\047\uffb5\001\002" +
    "\000\024\014\124\037\122\040\115\041\120\042\116\043" +
    "\121\044\117\045\123\047\164\001\002\000\030\005\uffb4" +
    "\006\uffb4\010\uffb4\012\uffb4\017\uffb4\020\uffb4\022\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\057\uffb4\001\002\000\030\005\uffb3" +
    "\006\uffb3\010\uffb3\012\uffb3\017\uffb3\020\uffb3\022\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\057\uffb3\001\002\000\024\007\110" +
    "\011\060\016\064\017\065\025\105\030\104\046\112\065" +
    "\062\067\061\001\002\000\024\014\124\026\167\037\122" +
    "\040\115\041\120\042\116\043\121\044\117\045\123\001" +
    "\002\000\004\021\027\001\002\000\030\005\uffbe\006\uffbe" +
    "\010\uffbe\012\uffbe\017\uffbe\020\uffbe\022\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\057\uffbe\001\002\000\032\002\uffd3\005\uffd3" +
    "\006\uffd3\010\uffd3\012\uffd3\017\uffd3\020\uffd3\022\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\057\uffd3\001\002\000\030\005\uffdd" +
    "\006\uffdd\010\uffdd\012\uffdd\017\uffdd\020\uffdd\022\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\057\uffdd\001\002\000\004\021\uffd2" +
    "\001\002\000\016\005\011\010\006\012\012\017\017\020" +
    "\016\026\200\001\002\000\006\026\uffcf\064\uffcf\001\002" +
    "\000\006\026\uffcd\064\uffcd\001\002\000\006\026\202\064" +
    "\201\001\002\000\004\021\uffd1\001\002\000\014\005\011" +
    "\010\006\012\012\017\017\020\016\001\002\000\004\021" +
    "\uffd0\001\002\000\006\026\uffce\064\uffce\001\002\000\014" +
    "\005\uffd4\010\uffd4\012\uffd4\017\uffd4\020\uffd4\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\002\003\004\007\011\012\013\014\014" +
    "\006\016\004\050\013\001\001\000\002\001\001\000\004" +
    "\015\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\172\001\001\000\002\001\001\000\014\004\020\011" +
    "\012\014\017\016\004\051\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\027\001\001\000\040\004\040\005" +
    "\032\006\041\007\046\010\042\011\044\022\030\023\051" +
    "\024\035\026\053\027\043\030\052\031\045\032\050\044" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\040\006\171\007\046\010\042\011" +
    "\044\022\030\023\051\024\035\026\053\027\043\030\052" +
    "\031\045\032\050\044\037\001\001\000\002\001\001\000" +
    "\012\012\112\033\161\040\106\041\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\074\045\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\112\033\105\040\106\041\110\001\001\000\004\037" +
    "\160\001\001\000\012\012\112\033\154\040\106\041\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\112\033\113\040\106" +
    "\041\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\112\033\133\040\106\041\110\001\001\000\012" +
    "\012\112\033\132\040\106\041\110\001\001\000\012\012" +
    "\112\033\131\040\106\041\110\001\001\000\012\012\112" +
    "\033\130\040\106\041\110\001\001\000\012\012\112\033" +
    "\127\040\106\041\110\001\001\000\012\012\112\033\126" +
    "\040\106\041\110\001\001\000\012\012\112\033\125\040" +
    "\106\041\110\001\001\000\012\012\112\033\124\040\106" +
    "\041\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\137\001\001\000\004" +
    "\024\141\001\001\000\004\015\145\001\001\000\002\001" +
    "\001\000\004\015\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\112\033\147\040" +
    "\106\041\110\001\001\000\002\001\001\000\004\015\151" +
    "\001\001\000\006\024\153\025\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\112\033\165\040\106\041\110\001\001\000\002\001" +
    "\001\000\004\015\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\007\011\175\020\176\021\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\007\011\175\021\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return parser.next_token(); 
    }


    // Connect this parser to a scanner!
    Lexer parser;

    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser=parser;
        this.symbolFactory = new DefaultSymbolFactory();
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // tipos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tipos ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literales ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // literales ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literales ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literales ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literales ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literales_num ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literales_num ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literales_num",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nombrar ::= tipos IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombrar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= unary_operators 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= expresion EQEQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= expresion NEQ expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= expresion LT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion LE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion GT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion GE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= OPEN_PAREN expresion CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica PLUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MINUS expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica TIMES expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica DIV expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica MOD expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= OPEN_PAREN expresion_aritmetica CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_aritmetica ::= literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia ::= creacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sentencia ::= creacionAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentencia ::= estructuraControl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia ::= arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // creacion ::= nombrar SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // creacionAsignacion ::= nombrar EQ literales SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("creacionAsignacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funciones ::= funciones funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcion ::= encabezadoFuncion bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encabezadoFuncion ::= nombrar parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezadoFuncion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= OPEN_PAREN CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= OPEN_PAREN parametroAux CLOSE_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametroAux ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametroAux ::= parametroAux COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametroAux",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= nombrar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estructuraControl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estructuraControl ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estructuraControl ::= while_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estructuraControl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estructuraControl ::= for_cicle 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estructuraControl ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estructuraControl ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraControl",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list ELSE bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list_opt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // else_if_list_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_if_list_opt ::= else_if_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if_list_opt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // while_cicle ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_cicle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // break_stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arreglo ::= tipos OPEN_BRACKET CLOSE_BRACKET IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arreglo ::= tipos OPEN_BRACKET CLOSE_BRACKET IDENTIFIER EQ OPEN_BLOCK listaValores CLOSE_BLOCK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listaValores ::= listaValores COMMA literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaValores ::= literales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaValores",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary_operators ::= negacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary_operators ::= IDENTIFIER INCREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary_operators ::= IDENTIFIER DECREMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_operators",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // negacion ::= MINUS literales_num 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("negacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return_stmt ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return_stmt ::= RETURN expresion SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // programa ::= conjuntoFunciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conjuntoFunciones ::= funciones funcionMain 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // funcionMain ::= tipos MAIN OPEN_PAREN CLOSE_PAREN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcionMain",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
