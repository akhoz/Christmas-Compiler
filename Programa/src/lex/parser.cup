package parser;
import java_cup.runtime.*;


//utiliza class Lexer que genera el lexer.jflex, pequeños cambios de lo tomado de la página de cup
//cambios en parser code, init with y scan with {:

action code {:
    /*CODIGO DE JAVA
    https://www.jflex.de/
    http://www2.cs.tum.edu/projects/cup/examples.php*/

    public void hola(){

                System.out.println("Hola");
    }

    public void adios(){

                System.out.println("Adiós");
    }
:}

parser code {:
    // Connect this parser to a scanner!
    Lexer parser;

    @SuppressWarnings("deprecation")
    public parser(Lexer parser){
        this.parser=parser;
        this.symbolFactory = new DefaultSymbolFactory();
    }

:}

init with {: :};

/* define how to connect to the scanner! */
scan with {: return parser.next_token(); :};

/* Terminales (tokens retornados por el scanner). */
terminal ABSTRACT, BOOLEAN, BREAK, IDENTIFIER, INTEGER, INTEGER_LITERAL, STRING, EQ, EQEQ, PLUS, STRING_LITERAL,
 FLOAT, CHAR, OPEN_BLOCK, CLOSE_BLOCK, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN, ERROR,
 MINUS, TIMES, DIV, MOD, POW, INCREMENT, DECREMENT, NEQ, LT, LE, GT, GE, AND, OR, NOT, SEMICOLON,
 IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, RETURN, COLON, PRINT, READ, MAIN, COMMA, CHAR_LITERAL, FLOAT_LITERAL, BOOLEAN_LITERAL;

// no terminales
non terminal programa, programaAux, tipos, sentencias, sentencia, creacion, creacionAsignacion, nombrar,
 literales, funciones, funcion, bloque, encabezadoFuncion, parametros, parametroAux, parametro,
 estructuraControl, if_stmt, else_if_list, while_cicle, switch_stmt, for_cicle, return_stmt, break_stmt, expresion ;
//produccion de inicio
start with programa;

// Generalidades
tipos ::= INTEGER | STRING | CHAR | BOOLEAN | FLOAT ;
literales ::= INTEGER_LITERAL | STRING_LITERAL | CHAR_LITERAL | BOOLEAN_LITERAL | FLOAT ;
nombrar ::= tipos IDENTIFIER ;
expresion ::= IDENTIFIER
            | literales
            | expresion EQEQ expresion  // Comparacion ==
            | expresion NEQ expresion  // Comparacion !=
            | expresion LT expresion   // Menor que <
            | expresion LE expresion   // Menor o igual que <=
            | expresion GT expresion   // Mayor que >
            | expresion GE expresion   // Mayor o igual que >=
            | expresion AND expresion  // Operador logico AND
            | expresion OR expresion   // Operador logico OR
            | NOT expresion            // Negacion logica
            | OPEN_PAREN expresion CLOSE_PAREN ;  // Agrupacion con paréntesis

// Sentencias
sentencias ::= sentencia | sentencias sentencias ;
sentencia ::= creacion | creacionAsignacion ;

creacion ::= nombrar SEMICOLON ;
creacionAsignacion ::= nombrar EQ literales SEMICOLON ;

// Funciones
funciones ::= funcion | funciones funcion ;
funcion ::= encabezadoFuncion bloque ;

bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK ;
encabezadoFuncion ::= nombrar parametros;

parametros ::= OPEN_PAREN CLOSE_PAREN | OPEN_PAREN parametroAux CLOSE_PAREN ;
parametroAux ::= parametro | parametroAux COMMA parametro ;
parametro ::= nombrar ;

// Estructuras de Control
estructuraControl ::= if_stmt | else_if_list | while_cicle | switch_stmt | for_cicle | return_stmt | break_stmt ;

if_stmt ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque // If simple
          | IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque  // If con else al final
          | IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list // If con uno o varios elif
          | IF OPEN_PAREN expresion CLOSE_PAREN bloque else_if_list ELSE bloque ; // If con uno o varios elif y un else al final

else_if_list ::= ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque // Un elif
               | else_if_list ELSE IF OPEN_PAREN expresion CLOSE_PAREN bloque ; // Varios elif

return_stmt ::= RETURN SEMICOLON | RETURN expresion SEMICOLON ;

break_stmt ::= BREAK SEMICOLON ;


programa ::= programaAux ;
programa ::= INTEGER ;%