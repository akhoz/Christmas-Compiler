// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lex/minijava.flex

package parser;

import java_cup.runtime.Symbol;

/** Lexer for the custom language based on the given specifications. */


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\5\13\0\1\6\1\7\11\10\7\0"+
    "\32\11\1\0\1\12\2\0\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\11"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\2\2\4\24\1\1\5"+
    "\1\6\1\7\2\0\1\10\42\0\1\11\1\12\1\13"+
    "\1\14\47\0\1\2\12\0\1\15\10\0\1\16\3\0"+
    "\1\17\31\0\1\20\3\0\1\21\10\0\1\22\2\0"+
    "\1\23\3\0\1\24\1\25\1\0\1\26\15\0\1\27"+
    "\1\30\1\31\5\0\1\32\1\33\11\0\1\34\1\35"+
    "\1\0\1\36\12\0\1\37\1\0\1\40\4\0\1\41"+
    "\1\42\1\43\2\0\1\44\1\0\1\45\1\46\3\0"+
    "\1\47\1\50\1\51\3\0\1\52\2\0\1\53\2\0"+
    "\1\54\1\55\6\0\1\56\1\57\2\0\1\60\1\0"+
    "\1\61\4\0\1\62\1\63\3\0\1\64\1\65\1\0"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\110\0\154\0\110\0\220\0\110"+
    "\0\264\0\330\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0"+
    "\0\u01d4\0\u01f8\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0"+
    "\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\110\0\u03cc"+
    "\0\u03f0\0\u0414\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8"+
    "\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8"+
    "\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828"+
    "\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\110\0\110\0\110"+
    "\0\110\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09d8"+
    "\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8"+
    "\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18"+
    "\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38"+
    "\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58"+
    "\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78"+
    "\0\u0f9c\0\u0fc0\0\u0fe4\0\110\0\u1008\0\u102c\0\u1050\0\u1074"+
    "\0\u1098\0\u10bc\0\u10e0\0\u1104\0\110\0\u1128\0\u114c\0\u1170"+
    "\0\110\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c"+
    "\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368\0\u138c"+
    "\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\u14ac"+
    "\0\u14d0\0\u14f4\0\110\0\u1518\0\u153c\0\u1560\0\110\0\u1584"+
    "\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\110"+
    "\0\u16a4\0\u16c8\0\110\0\u16ec\0\u1710\0\u1734\0\110\0\110"+
    "\0\u1758\0\110\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830"+
    "\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908\0\u192c\0\110"+
    "\0\110\0\110\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0\0\110"+
    "\0\110\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc"+
    "\0\u1b00\0\u1b24\0\110\0\110\0\u1b48\0\110\0\u1b6c\0\u1b90"+
    "\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44\0\u1c68\0\u1c8c\0\u1cb0"+
    "\0\110\0\u1cd4\0\110\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64\0\110"+
    "\0\110\0\110\0\u1d88\0\u1dac\0\110\0\u1dd0\0\110\0\u0414"+
    "\0\u1df4\0\u1e18\0\u1e3c\0\110\0\110\0\110\0\u1e60\0\u1e84"+
    "\0\u1ea8\0\110\0\u1ecc\0\u1ef0\0\110\0\u1f14\0\u1f38\0\110"+
    "\0\110\0\u1f5c\0\u1f80\0\u1fa4\0\u1fc8\0\u1fec\0\u2010\0\110"+
    "\0\110\0\u2034\0\u2058\0\110\0\u207c\0\110\0\u20a0\0\u20c4"+
    "\0\u20e8\0\u210c\0\110\0\110\0\u2130\0\u2154\0\u2178\0\110"+
    "\0\110\0\u219c\0\110\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\3\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\3\1\30\1\31\1\32\1\33\1\34\1\35\4\3"+
    "\2\36\2\3\1\37\5\36\1\40\31\36\46\0\1\4"+
    "\41\0\2\7\1\4\1\5\40\7\7\0\2\11\46\0"+
    "\1\41\37\0\3\42\1\0\1\43\23\42\1\44\4\42"+
    "\15\0\1\45\1\0\1\46\40\0\1\47\16\0\1\50"+
    "\34\0\1\51\3\0\1\52\5\0\1\53\43\0\1\54"+
    "\32\0\1\55\1\0\1\56\4\0\1\57\2\0\1\60"+
    "\30\0\1\61\33\0\1\62\16\0\1\63\24\0\1\64"+
    "\7\0\1\65\46\0\1\66\30\0\1\67\3\0\1\70"+
    "\3\0\1\71\33\0\1\72\13\0\1\73\44\0\1\74"+
    "\50\0\1\75\25\0\1\76\7\0\1\77\37\0\1\100"+
    "\2\0\1\101\47\0\1\102\35\0\1\103\3\0\1\104"+
    "\26\0\1\105\27\0\2\36\3\0\5\36\1\0\31\36"+
    "\4\0\1\106\22\0\1\107\3\0\1\110\1\0\1\111"+
    "\6\0\12\41\1\112\1\0\30\41\7\0\3\42\1\0"+
    "\1\43\30\42\7\0\3\42\1\0\1\43\4\42\1\113"+
    "\23\42\33\0\1\114\47\0\1\115\31\0\1\116\46\0"+
    "\1\117\33\0\1\120\51\0\1\121\4\0\1\122\41\0"+
    "\1\123\32\0\1\124\44\0\1\125\57\0\1\126\1\0"+
    "\1\127\22\0\1\130\45\0\1\131\52\0\1\132\50\0"+
    "\1\133\33\0\1\134\36\0\1\135\60\0\1\136\44\0"+
    "\1\137\30\0\1\140\10\0\1\141\35\0\1\142\45\0"+
    "\1\143\47\0\1\144\3\0\1\145\22\0\1\146\45\0"+
    "\1\147\47\0\1\150\61\0\1\151\20\0\1\152\46\0"+
    "\1\153\51\0\1\154\51\0\1\155\42\0\1\156\22\0"+
    "\1\157\62\0\1\160\10\0\12\41\1\112\1\161\30\41"+
    "\7\0\3\42\1\0\1\43\17\42\1\162\10\42\20\0"+
    "\1\163\47\0\1\164\54\0\1\165\34\0\1\166\50\0"+
    "\1\167\30\0\1\170\60\0\1\171\32\0\1\172\46\0"+
    "\1\173\44\0\1\174\46\0\1\175\34\0\1\176\11\0"+
    "\1\177\43\0\1\200\40\0\1\201\43\0\1\202\41\0"+
    "\1\203\41\0\1\204\30\0\1\205\64\0\1\206\26\0"+
    "\1\207\53\0\1\210\55\0\1\211\17\0\1\212\61\0"+
    "\1\213\42\0\1\214\34\0\1\215\42\0\1\216\47\0"+
    "\1\217\34\0\1\220\43\0\1\221\53\0\1\222\51\0"+
    "\1\223\45\0\1\224\23\0\1\225\47\0\1\226\54\0"+
    "\1\227\32\0\1\230\17\0\6\41\1\0\4\41\1\231"+
    "\30\41\7\0\3\42\1\0\1\43\1\232\27\42\16\0"+
    "\1\233\1\0\1\234\12\0\1\235\30\0\1\236\37\0"+
    "\1\237\53\0\1\240\52\0\1\241\45\0\1\242\22\0"+
    "\1\243\46\0\1\244\43\0\1\245\44\0\1\246\37\0"+
    "\1\247\47\0\1\250\41\0\1\251\47\0\1\252\41\0"+
    "\1\253\37\0\1\254\45\0\1\255\55\0\1\256\46\0"+
    "\1\257\44\0\1\260\32\0\1\261\55\0\1\262\22\0"+
    "\1\263\46\0\1\264\44\0\1\265\57\0\1\266\36\0"+
    "\1\267\50\0\1\270\34\0\1\271\36\0\1\272\40\0"+
    "\1\273\55\0\1\274\42\0\1\275\50\0\1\276\40\0"+
    "\1\277\13\0\12\41\1\112\1\231\30\41\7\0\3\42"+
    "\1\0\1\43\13\42\1\300\14\42\36\0\1\301\33\0"+
    "\1\302\35\0\1\303\52\0\1\304\57\0\1\305\34\0"+
    "\1\306\23\0\1\307\43\0\1\310\57\0\1\311\33\0"+
    "\1\312\45\0\1\313\46\0\1\314\41\0\1\315\53\0"+
    "\1\316\32\0\1\317\54\0\1\320\33\0\1\321\53\0"+
    "\1\322\26\0\1\323\55\0\1\324\37\0\1\325\33\0"+
    "\1\326\44\0\1\327\53\0\1\330\37\0\1\331\36\0"+
    "\1\332\57\0\1\333\43\0\1\334\33\0\1\335\57\0"+
    "\1\336\16\0\3\42\1\0\1\43\14\42\1\337\13\42"+
    "\20\0\1\340\54\0\1\341\34\0\1\342\56\0\1\343"+
    "\22\0\1\344\64\0\1\345\24\0\1\346\1\0\1\347"+
    "\12\0\1\350\24\0\1\351\66\0\1\352\20\0\1\353"+
    "\47\0\1\354\37\0\1\355\53\0\1\356\33\0\1\357"+
    "\62\0\1\360\51\0\1\361\21\0\1\362\62\0\1\363"+
    "\21\0\1\364\57\0\1\365\40\0\1\366\36\0\1\367"+
    "\32\0\3\42\1\0\1\370\30\42\27\0\1\371\30\0"+
    "\1\372\43\0\1\373\57\0\1\374\46\0\1\375\24\0"+
    "\1\376\65\0\1\377\33\0\1\u0100\35\0\1\u0101\43\0"+
    "\1\u0102\43\0\1\u0103\50\0\1\u0104\32\0\1\u0105\55\0"+
    "\1\u0106\35\0\1\u0107\43\0\1\u0108\50\0\1\u0109\53\0"+
    "\1\u010a\40\0\1\u010b\36\0\1\u010c\36\0\1\u010d\54\0"+
    "\1\u010e\34\0\1\u010f\50\0\1\u0110\44\0\1\u0111\30\0"+
    "\1\u0112\55\0\1\u0113\44\0\1\u0114\51\0\1\u0115\35\0"+
    "\1\u0116\42\0\1\u0117\30\0\1\u0118\43\0\1\u0119\53\0"+
    "\1\u011a\33\0\1\u011b\47\0\1\u011c\60\0\1\u011d\40\0"+
    "\1\u011e\36\0\1\u011f\46\0\1\u0120\43\0\1\u0121\51\0"+
    "\1\u0122\35\0\1\u0123\33\0\1\u0124\23\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\26\1\1\11"+
    "\1\1\2\0\1\1\42\0\4\11\47\0\1\1\12\0"+
    "\1\11\10\0\1\11\3\0\1\11\31\0\1\11\3\0"+
    "\1\11\10\0\1\11\2\0\1\11\3\0\2\11\1\0"+
    "\1\11\15\0\3\11\5\0\2\11\11\0\2\11\1\0"+
    "\1\11\12\0\1\11\1\0\1\11\4\0\3\11\2\0"+
    "\1\11\1\0\1\11\1\1\3\0\3\11\3\0\1\11"+
    "\2\0\1\11\2\0\2\11\6\0\2\11\2\0\1\11"+
    "\1\0\1\11\4\0\2\11\3\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
    , UnknownCharacterException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new UnknownCharacterException(yytext());
            }
          // fall through
          case 56: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 57: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
          // fall through
          case 58: break;
          case 4:
            { return symbol(sym.INTEGER_LITERAL);
            }
          // fall through
          case 59: break;
          case 5:
            { string.append(yytext());
            }
          // fall through
          case 60: break;
          case 6:
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL, string.toString());
            }
          // fall through
          case 61: break;
          case 7:
            { string.append('\\');
            }
          // fall through
          case 62: break;
          case 8:
            { return symbol(sym.IDENTIFIER);
            }
          // fall through
          case 63: break;
          case 9:
            { string.append('\"');
            }
          // fall through
          case 64: break;
          case 10:
            { string.append('\n');
            }
          // fall through
          case 65: break;
          case 11:
            { string.append('\r');
            }
          // fall through
          case 66: break;
          case 12:
            { string.append('\t');
            }
          // fall through
          case 67: break;
          case 13:
            { return symbol(sym.IF);
            }
          // fall through
          case 68: break;
          case 14:
            { return symbol(sym.ELSE);
            }
          // fall through
          case 69: break;
          case 15:
            { return symbol(sym.EQEQ);
            }
          // fall through
          case 70: break;
          case 16:
            { return symbol(sym.BREAK);
            }
          // fall through
          case 71: break;
          case 17:
            { return symbol(sym.RETURN);
            }
          // fall through
          case 72: break;
          case 18:
            { return symbol(sym.MOD);
            }
          // fall through
          case 73: break;
          case 19:
            { return symbol(sym.PRINT);
            }
          // fall through
          case 74: break;
          case 20:
            { return symbol(sym.INCREMENT);
            }
          // fall through
          case 75: break;
          case 21:
            { return symbol(sym.DIV);
            }
          // fall through
          case 76: break;
          case 22:
            { return symbol(sym.COLON);
            }
          // fall through
          case 77: break;
          case 23:
            { return symbol(sym.STRING);
            }
          // fall through
          case 78: break;
          case 24:
            { return symbol(sym.CHAR);
            }
          // fall through
          case 79: break;
          case 25:
            { return symbol(sym.FOR);
            }
          // fall through
          case 80: break;
          case 26:
            { return symbol(sym.OR);
            }
          // fall through
          case 81: break;
          case 27:
            { return symbol(sym.DECREMENT);
            }
          // fall through
          case 82: break;
          case 28:
            { return symbol(sym.BOOLEAN);
            }
          // fall through
          case 83: break;
          case 29:
            { return symbol(sym.DEFAULT);
            }
          // fall through
          case 84: break;
          case 30:
            { return symbol(sym.SWITCH);
            }
          // fall through
          case 85: break;
          case 31:
            { return symbol(sym.EQ);
            }
          // fall through
          case 86: break;
          case 32:
            { return symbol(sym.READ);
            }
          // fall through
          case 87: break;
          case 33:
            { return symbol(sym.AND);
            }
          // fall through
          case 88: break;
          case 34:
            { return symbol(sym.GT);
            }
          // fall through
          case 89: break;
          case 35:
            { return symbol(sym.PLUS);
            }
          // fall through
          case 90: break;
          case 36:
            { return symbol(sym.INTEGER);
            }
          // fall through
          case 91: break;
          case 37:
            { return symbol(sym.GE);
            }
          // fall through
          case 92: break;
          case 38:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 93: break;
          case 39:
            { return symbol(sym.POW);
            }
          // fall through
          case 94: break;
          case 40:
            { return symbol(sym.NOT);
            }
          // fall through
          case 95: break;
          case 41:
            { return symbol(sym.FLOAT);
            }
          // fall through
          case 96: break;
          case 42:
            { return symbol(sym.WHILE);
            }
          // fall through
          case 97: break;
          case 43:
            { return symbol(sym.CASE);
            }
          // fall through
          case 98: break;
          case 44:
            { return symbol(sym.NEQ);
            }
          // fall through
          case 99: break;
          case 45:
            { return symbol(sym.LT);
            }
          // fall through
          case 100: break;
          case 46:
            { return symbol(sym.LE);
            }
          // fall through
          case 101: break;
          case 47:
            { return symbol(sym.SEMICOLON);
            }
          // fall through
          case 102: break;
          case 48:
            { return symbol(sym.OPEN_BLOCK);
            }
          // fall through
          case 103: break;
          case 49:
            { return symbol(sym.OPEN_PAREN);
            }
          // fall through
          case 104: break;
          case 50:
            { return symbol(sym.TIMES);
            }
          // fall through
          case 105: break;
          case 51:
            { return symbol(sym.OPEN_BRACKET);
            }
          // fall through
          case 106: break;
          case 52:
            { return symbol(sym.MINUS);
            }
          // fall through
          case 107: break;
          case 53:
            { return symbol(sym.CLOSE_BLOCK);
            }
          // fall through
          case 108: break;
          case 54:
            { return symbol(sym.CLOSE_PAREN);
            }
          // fall through
          case 109: break;
          case 55:
            { return symbol(sym.CLOSE_BRACKET);
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
